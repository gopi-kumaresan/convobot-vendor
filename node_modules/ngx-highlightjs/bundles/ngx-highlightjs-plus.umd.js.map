{"version":3,"file":"ngx-highlightjs-plus.umd.js","sources":["../../../projects/ngx-highlightjs/plus/src/gist.model.ts","../../../projects/ngx-highlightjs/plus/src/code-loader.ts","../../../projects/ngx-highlightjs/plus/src/gist.ts","../../../projects/ngx-highlightjs/plus/src/code-from-url.ts","../../../projects/ngx-highlightjs/plus/src/highlight-plus.module.ts","../../../projects/ngx-highlightjs/plus/src/ngx-highlightjs-plus.ts"],"names":["InjectionToken","HttpParams","publishReplay","refCount","catchError","EMPTY","Injectable","HttpClient","Optional","Inject","EventEmitter","Directive","Input","Output","Pipe","NgModule","HighlightModule","HttpClientModule"],"mappings":"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","sourcesContent":["import { InjectionToken } from '@angular/core';\n\nexport interface GistOptions {\n  clientId: string;\n  clientSecret: string;\n}\n\nexport const GIST_OPTIONS = new InjectionToken<GistOptions>('GIST_OPTIONS');\n\ninterface Owner {\n  login: string;\n  id: number;\n  node_id: string;\n  avatar_url: string;\n  gravatar_id: string;\n  url: string;\n  html_url: string;\n  followers_url: string;\n  following_url: string;\n  gists_url: string;\n  starred_url: string;\n  subscriptions_url: string;\n  organizations_url: string;\n  repos_url: string;\n  events_url: string;\n  received_events_url: string;\n  type: string;\n  site_admin: boolean;\n}\n\ninterface User {\n  login: string;\n  id: number;\n  node_id: string;\n  avatar_url: string;\n  gravatar_id: string;\n  url: string;\n  html_url: string;\n  followers_url: string;\n  following_url: string;\n  gists_url: string;\n  starred_url: string;\n  subscriptions_url: string;\n  organizations_url: string;\n  repos_url: string;\n  events_url: string;\n  received_events_url: string;\n  type: string;\n  site_admin: boolean;\n}\n\ninterface ChangeStatus {\n  total: number;\n  additions: number;\n  deletions: number;\n}\n\ninterface History {\n  user: User;\n  version: string;\n  committed_at: Date;\n  change_status: ChangeStatus;\n  url: string;\n}\n\ninterface Files {\n  [fileName: string]: {\n    filename: string;\n    type: string;\n    language: string;\n    raw_url: string;\n    size: number;\n    truncated: boolean;\n    content: string;\n  };\n}\n\nexport interface Gist {\n  url: string;\n  forks_url: string;\n  commits_url: string;\n  id: string;\n  node_id: string;\n  git_pull_url: string;\n  git_push_url: string;\n  html_url: string;\n  files: Files;\n  public: boolean;\n  created_at: Date;\n  updated_at: Date;\n  description: string;\n  comments: number;\n  user?: any;\n  comments_url: string;\n  owner: Owner;\n  forks: any[];\n  history: History[];\n  truncated: boolean;\n}\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { Observable, EMPTY } from 'rxjs';\nimport { catchError, publishReplay, refCount } from 'rxjs/operators';\nimport { Gist, GIST_OPTIONS, GistOptions } from './gist.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CodeLoader {\n  constructor(private _http: HttpClient, @Optional() @Inject(GIST_OPTIONS) private _options: GistOptions) {\n  }\n\n  /**\n   * Get plus code\n   * @param id Gist ID\n   */\n  getCodeFromGist(id: string): Observable<Gist> {\n    let params!: HttpParams;\n    if (this.isOAuthProvided()) {\n      params = new HttpParams().set('client_id', this._options.clientId).set('client_secret', this._options.clientSecret);\n    }\n    return this.fetchFile(`https://api.github.com/gists/${id}`, { params, responseType: 'json' });\n  }\n\n  /**\n   * Get code by URL\n   * @param url File raw link\n   */\n  getCodeFromUrl(url: string): Observable<string> {\n    return this.fetchFile(url, { responseType: 'text' });\n  }\n\n  /**\n   * Check if OAuth option is provided\n   */\n  private isOAuthProvided(): boolean {\n    return !!this._options && !!this._options.clientId && !!this._options.clientSecret;\n  }\n\n  private fetchFile(url: string, options: any): Observable<any> {\n    // Check if URL is valid\n    if (isUrl(url)) {\n      return this._http.get(url, options).pipe(\n        // Catch response\n        publishReplay(1),\n        refCount(),\n        catchError((err: Error) => {\n          console.error('[NgxHighlight]: Unable to fetch the URL!', err.message);\n          return EMPTY;\n        })\n      );\n    }\n    return EMPTY;\n  }\n\n}\n\nfunction isUrl(url: string) {\n  const regExp = /(ftp|http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?/;\n  return regExp.test(url);\n}\n","import { Directive, Pipe, Input, Output, PipeTransform, EventEmitter } from '@angular/core';\nimport { CodeLoader } from './code-loader';\nimport { Gist } from './gist.model';\n\n@Directive({\n  selector: '[gist]'\n})\nexport class GistDirective {\n\n  constructor(private _loader: CodeLoader) {\n  }\n\n  @Input()\n  private set gist(value: string) {\n    if (value) {\n      this._loader.getCodeFromGist(value).subscribe((gist: Gist) => this.gistLoad.emit(gist));\n    }\n  }\n\n  @Output() gistLoad = new EventEmitter<Gist>();\n}\n\n@Pipe({\n  name: 'gistFile'\n})\nexport class GistFilePipe implements PipeTransform {\n  transform(gist: Gist, fileName: string): string | null {\n    return (gist && gist.files && gist.files[fileName]) ? gist.files[fileName].content : null;\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CodeLoader } from './code-loader';\n\n@Pipe({\n  name: 'codeFromUrl'\n})\nexport class CodeFromUrlPipe implements PipeTransform {\n\n  constructor(private _loader: CodeLoader) {\n  }\n\n  transform(url: string): Observable<string> {\n    return this._loader.getCodeFromUrl(url);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { HighlightModule } from 'ngx-highlightjs';\n// Uncomment the following line for development\n// import { HighlightModule } from '../../src/public-api';\nimport { GistFilePipe, GistDirective } from './gist';\nimport { CodeFromUrlPipe } from './code-from-url';\n\n@NgModule({\n  imports: [\n    HighlightModule,\n    HttpClientModule\n  ],\n  declarations: [\n    GistDirective,\n    GistFilePipe,\n    CodeFromUrlPipe\n  ],\n  exports: [\n    HighlightModule,\n    GistDirective,\n    GistFilePipe,\n    CodeFromUrlPipe\n  ]\n})\nexport class HighlightPlusModule {\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"]}