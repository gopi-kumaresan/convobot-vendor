import { Injectable, Inject, Optional } from '@angular/core';
import { filter, map, tap } from 'rxjs/operators';
import { HIGHLIGHT_OPTIONS } from './highlight.model';
import { HighlightLoader } from './highlight.loader';
import * as i0 from "@angular/core";
import * as i1 from "./highlight.loader";
import * as i2 from "./highlight.model";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './highlight.loader';
export class HighlightJS {
    constructor(_loader, options) {
        this._loader = _loader;
        this._hljs = null;
        // Load highlight.js library on init
        _loader.ready.pipe().subscribe((hljs) => {
            this._hljs = hljs;
            if (options && options.config) {
                // Set global config if present
                hljs.configure(options.config);
                if (hljs.listLanguages().length < 1) {
                    console.error('[HighlightJS]: No languages were registered!');
                }
            }
        });
    }
    // A reference for hljs library
    get hljs() {
        return this._hljs;
    }
    /**
     * Core highlighting function.
     * @param name Accepts a language name, or an alias
     * @param value A string with the code to highlight.
     * @param ignore_illegals When present and evaluates to a true value, forces highlighting to finish
     * even in case of detecting illegal syntax for the language instead of throwing an exception.
     * @param continuation An optional mode stack representing unfinished parsing.
     * When present, the function will restart parsing from this state instead of initializing a new one
     */
    highlight(name, value, ignore_illegals, continuation) {
        return this._loader.ready.pipe(map((hljs) => hljs.highlight(name, value, ignore_illegals, continuation)));
    }
    /**
     * Highlighting with language detection.
     * @param value Accepts a string with the code to highlight
     * @param languageSubset An optional array of language names and aliases restricting detection to only those languages.
     * The subset can also be set with configure, but the local parameter overrides the option if set.
     */
    highlightAuto(value, languageSubset) {
        return this._loader.ready.pipe(map((hljs) => hljs.highlightAuto(value, languageSubset)));
    }
    /**
     * Post-processing of the highlighted markup.
     * Currently consists of replacing indentation TAB characters and using <br> tags instead of new-line characters.
     * Options are set globally with configure.
     * @param value Accepts a string with the highlighted markup
     */
    fixMarkup(value) {
        return this._loader.ready.pipe(map((hljs) => hljs.fixMarkup(value)));
    }
    /**
     * Applies highlighting to a DOM node containing code.
     * The function uses language detection by default but you can specify the language in the class attribute of the DOM node.
     * See the class reference for all available language names and aliases.
     * @param block The element to apply highlight on.
     */
    highlightBlock(block) {
        return this._loader.ready.pipe(map((hljs) => hljs.highlightBlock(block)));
    }
    /**
     * Configures global options:
     * @param config HighlightJs configuration argument
     */
    configure(config) {
        return this._loader.ready.pipe(map((hljs) => hljs.configure(config)));
    }
    /**
     * Applies highlighting to all <pre><code>..</code></pre> blocks on a page.
     */
    initHighlighting() {
        return this._loader.ready.pipe(map((hljs) => hljs.initHighlighting()));
    }
    /**
     * Adds new language to the library under the specified name. Used mostly internally.
     * @param name A string with the name of the language being registered
     * @param language A function that returns an object which represents the language definition.
     * The function is passed the hljs object to be able to use common regular expressions defined within it.
     */
    registerLanguage(name, language) {
        return this._loader.ready.pipe(tap((hljs) => hljs.registerLanguage(name, language)));
    }
    /**
     * @return The languages names list.
     */
    listLanguages() {
        return this._loader.ready.pipe(map((hljs) => hljs.listLanguages()));
    }
    /**
     * Looks up a language by name or alias.
     * @param name Language name
     * @return The language object if found, undefined otherwise.
     */
    getLanguage(name) {
        return this._loader.ready.pipe(map((hljs) => hljs.getLanguage(name)));
    }
    /**
     * Display line numbers
     * @param el Code element
     */
    lineNumbersBlock(el) {
        return this._loader.ready.pipe(filter((hljs) => !!hljs.lineNumbersBlock), tap((hljs) => hljs.lineNumbersBlock(el)));
    }
}
HighlightJS.ɵfac = function HighlightJS_Factory(t) { return new (t || HighlightJS)(ɵngcc0.ɵɵinject(ɵngcc1.HighlightLoader), ɵngcc0.ɵɵinject(HIGHLIGHT_OPTIONS, 8)); };
HighlightJS.ɵprov = i0.ɵɵdefineInjectable({ factory: function HighlightJS_Factory() { return new HighlightJS(i0.ɵɵinject(i1.HighlightLoader), i0.ɵɵinject(i2.HIGHLIGHT_OPTIONS, 8)); }, token: HighlightJS, providedIn: "root" });
HighlightJS.ctorParameters = () => [
    { type: HighlightLoader },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [HIGHLIGHT_OPTIONS,] }] }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HighlightJS, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.HighlightLoader }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [HIGHLIGHT_OPTIONS]
            }] }]; }, null); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,