import { Directive, Pipe, Input, Output, EventEmitter } from '@angular/core';
import { CodeLoader } from './code-loader';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './code-loader';
export class GistDirective {
    constructor(_loader) {
        this._loader = _loader;
        this.gistLoad = new EventEmitter();
    }
    set gist(value) {
        if (value) {
            this._loader.getCodeFromGist(value).subscribe((gist) => this.gistLoad.emit(gist));
        }
    }
}
GistDirective.ɵfac = function GistDirective_Factory(t) { return new (t || GistDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CodeLoader)); };
GistDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: GistDirective, selectors: [["", "gist", ""]], inputs: { gist: "gist" }, outputs: { gistLoad: "gistLoad" } });
GistDirective.ctorParameters = () => [
    { type: CodeLoader }
];
GistDirective.propDecorators = {
    gist: [{ type: Input }],
    gistLoad: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(GistDirective, [{
        type: Directive,
        args: [{
                selector: '[gist]'
            }]
    }], function () { return [{ type: ɵngcc1.CodeLoader }]; }, { gistLoad: [{
            type: Output
        }], gist: [{
            type: Input
        }] }); })();
export class GistFilePipe {
    transform(gist, fileName) {
        return (gist && gist.files && gist.files[fileName]) ? gist.files[fileName].content : null;
    }
}
GistFilePipe.ɵfac = function GistFilePipe_Factory(t) { return new (t || GistFilePipe)(); };
GistFilePipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "gistFile", type: GistFilePipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(GistFilePipe, [{
        type: Pipe,
        args: [{
                name: 'gistFile'
            }]
    }], null, null); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2lzdC5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LWhpZ2hsaWdodGpzL3BsdXMvc3JjL2dpc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBaUIsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzVGLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7OztBQU0zQyxNQUFNLE9BQU8sYUFBYTtBQUUxQixJQUFFLFlBQW9CLE9BQW1CO0FBQ3hDLFFBRHFCLFlBQU8sR0FBUCxPQUFPLENBQVk7QUFBRSxRQVUvQixhQUFRLEdBQUcsSUFBSSxZQUFZLEVBQVEsQ0FBQztBQUMvQyxJQVZDLENBQUM7QUFFSCxJQUFFLElBQ1ksSUFBSSxDQUFDLEtBQWE7QUFDL0IsUUFBRyxJQUFJLEtBQUssRUFBRTtBQUNkLFlBQUssSUFBSSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsSUFBVSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQzdGLFNBQUk7QUFDSixJQUFDLENBQUM7QUFFSDsyQ0FmQyxTQUFTLFNBQUMsbUJBQ1QsUUFBUSxFQUFFLFFBQVEsZUFDbkI7bUtBQ0s7QUFBRTtBQUVVLFlBUlQsVUFBVTtBQUFJO0FBQUk7QUFDVixtQkFVZCxLQUFLO0FBQ0wsdUJBTUEsTUFBTTtBQUFLOzs7Ozs7Ozs7O29CQUFFO0FBTWhCLE1BQU0sT0FBTyxZQUFZO0FBQUksSUFDM0IsU0FBUyxDQUFDLElBQVUsRUFBRSxRQUFnQjtBQUFLLFFBQ3pDLE9BQU8sQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7QUFDN0YsSUFBQyxDQUFDO0FBQ0Y7MENBUEEsSUFBSSxTQUFDLG1CQUNKLElBQUksRUFBRSxVQUFVO2FBQ2pCOzs7Ozs7O0FBeEJBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQU1BLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQVVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBVEEsQUFBQSxBQUVBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQWJBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFMQSxBQUFBLEFBV0EsQUFBQSxBQU9BLEFBQUEsQUFNQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBTkEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgUGlwZSwgSW5wdXQsIE91dHB1dCwgUGlwZVRyYW5zZm9ybSwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb2RlTG9hZGVyIH0gZnJvbSAnLi9jb2RlLWxvYWRlcic7XG5pbXBvcnQgeyBHaXN0IH0gZnJvbSAnLi9naXN0Lm1vZGVsJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2dpc3RdJ1xufSlcbmV4cG9ydCBjbGFzcyBHaXN0RGlyZWN0aXZlIHtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9sb2FkZXI6IENvZGVMb2FkZXIpIHtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHByaXZhdGUgc2V0IGdpc3QodmFsdWU6IHN0cmluZykge1xuICAgIGlmICh2YWx1ZSkge1xuICAgICAgdGhpcy5fbG9hZGVyLmdldENvZGVGcm9tR2lzdCh2YWx1ZSkuc3Vic2NyaWJlKChnaXN0OiBHaXN0KSA9PiB0aGlzLmdpc3RMb2FkLmVtaXQoZ2lzdCkpO1xuICAgIH1cbiAgfVxuXG4gIEBPdXRwdXQoKSBnaXN0TG9hZCA9IG5ldyBFdmVudEVtaXR0ZXI8R2lzdD4oKTtcbn1cblxuQFBpcGUoe1xuICBuYW1lOiAnZ2lzdEZpbGUnXG59KVxuZXhwb3J0IGNsYXNzIEdpc3RGaWxlUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICB0cmFuc2Zvcm0oZ2lzdDogR2lzdCwgZmlsZU5hbWU6IHN0cmluZyk6IHN0cmluZyB8IG51bGwge1xuICAgIHJldHVybiAoZ2lzdCAmJiBnaXN0LmZpbGVzICYmIGdpc3QuZmlsZXNbZmlsZU5hbWVdKSA/IGdpc3QuZmlsZXNbZmlsZU5hbWVdLmNvbnRlbnQgOiBudWxsO1xuICB9XG59XG4iXX0=