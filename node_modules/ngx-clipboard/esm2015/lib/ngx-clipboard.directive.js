import { __decorate } from "tslib";
import { Directive, EventEmitter, HostListener, Input, Output } from '@angular/core';
import { ClipboardService } from './ngx-clipboard.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './ngx-clipboard.service';
let ClipboardDirective = class ClipboardDirective {
    constructor(clipboardSrv) {
        this.clipboardSrv = clipboardSrv;
        this.cbOnSuccess = new EventEmitter();
        this.cbOnError = new EventEmitter();
    }
    // tslint:disable-next-line:no-empty
    ngOnInit() { }
    ngOnDestroy() {
        this.clipboardSrv.destroy(this.container);
    }
    onClick(event) {
        if (!this.clipboardSrv.isSupported) {
            this.handleResult(false, undefined, event);
        }
        else if (this.targetElm && this.clipboardSrv.isTargetValid(this.targetElm)) {
            this.handleResult(this.clipboardSrv.copyFromInputElement(this.targetElm), this.targetElm.value, event);
        }
        else if (this.cbContent) {
            this.handleResult(this.clipboardSrv.copyFromContent(this.cbContent, this.container), this.cbContent, event);
        }
    }
    /**
     * Fires an event based on the copy operation result.
     * @param succeeded
     */
    handleResult(succeeded, copiedContent, event) {
        let response = {
            isSuccess: succeeded,
            event
        };
        if (succeeded) {
            response = Object.assign(response, {
                content: copiedContent,
                successMessage: this.cbSuccessMsg
            });
            this.cbOnSuccess.emit(response);
        }
        else {
            this.cbOnError.emit(response);
        }
        this.clipboardSrv.pushCopyResponse(response);
    }
};
ClipboardDirective.ɵfac = function ClipboardDirective_Factory(t) { return new (t || ClipboardDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ClipboardService)); };
ClipboardDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ClipboardDirective, selectors: [["", "ngxClipboard", ""]], hostBindings: function ClipboardDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function ClipboardDirective_click_HostBindingHandler($event) { return ctx.onClick($event.target); });
    } }, inputs: { targetElm: ["ngxClipboard", "targetElm"], container: "container", cbContent: "cbContent", cbSuccessMsg: "cbSuccessMsg" }, outputs: { cbOnSuccess: "cbOnSuccess", cbOnError: "cbOnError" } });
ClipboardDirective.ctorParameters = () => [
    { type: ClipboardService }
];
__decorate([
    Input('ngxClipboard')
], ClipboardDirective.prototype, "targetElm", void 0);
__decorate([
    Input()
], ClipboardDirective.prototype, "container", void 0);
__decorate([
    Input()
], ClipboardDirective.prototype, "cbContent", void 0);
__decorate([
    Input()
], ClipboardDirective.prototype, "cbSuccessMsg", void 0);
__decorate([
    Output()
], ClipboardDirective.prototype, "cbOnSuccess", void 0);
__decorate([
    Output()
], ClipboardDirective.prototype, "cbOnError", void 0);
__decorate([
    HostListener('click', ['$event.target'])
], ClipboardDirective.prototype, "onClick", null);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ClipboardDirective, [{
        type: Directive,
        args: [{
                selector: '[ngxClipboard]'
            }]
    }], function () { return [{ type: ɵngcc1.ClipboardService }]; }, { cbOnSuccess: [{
            type: Output
        }], cbOnError: [{
            type: Output
        }], onClick: [{
            type: HostListener,
            args: ['click', ['$event.target']]
        }], targetElm: [{
            type: Input,
            args: ['ngxClipboard']
        }], container: [{
            type: Input
        }], cbContent: [{
            type: Input
        }], cbSuccessMsg: [{
            type: Input
        }] }); })();
export { ClipboardDirective };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,