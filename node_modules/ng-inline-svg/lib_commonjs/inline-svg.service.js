"use strict";
var ɵngcc0 = require('@angular/core');
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var i0 = require("@angular/core");
var InlineSVGService = (function () {
    function InlineSVGService(rendererFactory) {
        this._ranScripts = {};
        this._renderer = rendererFactory.createRenderer(null, null);
    }
    InlineSVGService.prototype.insertEl = function (dir, parentEl, content, replaceContents, prepend) {
        if (replaceContents && !prepend) {
            var parentNode = dir._prevSVG && dir._prevSVG.parentNode;
            if (parentNode) {
                this._renderer.removeChild(parentNode, dir._prevSVG);
            }
            parentEl.innerHTML = '';
        }
        if (prepend) {
            this._renderer.insertBefore(parentEl, content, parentEl.firstChild);
        }
        else {
            this._renderer.appendChild(parentEl, content);
        }
        if (content.nodeName === 'svg') {
            dir._prevSVG = content;
        }
    };
    InlineSVGService.prototype.evalScripts = function (svg, url, evalMode) {
        var scripts = svg.querySelectorAll('script');
        var scriptsToEval = [];
        for (var i = 0; i < scripts.length; i++) {
            var scriptType = scripts[i].getAttribute('type');
            if (!scriptType || scriptType === 'application/ecmascript' || scriptType === 'application/javascript') {
                var script = scripts[i].innerText || scripts[i].textContent;
                scriptsToEval.push(script);
                this._renderer.removeChild(scripts[i].parentNode, scripts[i]);
            }
        }
        if (scriptsToEval.length > 0 && (evalMode === "always" ||
            (evalMode === "once" && !this._ranScripts[url]))) {
            for (var i = 0; i < scriptsToEval.length; i++) {
                new Function(scriptsToEval[i])(window);
            }
            this._ranScripts[url] = true;
        }
    };
    InlineSVGService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function InlineSVGService_Factory() { return new InlineSVGService(i0.ɵɵinject(i0.RendererFactory2)); }, token: InlineSVGService, providedIn: "root" });
    InlineSVGService = __decorate([ __metadata("design:paramtypes", [core_1.RendererFactory2])
    ], InlineSVGService);
InlineSVGService.ɵfac = function InlineSVGService_Factory(t) { return new (t || InlineSVGService)(ɵngcc0.ɵɵinject(ɵngcc0.RendererFactory2)); };
InlineSVGService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: InlineSVGService, factory: function (t) { return InlineSVGService.ɵfac(t); }, providedIn: 'root' });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(InlineSVGService, [{
        type: core_1.Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc0.RendererFactory2 }]; }, null); })();
    return InlineSVGService;
}());
exports.InlineSVGService = InlineSVGService;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5saW5lLXN2Zy5zZXJ2aWNlLmpzIiwic291cmNlcyI6WyJpbmxpbmUtc3ZnLnNlcnZpY2UuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FJTztBQUNQOzs7Ozs7OztpRkFBeUI7QUFDekI7QUFDQTtBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcclxuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xyXG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcclxuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XHJcbn07XHJcbnZhciBfX21ldGFkYXRhID0gKHRoaXMgJiYgdGhpcy5fX21ldGFkYXRhKSB8fCBmdW5jdGlvbiAoaywgdikge1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKGssIHYpO1xyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbnZhciBjb3JlXzEgPSByZXF1aXJlKFwiQGFuZ3VsYXIvY29yZVwiKTtcclxudmFyIGkwID0gcmVxdWlyZShcIkBhbmd1bGFyL2NvcmVcIik7XHJcbnZhciBJbmxpbmVTVkdTZXJ2aWNlID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIElubGluZVNWR1NlcnZpY2UocmVuZGVyZXJGYWN0b3J5KSB7XHJcbiAgICAgICAgdGhpcy5fcmFuU2NyaXB0cyA9IHt9O1xyXG4gICAgICAgIHRoaXMuX3JlbmRlcmVyID0gcmVuZGVyZXJGYWN0b3J5LmNyZWF0ZVJlbmRlcmVyKG51bGwsIG51bGwpO1xyXG4gICAgfVxyXG4gICAgSW5saW5lU1ZHU2VydmljZS5wcm90b3R5cGUuaW5zZXJ0RWwgPSBmdW5jdGlvbiAoZGlyLCBwYXJlbnRFbCwgY29udGVudCwgcmVwbGFjZUNvbnRlbnRzLCBwcmVwZW5kKSB7XHJcbiAgICAgICAgaWYgKHJlcGxhY2VDb250ZW50cyAmJiAhcHJlcGVuZCkge1xyXG4gICAgICAgICAgICB2YXIgcGFyZW50Tm9kZSA9IGRpci5fcHJldlNWRyAmJiBkaXIuX3ByZXZTVkcucGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgaWYgKHBhcmVudE5vZGUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3JlbmRlcmVyLnJlbW92ZUNoaWxkKHBhcmVudE5vZGUsIGRpci5fcHJldlNWRyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcGFyZW50RWwuaW5uZXJIVE1MID0gJyc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChwcmVwZW5kKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3JlbmRlcmVyLmluc2VydEJlZm9yZShwYXJlbnRFbCwgY29udGVudCwgcGFyZW50RWwuZmlyc3RDaGlsZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl9yZW5kZXJlci5hcHBlbmRDaGlsZChwYXJlbnRFbCwgY29udGVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjb250ZW50Lm5vZGVOYW1lID09PSAnc3ZnJykge1xyXG4gICAgICAgICAgICBkaXIuX3ByZXZTVkcgPSBjb250ZW50O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBJbmxpbmVTVkdTZXJ2aWNlLnByb3RvdHlwZS5ldmFsU2NyaXB0cyA9IGZ1bmN0aW9uIChzdmcsIHVybCwgZXZhbE1vZGUpIHtcclxuICAgICAgICB2YXIgc2NyaXB0cyA9IHN2Zy5xdWVyeVNlbGVjdG9yQWxsKCdzY3JpcHQnKTtcclxuICAgICAgICB2YXIgc2NyaXB0c1RvRXZhbCA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2NyaXB0cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB2YXIgc2NyaXB0VHlwZSA9IHNjcmlwdHNbaV0uZ2V0QXR0cmlidXRlKCd0eXBlJyk7XHJcbiAgICAgICAgICAgIGlmICghc2NyaXB0VHlwZSB8fCBzY3JpcHRUeXBlID09PSAnYXBwbGljYXRpb24vZWNtYXNjcmlwdCcgfHwgc2NyaXB0VHlwZSA9PT0gJ2FwcGxpY2F0aW9uL2phdmFzY3JpcHQnKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgc2NyaXB0ID0gc2NyaXB0c1tpXS5pbm5lclRleHQgfHwgc2NyaXB0c1tpXS50ZXh0Q29udGVudDtcclxuICAgICAgICAgICAgICAgIHNjcmlwdHNUb0V2YWwucHVzaChzY3JpcHQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcmVuZGVyZXIucmVtb3ZlQ2hpbGQoc2NyaXB0c1tpXS5wYXJlbnROb2RlLCBzY3JpcHRzW2ldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoc2NyaXB0c1RvRXZhbC5sZW5ndGggPiAwICYmIChldmFsTW9kZSA9PT0gXCJhbHdheXNcIiB8fFxyXG4gICAgICAgICAgICAoZXZhbE1vZGUgPT09IFwib25jZVwiICYmICF0aGlzLl9yYW5TY3JpcHRzW3VybF0pKSkge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNjcmlwdHNUb0V2YWwubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIG5ldyBGdW5jdGlvbihzY3JpcHRzVG9FdmFsW2ldKSh3aW5kb3cpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuX3JhblNjcmlwdHNbdXJsXSA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIElubGluZVNWR1NlcnZpY2UubmdJbmplY3RhYmxlRGVmID0gaTAuybXJtWRlZmluZUluamVjdGFibGUoeyBmYWN0b3J5OiBmdW5jdGlvbiBJbmxpbmVTVkdTZXJ2aWNlX0ZhY3RvcnkoKSB7IHJldHVybiBuZXcgSW5saW5lU1ZHU2VydmljZShpMC7Jtcm1aW5qZWN0KGkwLlJlbmRlcmVyRmFjdG9yeTIpKTsgfSwgdG9rZW46IElubGluZVNWR1NlcnZpY2UsIHByb3ZpZGVkSW46IFwicm9vdFwiIH0pO1xyXG4gICAgSW5saW5lU1ZHU2VydmljZSA9IF9fZGVjb3JhdGUoW1xyXG4gICAgICAgIGNvcmVfMS5JbmplY3RhYmxlKHtcclxuICAgICAgICAgICAgcHJvdmlkZWRJbjogJ3Jvb3QnXHJcbiAgICAgICAgfSksXHJcbiAgICAgICAgX19tZXRhZGF0YShcImRlc2lnbjpwYXJhbXR5cGVzXCIsIFtjb3JlXzEuUmVuZGVyZXJGYWN0b3J5Ml0pXHJcbiAgICBdLCBJbmxpbmVTVkdTZXJ2aWNlKTtcclxuICAgIHJldHVybiBJbmxpbmVTVkdTZXJ2aWNlO1xyXG59KCkpO1xyXG5leHBvcnRzLklubGluZVNWR1NlcnZpY2UgPSBJbmxpbmVTVkdTZXJ2aWNlO1xyXG4iXX0=