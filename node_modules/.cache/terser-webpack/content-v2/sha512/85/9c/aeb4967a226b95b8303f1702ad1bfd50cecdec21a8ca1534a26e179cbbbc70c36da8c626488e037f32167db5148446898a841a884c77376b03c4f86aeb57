{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{ECCn:function(module,exports){function deepFreeze(obj){return obj instanceof Map?obj.clear=obj.delete=obj.set=function(){throw new Error(\"map is read-only\")}:obj instanceof Set&&(obj.add=obj.clear=obj.delete=function(){throw new Error(\"set is read-only\")}),Object.freeze(obj),Object.getOwnPropertyNames(obj).forEach(function(name){var prop=obj[name];\"object\"!=typeof prop||Object.isFrozen(prop)||deepFreeze(prop)}),obj}var deepFreezeEs6=deepFreeze;deepFreezeEs6.default=deepFreeze;class Response{constructor(mode){void 0===mode.data&&(mode.data={}),this.data=mode.data,this.isMatchIgnored=!1}ignoreMatch(){this.isMatchIgnored=!0}}function escapeHTML(value){return value.replace(/&/g,\"&amp;\").replace(/</g,\"&lt;\").replace(/>/g,\"&gt;\").replace(/\"/g,\"&quot;\").replace(/'/g,\"&#x27;\")}function inherit(original,...objects){const result=Object.create(null);for(const key in original)result[key]=original[key];return objects.forEach(function(obj){for(const key in obj)result[key]=obj[key]}),result}const emitsWrappingTags=node=>!!node.kind;class HTMLRenderer{constructor(parseTree,options){this.buffer=\"\",this.classPrefix=options.classPrefix,parseTree.walk(this)}addText(text){this.buffer+=escapeHTML(text)}openNode(node){if(!emitsWrappingTags(node))return;let className=node.kind;node.sublanguage||(className=`${this.classPrefix}${className}`),this.span(className)}closeNode(node){emitsWrappingTags(node)&&(this.buffer+=\"</span>\")}value(){return this.buffer}span(className){this.buffer+=`<span class=\"${className}\">`}}class TokenTree{constructor(){this.rootNode={children:[]},this.stack=[this.rootNode]}get top(){return this.stack[this.stack.length-1]}get root(){return this.rootNode}add(node){this.top.children.push(node)}openNode(kind){const node={kind:kind,children:[]};this.add(node),this.stack.push(node)}closeNode(){if(this.stack.length>1)return this.stack.pop()}closeAllNodes(){for(;this.closeNode(););}toJSON(){return JSON.stringify(this.rootNode,null,4)}walk(builder){return this.constructor._walk(builder,this.rootNode)}static _walk(builder,node){return\"string\"==typeof node?builder.addText(node):node.children&&(builder.openNode(node),node.children.forEach(child=>this._walk(builder,child)),builder.closeNode(node)),builder}static _collapse(node){\"string\"!=typeof node&&node.children&&(node.children.every(el=>\"string\"==typeof el)?node.children=[node.children.join(\"\")]:node.children.forEach(child=>{TokenTree._collapse(child)}))}}class TokenTreeEmitter extends TokenTree{constructor(options){super(),this.options=options}addKeyword(text,kind){\"\"!==text&&(this.openNode(kind),this.addText(text),this.closeNode())}addText(text){\"\"!==text&&this.add(text)}addSublanguage(emitter,name){const node=emitter.root;node.kind=name,node.sublanguage=!0,this.add(node)}toHTML(){return new HTMLRenderer(this,this.options).value()}finalize(){return!0}}function source(re){return re?\"string\"==typeof re?re:re.source:null}const BACKREF_RE=/\\[(?:[^\\\\\\]]|\\\\.)*\\]|\\(\\??|\\\\([1-9][0-9]*)|\\\\./,C_NUMBER_RE=\"(-?)(\\\\b0[xX][a-fA-F0-9]+|(\\\\b\\\\d+(\\\\.\\\\d*)?|\\\\.\\\\d+)([eE][-+]?\\\\d+)?)\",BACKSLASH_ESCAPE={begin:\"\\\\\\\\[\\\\s\\\\S]\",relevance:0},APOS_STRING_MODE={className:\"string\",begin:\"'\",end:\"'\",illegal:\"\\\\n\",contains:[BACKSLASH_ESCAPE]},QUOTE_STRING_MODE={className:\"string\",begin:'\"',end:'\"',illegal:\"\\\\n\",contains:[BACKSLASH_ESCAPE]},PHRASAL_WORDS_MODE={begin:/\\b(a|an|the|are|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|they|like|more)\\b/},COMMENT=function(begin,end,modeOptions={}){const mode=inherit({className:\"comment\",begin:begin,end:end,contains:[]},modeOptions);return mode.contains.push(PHRASAL_WORDS_MODE),mode.contains.push({className:\"doctag\",begin:\"(?:TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):\",relevance:0}),mode},C_LINE_COMMENT_MODE=COMMENT(\"//\",\"$\"),C_BLOCK_COMMENT_MODE=COMMENT(\"/\\\\*\",\"\\\\*/\"),HASH_COMMENT_MODE=COMMENT(\"#\",\"$\");var MODES=Object.freeze({__proto__:null,MATCH_NOTHING_RE:/\\b\\B/,IDENT_RE:\"[a-zA-Z]\\\\w*\",UNDERSCORE_IDENT_RE:\"[a-zA-Z_]\\\\w*\",NUMBER_RE:\"\\\\b\\\\d+(\\\\.\\\\d+)?\",C_NUMBER_RE:C_NUMBER_RE,BINARY_NUMBER_RE:\"\\\\b(0b[01]+)\",RE_STARTERS_RE:\"!|!=|!==|%|%=|&|&&|&=|\\\\*|\\\\*=|\\\\+|\\\\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\\\\?|\\\\[|\\\\{|\\\\(|\\\\^|\\\\^=|\\\\||\\\\|=|\\\\|\\\\||~\",SHEBANG:(opts={})=>{const beginShebang=/^#![ ]*\\//;return opts.binary&&(opts.begin=function(...args){return args.map(x=>source(x)).join(\"\")}(beginShebang,/.*\\b/,opts.binary,/\\b.*/)),inherit({className:\"meta\",begin:beginShebang,end:/$/,relevance:0,\"on:begin\":(m,resp)=>{0!==m.index&&resp.ignoreMatch()}},opts)},BACKSLASH_ESCAPE:BACKSLASH_ESCAPE,APOS_STRING_MODE:APOS_STRING_MODE,QUOTE_STRING_MODE:QUOTE_STRING_MODE,PHRASAL_WORDS_MODE:PHRASAL_WORDS_MODE,COMMENT:COMMENT,C_LINE_COMMENT_MODE:C_LINE_COMMENT_MODE,C_BLOCK_COMMENT_MODE:C_BLOCK_COMMENT_MODE,HASH_COMMENT_MODE:HASH_COMMENT_MODE,NUMBER_MODE:{className:\"number\",begin:\"\\\\b\\\\d+(\\\\.\\\\d+)?\",relevance:0},C_NUMBER_MODE:{className:\"number\",begin:C_NUMBER_RE,relevance:0},BINARY_NUMBER_MODE:{className:\"number\",begin:\"\\\\b(0b[01]+)\",relevance:0},CSS_NUMBER_MODE:{className:\"number\",begin:\"\\\\b\\\\d+(\\\\.\\\\d+)?(%|em|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc|px|deg|grad|rad|turn|s|ms|Hz|kHz|dpi|dpcm|dppx)?\",relevance:0},REGEXP_MODE:{begin:/(?=\\/[^/\\n]*\\/)/,contains:[{className:\"regexp\",begin:/\\//,end:/\\/[gimuy]*/,illegal:/\\n/,contains:[BACKSLASH_ESCAPE,{begin:/\\[/,end:/\\]/,relevance:0,contains:[BACKSLASH_ESCAPE]}]}]},TITLE_MODE:{className:\"title\",begin:\"[a-zA-Z]\\\\w*\",relevance:0},UNDERSCORE_TITLE_MODE:{className:\"title\",begin:\"[a-zA-Z_]\\\\w*\",relevance:0},METHOD_GUARD:{begin:\"\\\\.\\\\s*[a-zA-Z_]\\\\w*\",relevance:0},END_SAME_AS_BEGIN:function(mode){return Object.assign(mode,{\"on:begin\":(m,resp)=>{resp.data._beginMatch=m[1]},\"on:end\":(m,resp)=>{resp.data._beginMatch!==m[1]&&resp.ignoreMatch()}})}});function skipIfhasPrecedingDot(match,response){\".\"===match.input[match.index-1]&&response.ignoreMatch()}function beginKeywords(mode,parent){parent&&mode.beginKeywords&&(mode.begin=\"\\\\b(\"+mode.beginKeywords.split(\" \").join(\"|\")+\")(?!\\\\.)(?=\\\\b|\\\\s)\",mode.__beforeBegin=skipIfhasPrecedingDot,mode.keywords=mode.keywords||mode.beginKeywords,delete mode.beginKeywords,void 0===mode.relevance&&(mode.relevance=0))}function compileIllegal(mode,_parent){Array.isArray(mode.illegal)&&(mode.illegal=function(...args){return\"(\"+args.map(x=>source(x)).join(\"|\")+\")\"}(...mode.illegal))}function compileMatch(mode,_parent){if(mode.match){if(mode.begin||mode.end)throw new Error(\"begin & end are not supported with match\");mode.begin=mode.match,delete mode.match}}function compileRelevance(mode,_parent){void 0===mode.relevance&&(mode.relevance=1)}const COMMON_KEYWORDS=[\"of\",\"and\",\"for\",\"in\",\"not\",\"or\",\"if\",\"then\",\"parent\",\"list\",\"value\"];function compileKeywords(rawKeywords,caseInsensitive,className=\"keyword\"){const compiledKeywords={};return\"string\"==typeof rawKeywords?compileList(className,rawKeywords.split(\" \")):Array.isArray(rawKeywords)?compileList(className,rawKeywords):Object.keys(rawKeywords).forEach(function(className){Object.assign(compiledKeywords,compileKeywords(rawKeywords[className],caseInsensitive,className))}),compiledKeywords;function compileList(className,keywordList){caseInsensitive&&(keywordList=keywordList.map(x=>x.toLowerCase())),keywordList.forEach(function(keyword){const pair=keyword.split(\"|\");compiledKeywords[pair[0]]=[className,scoreForKeyword(pair[0],pair[1])]})}}function scoreForKeyword(keyword,providedScore){return providedScore?Number(providedScore):function(keyword){return COMMON_KEYWORDS.includes(keyword.toLowerCase())}(keyword)?0:1}function compileLanguage(language,{}){function langRe(value,global){return new RegExp(source(value),\"m\"+(language.case_insensitive?\"i\":\"\")+(global?\"g\":\"\"))}class MultiRegex{constructor(){this.matchIndexes={},this.regexes=[],this.matchAt=1,this.position=0}addRule(re,opts){opts.position=this.position++,this.matchIndexes[this.matchAt]=opts,this.regexes.push([opts,re]),this.matchAt+=function(re){return new RegExp(re.toString()+\"|\").exec(\"\").length-1}(re)+1}compile(){0===this.regexes.length&&(this.exec=()=>null);const terminators=this.regexes.map(el=>el[1]);this.matcherRe=langRe(function(regexps,separator=\"|\"){let numCaptures=0;return regexps.map(regex=>{numCaptures+=1;const offset=numCaptures;let re=source(regex),out=\"\";for(;re.length>0;){const match=BACKREF_RE.exec(re);if(!match){out+=re;break}out+=re.substring(0,match.index),re=re.substring(match.index+match[0].length),\"\\\\\"===match[0][0]&&match[1]?out+=\"\\\\\"+String(Number(match[1])+offset):(out+=match[0],\"(\"===match[0]&&numCaptures++)}return out}).map(re=>`(${re})`).join(separator)}(terminators),!0),this.lastIndex=0}exec(s){this.matcherRe.lastIndex=this.lastIndex;const match=this.matcherRe.exec(s);if(!match)return null;const i=match.findIndex((el,i)=>i>0&&void 0!==el),matchData=this.matchIndexes[i];return match.splice(0,i),Object.assign(match,matchData)}}class ResumableMultiRegex{constructor(){this.rules=[],this.multiRegexes=[],this.count=0,this.lastIndex=0,this.regexIndex=0}getMatcher(index){if(this.multiRegexes[index])return this.multiRegexes[index];const matcher=new MultiRegex;return this.rules.slice(index).forEach(([re,opts])=>matcher.addRule(re,opts)),matcher.compile(),this.multiRegexes[index]=matcher,matcher}resumingScanAtSamePosition(){return 0!==this.regexIndex}considerAll(){this.regexIndex=0}addRule(re,opts){this.rules.push([re,opts]),\"begin\"===opts.type&&this.count++}exec(s){const m=this.getMatcher(this.regexIndex);m.lastIndex=this.lastIndex;let result=m.exec(s);if(this.resumingScanAtSamePosition())if(result&&result.index===this.lastIndex);else{const m2=this.getMatcher(0);m2.lastIndex=this.lastIndex+1,result=m2.exec(s)}return result&&(this.regexIndex+=result.position+1,this.regexIndex===this.count&&this.considerAll()),result}}if(language.compilerExtensions||(language.compilerExtensions=[]),language.contains&&language.contains.includes(\"self\"))throw new Error(\"ERR: contains `self` is not supported at the top-level of a language.  See documentation.\");return language.classNameAliases=inherit(language.classNameAliases||{}),function compileMode(mode,parent){const cmode=mode;if(mode.isCompiled)return cmode;[compileMatch].forEach(ext=>ext(mode,parent)),language.compilerExtensions.forEach(ext=>ext(mode,parent)),mode.__beforeBegin=null,[beginKeywords,compileIllegal,compileRelevance].forEach(ext=>ext(mode,parent)),mode.isCompiled=!0;let keywordPattern=null;if(\"object\"==typeof mode.keywords&&(keywordPattern=mode.keywords.$pattern,delete mode.keywords.$pattern),mode.keywords&&(mode.keywords=compileKeywords(mode.keywords,language.case_insensitive)),mode.lexemes&&keywordPattern)throw new Error(\"ERR: Prefer `keywords.$pattern` to `mode.lexemes`, BOTH are not allowed. (see mode reference) \");return keywordPattern=keywordPattern||mode.lexemes||/\\w+/,cmode.keywordPatternRe=langRe(keywordPattern,!0),parent&&(mode.begin||(mode.begin=/\\B|\\b/),cmode.beginRe=langRe(mode.begin),mode.endSameAsBegin&&(mode.end=mode.begin),mode.end||mode.endsWithParent||(mode.end=/\\B|\\b/),mode.end&&(cmode.endRe=langRe(mode.end)),cmode.terminatorEnd=source(mode.end)||\"\",mode.endsWithParent&&parent.terminatorEnd&&(cmode.terminatorEnd+=(mode.end?\"|\":\"\")+parent.terminatorEnd)),mode.illegal&&(cmode.illegalRe=langRe(mode.illegal)),mode.contains||(mode.contains=[]),mode.contains=[].concat(...mode.contains.map(function(c){return function(mode){return mode.variants&&!mode.cachedVariants&&(mode.cachedVariants=mode.variants.map(function(variant){return inherit(mode,{variants:null},variant)})),mode.cachedVariants?mode.cachedVariants:dependencyOnParent(mode)?inherit(mode,{starts:mode.starts?inherit(mode.starts):null}):Object.isFrozen(mode)?inherit(mode):mode}(\"self\"===c?mode:c)})),mode.contains.forEach(function(c){compileMode(c,cmode)}),mode.starts&&compileMode(mode.starts,parent),cmode.matcher=function(mode){const mm=new ResumableMultiRegex;return mode.contains.forEach(term=>mm.addRule(term.begin,{rule:term,type:\"begin\"})),mode.terminatorEnd&&mm.addRule(mode.terminatorEnd,{type:\"end\"}),mode.illegal&&mm.addRule(mode.illegal,{type:\"illegal\"}),mm}(cmode),cmode}(language)}function dependencyOnParent(mode){return!!mode&&(mode.endsWithParent||dependencyOnParent(mode.starts))}function BuildVuePlugin(hljs){const Component={props:[\"language\",\"code\",\"autodetect\"],data:function(){return{detectedLanguage:\"\",unknownLanguage:!1}},computed:{className(){return this.unknownLanguage?\"\":\"hljs \"+this.detectedLanguage},highlighted(){if(!this.autoDetect&&!hljs.getLanguage(this.language))return console.warn(`The language \"${this.language}\" you specified could not be found.`),this.unknownLanguage=!0,escapeHTML(this.code);let result={};return this.autoDetect?(result=hljs.highlightAuto(this.code),this.detectedLanguage=result.language):(result=hljs.highlight(this.language,this.code,this.ignoreIllegals),this.detectedLanguage=this.language),result.value},autoDetect(){return!this.language||(value=this.autodetect,Boolean(value||\"\"===value));var value},ignoreIllegals:()=>!0},render(createElement){return createElement(\"pre\",{},[createElement(\"code\",{class:this.className,domProps:{innerHTML:this.highlighted}})])}};return{Component:Component,VuePlugin:{install(Vue){Vue.component(\"highlightjs\",Component)}}}}const mergeHTMLPlugin={\"after:highlightElement\":({el:el,result:result,text:text})=>{const originalStream=nodeStream(el);if(!originalStream.length)return;const resultNode=document.createElement(\"div\");resultNode.innerHTML=result.value,result.value=function(original,highlighted,value){let processed=0,result=\"\";const nodeStack=[];function selectStream(){return original.length&&highlighted.length?original[0].offset!==highlighted[0].offset?original[0].offset<highlighted[0].offset?original:highlighted:\"start\"===highlighted[0].event?original:highlighted:original.length?original:highlighted}function open(node){result+=\"<\"+tag(node)+[].map.call(node.attributes,function(attr){return\" \"+attr.nodeName+'=\"'+escapeHTML(attr.value)+'\"'}).join(\"\")+\">\"}function close(node){result+=\"</\"+tag(node)+\">\"}function render(event){(\"start\"===event.event?open:close)(event.node)}for(;original.length||highlighted.length;){let stream=selectStream();if(result+=escapeHTML(value.substring(processed,stream[0].offset)),processed=stream[0].offset,stream===original){nodeStack.reverse().forEach(close);do{render(stream.splice(0,1)[0]),stream=selectStream()}while(stream===original&&stream.length&&stream[0].offset===processed);nodeStack.reverse().forEach(open)}else\"start\"===stream[0].event?nodeStack.push(stream[0].node):nodeStack.pop(),render(stream.splice(0,1)[0])}return result+escapeHTML(value.substr(processed))}(originalStream,nodeStream(resultNode),text)}};function tag(node){return node.nodeName.toLowerCase()}function nodeStream(node){const result=[];return function _nodeStream(node,offset){for(let child=node.firstChild;child;child=child.nextSibling)3===child.nodeType?offset+=child.nodeValue.length:1===child.nodeType&&(result.push({event:\"start\",offset:offset,node:child}),offset=_nodeStream(child,offset),tag(child).match(/br|hr|img|input/)||result.push({event:\"stop\",offset:offset,node:child}));return offset}(node,0),result}const seenDeprecations={},error=message=>{console.error(message)},warn=(message,...args)=>{console.log(\"WARN: \"+message,...args)},deprecated=(version,message)=>{seenDeprecations[`${version}/${message}`]||(console.log(`Deprecated as of ${version}. ${message}`),seenDeprecations[`${version}/${message}`]=!0)},escape$1=escapeHTML,inherit$1=inherit,NO_MATCH=Symbol(\"nomatch\");var highlight=function(hljs){const languages=Object.create(null),aliases=Object.create(null),plugins=[];let SAFE_MODE=!0;const fixMarkupRe=/(^(<[^>]+>|\\t|)+|\\n)/gm,LANGUAGE_NOT_FOUND=\"Could not find the language '{}', did you forget to load/include a language module?\",PLAINTEXT_LANGUAGE={disableAutodetect:!0,name:\"Plain text\",contains:[]};let options={noHighlightRe:/^(no-?highlight)$/i,languageDetectRe:/\\blang(?:uage)?-([\\w-]+)\\b/i,classPrefix:\"hljs-\",tabReplace:null,useBR:!1,languages:null,__emitter:TokenTreeEmitter};function shouldNotHighlight(languageName){return options.noHighlightRe.test(languageName)}function highlight(codeOrlanguageName,optionsOrCode,ignoreIllegals,continuation){let code=\"\",languageName=\"\";\"object\"==typeof optionsOrCode?(code=codeOrlanguageName,ignoreIllegals=optionsOrCode.ignoreIllegals,languageName=optionsOrCode.language,continuation=void 0):(deprecated(\"10.7.0\",\"highlight(lang, code, ...args) has been deprecated.\"),deprecated(\"10.7.0\",\"Please use highlight(code, options) instead.\\nhttps://github.com/highlightjs/highlight.js/issues/2277\"),languageName=codeOrlanguageName,code=optionsOrCode);const context={code:code,language:languageName};fire(\"before:highlight\",context);const result=context.result?context.result:_highlight(context.language,context.code,ignoreIllegals,continuation);return result.code=context.code,fire(\"after:highlight\",result),result}function _highlight(languageName,codeToHighlight,ignoreIllegals,continuation){function keywordData(mode,match){const matchText=language.case_insensitive?match[0].toLowerCase():match[0];return Object.prototype.hasOwnProperty.call(mode.keywords,matchText)&&mode.keywords[matchText]}function processBuffer(){null!=top.subLanguage?function(){if(\"\"===modeBuffer)return;let result=null;if(\"string\"==typeof top.subLanguage){if(!languages[top.subLanguage])return void emitter.addText(modeBuffer);result=_highlight(top.subLanguage,modeBuffer,!0,continuations[top.subLanguage]),continuations[top.subLanguage]=result.top}else result=highlightAuto(modeBuffer,top.subLanguage.length?top.subLanguage:null);top.relevance>0&&(relevance+=result.relevance),emitter.addSublanguage(result.emitter,result.language)}():function(){if(!top.keywords)return void emitter.addText(modeBuffer);let lastIndex=0;top.keywordPatternRe.lastIndex=0;let match=top.keywordPatternRe.exec(modeBuffer),buf=\"\";for(;match;){buf+=modeBuffer.substring(lastIndex,match.index);const data=keywordData(top,match);if(data){const[kind,keywordRelevance]=data;emitter.addText(buf),buf=\"\",relevance+=keywordRelevance,kind.startsWith(\"_\")?buf+=match[0]:emitter.addKeyword(match[0],language.classNameAliases[kind]||kind)}else buf+=match[0];lastIndex=top.keywordPatternRe.lastIndex,match=top.keywordPatternRe.exec(modeBuffer)}buf+=modeBuffer.substr(lastIndex),emitter.addText(buf)}(),modeBuffer=\"\"}function startNewMode(mode){return mode.className&&emitter.openNode(language.classNameAliases[mode.className]||mode.className),top=Object.create(mode,{parent:{value:top}}),top}function endOfMode(mode,match,matchPlusRemainder){let matched=function(re,lexeme){const match=re&&re.exec(lexeme);return match&&0===match.index}(mode.endRe,matchPlusRemainder);if(matched){if(mode[\"on:end\"]){const resp=new Response(mode);mode[\"on:end\"](match,resp),resp.isMatchIgnored&&(matched=!1)}if(matched){for(;mode.endsParent&&mode.parent;)mode=mode.parent;return mode}}if(mode.endsWithParent)return endOfMode(mode.parent,match,matchPlusRemainder)}function doIgnore(lexeme){return 0===top.matcher.regexIndex?(modeBuffer+=lexeme[0],1):(resumeScanAtSamePosition=!0,0)}function doEndMatch(match){const lexeme=match[0],matchPlusRemainder=codeToHighlight.substr(match.index),endMode=endOfMode(top,match,matchPlusRemainder);if(!endMode)return NO_MATCH;const origin=top;origin.skip?modeBuffer+=lexeme:(origin.returnEnd||origin.excludeEnd||(modeBuffer+=lexeme),processBuffer(),origin.excludeEnd&&(modeBuffer=lexeme));do{top.className&&emitter.closeNode(),top.skip||top.subLanguage||(relevance+=top.relevance),top=top.parent}while(top!==endMode.parent);return endMode.starts&&(endMode.endSameAsBegin&&(endMode.starts.endRe=endMode.endRe),startNewMode(endMode.starts)),origin.returnEnd?0:lexeme.length}let lastMatch={};function processLexeme(textBeforeMatch,match){const lexeme=match&&match[0];if(modeBuffer+=textBeforeMatch,null==lexeme)return processBuffer(),0;if(\"begin\"===lastMatch.type&&\"end\"===match.type&&lastMatch.index===match.index&&\"\"===lexeme){if(modeBuffer+=codeToHighlight.slice(match.index,match.index+1),!SAFE_MODE){const err=new Error(\"0 width match regex\");throw err.languageName=languageName,err.badRule=lastMatch.rule,err}return 1}if(lastMatch=match,\"begin\"===match.type)return function(match){const lexeme=match[0],newMode=match.rule,resp=new Response(newMode),beforeCallbacks=[newMode.__beforeBegin,newMode[\"on:begin\"]];for(const cb of beforeCallbacks)if(cb&&(cb(match,resp),resp.isMatchIgnored))return doIgnore(lexeme);return newMode&&newMode.endSameAsBegin&&(newMode.endRe=new RegExp(lexeme.replace(/[-/\\\\^$*+?.()|[\\]{}]/g,\"\\\\$&\"),\"m\")),newMode.skip?modeBuffer+=lexeme:(newMode.excludeBegin&&(modeBuffer+=lexeme),processBuffer(),newMode.returnBegin||newMode.excludeBegin||(modeBuffer=lexeme)),startNewMode(newMode),newMode.returnBegin?0:lexeme.length}(match);if(\"illegal\"===match.type&&!ignoreIllegals){const err=new Error('Illegal lexeme \"'+lexeme+'\" for mode \"'+(top.className||\"<unnamed>\")+'\"');throw err.mode=top,err}if(\"end\"===match.type){const processed=doEndMatch(match);if(processed!==NO_MATCH)return processed}if(\"illegal\"===match.type&&\"\"===lexeme)return 1;if(iterations>1e5&&iterations>3*match.index)throw new Error(\"potential infinite loop, way more iterations than matches\");return modeBuffer+=lexeme,lexeme.length}const language=getLanguage(languageName);if(!language)throw error(LANGUAGE_NOT_FOUND.replace(\"{}\",languageName)),new Error('Unknown language: \"'+languageName+'\"');const md=compileLanguage(language,{plugins:plugins});let result=\"\",top=continuation||md;const continuations={},emitter=new options.__emitter(options);!function(){const list=[];for(let current=top;current!==language;current=current.parent)current.className&&list.unshift(current.className);list.forEach(item=>emitter.openNode(item))}();let modeBuffer=\"\",relevance=0,index=0,iterations=0,resumeScanAtSamePosition=!1;try{for(top.matcher.considerAll();;){iterations++,resumeScanAtSamePosition?resumeScanAtSamePosition=!1:top.matcher.considerAll(),top.matcher.lastIndex=index;const match=top.matcher.exec(codeToHighlight);if(!match)break;const processedCount=processLexeme(codeToHighlight.substring(index,match.index),match);index=match.index+processedCount}return processLexeme(codeToHighlight.substr(index)),emitter.closeAllNodes(),emitter.finalize(),result=emitter.toHTML(),{relevance:Math.floor(relevance),value:result,language:languageName,illegal:!1,emitter:emitter,top:top}}catch(err){if(err.message&&err.message.includes(\"Illegal\"))return{illegal:!0,illegalBy:{msg:err.message,context:codeToHighlight.slice(index-100,index+100),mode:err.mode},sofar:result,relevance:0,value:escape$1(codeToHighlight),emitter:emitter};if(SAFE_MODE)return{illegal:!1,relevance:0,value:escape$1(codeToHighlight),emitter:emitter,language:languageName,top:top,errorRaised:err};throw err}}function highlightAuto(code,languageSubset){languageSubset=languageSubset||options.languages||Object.keys(languages);const plaintext=function(code){const result={relevance:0,emitter:new options.__emitter(options),value:escape$1(code),illegal:!1,top:PLAINTEXT_LANGUAGE};return result.emitter.addText(code),result}(code),results=languageSubset.filter(getLanguage).filter(autoDetection).map(name=>_highlight(name,code,!1));results.unshift(plaintext);const sorted=results.sort((a,b)=>{if(a.relevance!==b.relevance)return b.relevance-a.relevance;if(a.language&&b.language){if(getLanguage(a.language).supersetOf===b.language)return 1;if(getLanguage(b.language).supersetOf===a.language)return-1}return 0}),[best,secondBest]=sorted,result=best;return result.second_best=secondBest,result}const brPlugin={\"before:highlightElement\":({el:el})=>{options.useBR&&(el.innerHTML=el.innerHTML.replace(/\\n/g,\"\").replace(/<br[ /]*>/g,\"\\n\"))},\"after:highlightElement\":({result:result})=>{options.useBR&&(result.value=result.value.replace(/\\n/g,\"<br>\"))}},TAB_REPLACE_RE=/^(<[^>]+>|\\t)+/gm,tabReplacePlugin={\"after:highlightElement\":({result:result})=>{options.tabReplace&&(result.value=result.value.replace(TAB_REPLACE_RE,m=>m.replace(/\\t/g,options.tabReplace)))}};function highlightElement(element){let node=null;const language=function(block){let classes=block.className+\" \";classes+=block.parentNode?block.parentNode.className:\"\";const match=options.languageDetectRe.exec(classes);if(match){const language=getLanguage(match[1]);return language||(warn(LANGUAGE_NOT_FOUND.replace(\"{}\",match[1])),warn(\"Falling back to no-highlight mode for this block.\",block)),language?match[1]:\"no-highlight\"}return classes.split(/\\s+/).find(_class=>shouldNotHighlight(_class)||getLanguage(_class))}(element);if(shouldNotHighlight(language))return;fire(\"before:highlightElement\",{el:element,language:language}),node=element;const text=node.textContent,result=language?highlight(text,{language:language,ignoreIllegals:!0}):highlightAuto(text);fire(\"after:highlightElement\",{el:element,result:result,text:text}),element.innerHTML=result.value,function(element,currentLang,resultLang){const language=currentLang?aliases[currentLang]:resultLang;element.classList.add(\"hljs\"),language&&element.classList.add(language)}(element,language,result.language),element.result={language:result.language,re:result.relevance,relavance:result.relevance},result.second_best&&(element.second_best={language:result.second_best.language,re:result.second_best.relevance,relavance:result.second_best.relevance})}const initHighlighting=()=>{initHighlighting.called||(initHighlighting.called=!0,deprecated(\"10.6.0\",\"initHighlighting() is deprecated.  Use highlightAll() instead.\"),document.querySelectorAll(\"pre code\").forEach(highlightElement))};let wantsHighlight=!1;function highlightAll(){\"loading\"!==document.readyState?document.querySelectorAll(\"pre code\").forEach(highlightElement):wantsHighlight=!0}function getLanguage(name){return name=(name||\"\").toLowerCase(),languages[name]||languages[aliases[name]]}function registerAliases(aliasList,{languageName:languageName}){\"string\"==typeof aliasList&&(aliasList=[aliasList]),aliasList.forEach(alias=>{aliases[alias.toLowerCase()]=languageName})}function autoDetection(name){const lang=getLanguage(name);return lang&&!lang.disableAutodetect}function fire(event,args){const cb=event;plugins.forEach(function(plugin){plugin[cb]&&plugin[cb](args)})}\"undefined\"!=typeof window&&window.addEventListener&&window.addEventListener(\"DOMContentLoaded\",function(){wantsHighlight&&highlightAll()},!1),Object.assign(hljs,{highlight:highlight,highlightAuto:highlightAuto,highlightAll:highlightAll,fixMarkup:function(arg){return deprecated(\"10.2.0\",\"fixMarkup will be removed entirely in v11.0\"),deprecated(\"10.2.0\",\"Please see https://github.com/highlightjs/highlight.js/issues/2534\"),html=arg,options.tabReplace||options.useBR?html.replace(fixMarkupRe,match=>\"\\n\"===match?options.useBR?\"<br>\":match:options.tabReplace?match.replace(/\\t/g,options.tabReplace):match):html;var html},highlightElement:highlightElement,highlightBlock:function(el){return deprecated(\"10.7.0\",\"highlightBlock will be removed entirely in v12.0\"),deprecated(\"10.7.0\",\"Please use highlightElement now.\"),highlightElement(el)},configure:function(userOptions){userOptions.useBR&&(deprecated(\"10.3.0\",\"'useBR' will be removed entirely in v11.0\"),deprecated(\"10.3.0\",\"Please see https://github.com/highlightjs/highlight.js/issues/2559\")),options=inherit$1(options,userOptions)},initHighlighting:initHighlighting,initHighlightingOnLoad:function(){deprecated(\"10.6.0\",\"initHighlightingOnLoad() is deprecated.  Use highlightAll() instead.\"),wantsHighlight=!0},registerLanguage:function(languageName,languageDefinition){let lang=null;try{lang=languageDefinition(hljs)}catch(error$1){if(error(\"Language definition for '{}' could not be registered.\".replace(\"{}\",languageName)),!SAFE_MODE)throw error$1;error(error$1),lang=PLAINTEXT_LANGUAGE}lang.name||(lang.name=languageName),languages[languageName]=lang,lang.rawDefinition=languageDefinition.bind(null,hljs),lang.aliases&&registerAliases(lang.aliases,{languageName:languageName})},unregisterLanguage:function(languageName){delete languages[languageName];for(const alias of Object.keys(aliases))aliases[alias]===languageName&&delete aliases[alias]},listLanguages:function(){return Object.keys(languages)},getLanguage:getLanguage,registerAliases:registerAliases,requireLanguage:function(name){deprecated(\"10.4.0\",\"requireLanguage will be removed entirely in v11.\"),deprecated(\"10.4.0\",\"Please see https://github.com/highlightjs/highlight.js/pull/2844\");const lang=getLanguage(name);if(lang)return lang;throw new Error(\"The '{}' language is required, but not loaded.\".replace(\"{}\",name))},autoDetection:autoDetection,inherit:inherit$1,addPlugin:function(plugin){!function(plugin){plugin[\"before:highlightBlock\"]&&!plugin[\"before:highlightElement\"]&&(plugin[\"before:highlightElement\"]=data=>{plugin[\"before:highlightBlock\"](Object.assign({block:data.el},data))}),plugin[\"after:highlightBlock\"]&&!plugin[\"after:highlightElement\"]&&(plugin[\"after:highlightElement\"]=data=>{plugin[\"after:highlightBlock\"](Object.assign({block:data.el},data))})}(plugin),plugins.push(plugin)},vuePlugin:BuildVuePlugin(hljs).VuePlugin}),hljs.debugMode=function(){SAFE_MODE=!1},hljs.safeMode=function(){SAFE_MODE=!0},hljs.versionString=\"10.7.3\";for(const key in MODES)\"object\"==typeof MODES[key]&&deepFreezeEs6(MODES[key]);return Object.assign(hljs,MODES),hljs.addPlugin(brPlugin),hljs.addPlugin(mergeHTMLPlugin),hljs.addPlugin(tabReplacePlugin),hljs}({});module.exports=highlight}}]);","name":"32-es2015.083adcae413afe87d71c.js","input":"(window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || []).push([[32],{\n\n/***/ \"ECCn\":\n/***/ (function(module, exports) {\n\nfunction deepFreeze(obj) {\r\n    if (obj instanceof Map) {\r\n        obj.clear = obj.delete = obj.set = function () {\r\n            throw new Error('map is read-only');\r\n        };\r\n    } else if (obj instanceof Set) {\r\n        obj.add = obj.clear = obj.delete = function () {\r\n            throw new Error('set is read-only');\r\n        };\r\n    }\r\n\r\n    // Freeze self\r\n    Object.freeze(obj);\r\n\r\n    Object.getOwnPropertyNames(obj).forEach(function (name) {\r\n        var prop = obj[name];\r\n\r\n        // Freeze prop if it is an object\r\n        if (typeof prop == 'object' && !Object.isFrozen(prop)) {\r\n            deepFreeze(prop);\r\n        }\r\n    });\r\n\r\n    return obj;\r\n}\r\n\r\nvar deepFreezeEs6 = deepFreeze;\r\nvar _default = deepFreeze;\r\ndeepFreezeEs6.default = _default;\r\n\r\n/** @implements CallbackResponse */\r\nclass Response {\r\n  /**\r\n   * @param {CompiledMode} mode\r\n   */\r\n  constructor(mode) {\r\n    // eslint-disable-next-line no-undefined\r\n    if (mode.data === undefined) mode.data = {};\r\n\r\n    this.data = mode.data;\r\n    this.isMatchIgnored = false;\r\n  }\r\n\r\n  ignoreMatch() {\r\n    this.isMatchIgnored = true;\r\n  }\r\n}\r\n\r\n/**\r\n * @param {string} value\r\n * @returns {string}\r\n */\r\nfunction escapeHTML(value) {\r\n  return value\r\n    .replace(/&/g, '&amp;')\r\n    .replace(/</g, '&lt;')\r\n    .replace(/>/g, '&gt;')\r\n    .replace(/\"/g, '&quot;')\r\n    .replace(/'/g, '&#x27;');\r\n}\r\n\r\n/**\r\n * performs a shallow merge of multiple objects into one\r\n *\r\n * @template T\r\n * @param {T} original\r\n * @param {Record<string,any>[]} objects\r\n * @returns {T} a single new object\r\n */\r\nfunction inherit(original, ...objects) {\r\n  /** @type Record<string,any> */\r\n  const result = Object.create(null);\r\n\r\n  for (const key in original) {\r\n    result[key] = original[key];\r\n  }\r\n  objects.forEach(function(obj) {\r\n    for (const key in obj) {\r\n      result[key] = obj[key];\r\n    }\r\n  });\r\n  return /** @type {T} */ (result);\r\n}\r\n\r\n/**\r\n * @typedef {object} Renderer\r\n * @property {(text: string) => void} addText\r\n * @property {(node: Node) => void} openNode\r\n * @property {(node: Node) => void} closeNode\r\n * @property {() => string} value\r\n */\r\n\r\n/** @typedef {{kind?: string, sublanguage?: boolean}} Node */\r\n/** @typedef {{walk: (r: Renderer) => void}} Tree */\r\n/** */\r\n\r\nconst SPAN_CLOSE = '</span>';\r\n\r\n/**\r\n * Determines if a node needs to be wrapped in <span>\r\n *\r\n * @param {Node} node */\r\nconst emitsWrappingTags = (node) => {\r\n  return !!node.kind;\r\n};\r\n\r\n/** @type {Renderer} */\r\nclass HTMLRenderer {\r\n  /**\r\n   * Creates a new HTMLRenderer\r\n   *\r\n   * @param {Tree} parseTree - the parse tree (must support `walk` API)\r\n   * @param {{classPrefix: string}} options\r\n   */\r\n  constructor(parseTree, options) {\r\n    this.buffer = \"\";\r\n    this.classPrefix = options.classPrefix;\r\n    parseTree.walk(this);\r\n  }\r\n\r\n  /**\r\n   * Adds texts to the output stream\r\n   *\r\n   * @param {string} text */\r\n  addText(text) {\r\n    this.buffer += escapeHTML(text);\r\n  }\r\n\r\n  /**\r\n   * Adds a node open to the output stream (if needed)\r\n   *\r\n   * @param {Node} node */\r\n  openNode(node) {\r\n    if (!emitsWrappingTags(node)) return;\r\n\r\n    let className = node.kind;\r\n    if (!node.sublanguage) {\r\n      className = `${this.classPrefix}${className}`;\r\n    }\r\n    this.span(className);\r\n  }\r\n\r\n  /**\r\n   * Adds a node close to the output stream (if needed)\r\n   *\r\n   * @param {Node} node */\r\n  closeNode(node) {\r\n    if (!emitsWrappingTags(node)) return;\r\n\r\n    this.buffer += SPAN_CLOSE;\r\n  }\r\n\r\n  /**\r\n   * returns the accumulated buffer\r\n  */\r\n  value() {\r\n    return this.buffer;\r\n  }\r\n\r\n  // helpers\r\n\r\n  /**\r\n   * Builds a span element\r\n   *\r\n   * @param {string} className */\r\n  span(className) {\r\n    this.buffer += `<span class=\"${className}\">`;\r\n  }\r\n}\r\n\r\n/** @typedef {{kind?: string, sublanguage?: boolean, children: Node[]} | string} Node */\r\n/** @typedef {{kind?: string, sublanguage?: boolean, children: Node[]} } DataNode */\r\n/**  */\r\n\r\nclass TokenTree {\r\n  constructor() {\r\n    /** @type DataNode */\r\n    this.rootNode = { children: [] };\r\n    this.stack = [this.rootNode];\r\n  }\r\n\r\n  get top() {\r\n    return this.stack[this.stack.length - 1];\r\n  }\r\n\r\n  get root() { return this.rootNode; }\r\n\r\n  /** @param {Node} node */\r\n  add(node) {\r\n    this.top.children.push(node);\r\n  }\r\n\r\n  /** @param {string} kind */\r\n  openNode(kind) {\r\n    /** @type Node */\r\n    const node = { kind, children: [] };\r\n    this.add(node);\r\n    this.stack.push(node);\r\n  }\r\n\r\n  closeNode() {\r\n    if (this.stack.length > 1) {\r\n      return this.stack.pop();\r\n    }\r\n    // eslint-disable-next-line no-undefined\r\n    return undefined;\r\n  }\r\n\r\n  closeAllNodes() {\r\n    while (this.closeNode());\r\n  }\r\n\r\n  toJSON() {\r\n    return JSON.stringify(this.rootNode, null, 4);\r\n  }\r\n\r\n  /**\r\n   * @typedef { import(\"./html_renderer\").Renderer } Renderer\r\n   * @param {Renderer} builder\r\n   */\r\n  walk(builder) {\r\n    // this does not\r\n    return this.constructor._walk(builder, this.rootNode);\r\n    // this works\r\n    // return TokenTree._walk(builder, this.rootNode);\r\n  }\r\n\r\n  /**\r\n   * @param {Renderer} builder\r\n   * @param {Node} node\r\n   */\r\n  static _walk(builder, node) {\r\n    if (typeof node === \"string\") {\r\n      builder.addText(node);\r\n    } else if (node.children) {\r\n      builder.openNode(node);\r\n      node.children.forEach((child) => this._walk(builder, child));\r\n      builder.closeNode(node);\r\n    }\r\n    return builder;\r\n  }\r\n\r\n  /**\r\n   * @param {Node} node\r\n   */\r\n  static _collapse(node) {\r\n    if (typeof node === \"string\") return;\r\n    if (!node.children) return;\r\n\r\n    if (node.children.every(el => typeof el === \"string\")) {\r\n      // node.text = node.children.join(\"\");\r\n      // delete node.children;\r\n      node.children = [node.children.join(\"\")];\r\n    } else {\r\n      node.children.forEach((child) => {\r\n        TokenTree._collapse(child);\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n  Currently this is all private API, but this is the minimal API necessary\r\n  that an Emitter must implement to fully support the parser.\r\n\r\n  Minimal interface:\r\n\r\n  - addKeyword(text, kind)\r\n  - addText(text)\r\n  - addSublanguage(emitter, subLanguageName)\r\n  - finalize()\r\n  - openNode(kind)\r\n  - closeNode()\r\n  - closeAllNodes()\r\n  - toHTML()\r\n\r\n*/\r\n\r\n/**\r\n * @implements {Emitter}\r\n */\r\nclass TokenTreeEmitter extends TokenTree {\r\n  /**\r\n   * @param {*} options\r\n   */\r\n  constructor(options) {\r\n    super();\r\n    this.options = options;\r\n  }\r\n\r\n  /**\r\n   * @param {string} text\r\n   * @param {string} kind\r\n   */\r\n  addKeyword(text, kind) {\r\n    if (text === \"\") { return; }\r\n\r\n    this.openNode(kind);\r\n    this.addText(text);\r\n    this.closeNode();\r\n  }\r\n\r\n  /**\r\n   * @param {string} text\r\n   */\r\n  addText(text) {\r\n    if (text === \"\") { return; }\r\n\r\n    this.add(text);\r\n  }\r\n\r\n  /**\r\n   * @param {Emitter & {root: DataNode}} emitter\r\n   * @param {string} name\r\n   */\r\n  addSublanguage(emitter, name) {\r\n    /** @type DataNode */\r\n    const node = emitter.root;\r\n    node.kind = name;\r\n    node.sublanguage = true;\r\n    this.add(node);\r\n  }\r\n\r\n  toHTML() {\r\n    const renderer = new HTMLRenderer(this, this.options);\r\n    return renderer.value();\r\n  }\r\n\r\n  finalize() {\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * @param {string} value\r\n * @returns {RegExp}\r\n * */\r\nfunction escape(value) {\r\n  return new RegExp(value.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&'), 'm');\r\n}\r\n\r\n/**\r\n * @param {RegExp | string } re\r\n * @returns {string}\r\n */\r\nfunction source(re) {\r\n  if (!re) return null;\r\n  if (typeof re === \"string\") return re;\r\n\r\n  return re.source;\r\n}\r\n\r\n/**\r\n * @param {...(RegExp | string) } args\r\n * @returns {string}\r\n */\r\nfunction concat(...args) {\r\n  const joined = args.map((x) => source(x)).join(\"\");\r\n  return joined;\r\n}\r\n\r\n/**\r\n * Any of the passed expresssions may match\r\n *\r\n * Creates a huge this | this | that | that match\r\n * @param {(RegExp | string)[] } args\r\n * @returns {string}\r\n */\r\nfunction either(...args) {\r\n  const joined = '(' + args.map((x) => source(x)).join(\"|\") + \")\";\r\n  return joined;\r\n}\r\n\r\n/**\r\n * @param {RegExp} re\r\n * @returns {number}\r\n */\r\nfunction countMatchGroups(re) {\r\n  return (new RegExp(re.toString() + '|')).exec('').length - 1;\r\n}\r\n\r\n/**\r\n * Does lexeme start with a regular expression match at the beginning\r\n * @param {RegExp} re\r\n * @param {string} lexeme\r\n */\r\nfunction startsWith(re, lexeme) {\r\n  const match = re && re.exec(lexeme);\r\n  return match && match.index === 0;\r\n}\r\n\r\n// BACKREF_RE matches an open parenthesis or backreference. To avoid\r\n// an incorrect parse, it additionally matches the following:\r\n// - [...] elements, where the meaning of parentheses and escapes change\r\n// - other escape sequences, so we do not misparse escape sequences as\r\n//   interesting elements\r\n// - non-matching or lookahead parentheses, which do not capture. These\r\n//   follow the '(' with a '?'.\r\nconst BACKREF_RE = /\\[(?:[^\\\\\\]]|\\\\.)*\\]|\\(\\??|\\\\([1-9][0-9]*)|\\\\./;\r\n\r\n// join logically computes regexps.join(separator), but fixes the\r\n// backreferences so they continue to match.\r\n// it also places each individual regular expression into it's own\r\n// match group, keeping track of the sequencing of those match groups\r\n// is currently an exercise for the caller. :-)\r\n/**\r\n * @param {(string | RegExp)[]} regexps\r\n * @param {string} separator\r\n * @returns {string}\r\n */\r\nfunction join(regexps, separator = \"|\") {\r\n  let numCaptures = 0;\r\n\r\n  return regexps.map((regex) => {\r\n    numCaptures += 1;\r\n    const offset = numCaptures;\r\n    let re = source(regex);\r\n    let out = '';\r\n\r\n    while (re.length > 0) {\r\n      const match = BACKREF_RE.exec(re);\r\n      if (!match) {\r\n        out += re;\r\n        break;\r\n      }\r\n      out += re.substring(0, match.index);\r\n      re = re.substring(match.index + match[0].length);\r\n      if (match[0][0] === '\\\\' && match[1]) {\r\n        // Adjust the backreference.\r\n        out += '\\\\' + String(Number(match[1]) + offset);\r\n      } else {\r\n        out += match[0];\r\n        if (match[0] === '(') {\r\n          numCaptures++;\r\n        }\r\n      }\r\n    }\r\n    return out;\r\n  }).map(re => `(${re})`).join(separator);\r\n}\r\n\r\n// Common regexps\r\nconst MATCH_NOTHING_RE = /\\b\\B/;\r\nconst IDENT_RE = '[a-zA-Z]\\\\w*';\r\nconst UNDERSCORE_IDENT_RE = '[a-zA-Z_]\\\\w*';\r\nconst NUMBER_RE = '\\\\b\\\\d+(\\\\.\\\\d+)?';\r\nconst C_NUMBER_RE = '(-?)(\\\\b0[xX][a-fA-F0-9]+|(\\\\b\\\\d+(\\\\.\\\\d*)?|\\\\.\\\\d+)([eE][-+]?\\\\d+)?)'; // 0x..., 0..., decimal, float\r\nconst BINARY_NUMBER_RE = '\\\\b(0b[01]+)'; // 0b...\r\nconst RE_STARTERS_RE = '!|!=|!==|%|%=|&|&&|&=|\\\\*|\\\\*=|\\\\+|\\\\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\\\\?|\\\\[|\\\\{|\\\\(|\\\\^|\\\\^=|\\\\||\\\\|=|\\\\|\\\\||~';\r\n\r\n/**\r\n* @param { Partial<Mode> & {binary?: string | RegExp} } opts\r\n*/\r\nconst SHEBANG = (opts = {}) => {\r\n  const beginShebang = /^#![ ]*\\//;\r\n  if (opts.binary) {\r\n    opts.begin = concat(\r\n      beginShebang,\r\n      /.*\\b/,\r\n      opts.binary,\r\n      /\\b.*/);\r\n  }\r\n  return inherit({\r\n    className: 'meta',\r\n    begin: beginShebang,\r\n    end: /$/,\r\n    relevance: 0,\r\n    /** @type {ModeCallback} */\r\n    \"on:begin\": (m, resp) => {\r\n      if (m.index !== 0) resp.ignoreMatch();\r\n    }\r\n  }, opts);\r\n};\r\n\r\n// Common modes\r\nconst BACKSLASH_ESCAPE = {\r\n  begin: '\\\\\\\\[\\\\s\\\\S]', relevance: 0\r\n};\r\nconst APOS_STRING_MODE = {\r\n  className: 'string',\r\n  begin: '\\'',\r\n  end: '\\'',\r\n  illegal: '\\\\n',\r\n  contains: [BACKSLASH_ESCAPE]\r\n};\r\nconst QUOTE_STRING_MODE = {\r\n  className: 'string',\r\n  begin: '\"',\r\n  end: '\"',\r\n  illegal: '\\\\n',\r\n  contains: [BACKSLASH_ESCAPE]\r\n};\r\nconst PHRASAL_WORDS_MODE = {\r\n  begin: /\\b(a|an|the|are|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|they|like|more)\\b/\r\n};\r\n/**\r\n * Creates a comment mode\r\n *\r\n * @param {string | RegExp} begin\r\n * @param {string | RegExp} end\r\n * @param {Mode | {}} [modeOptions]\r\n * @returns {Partial<Mode>}\r\n */\r\nconst COMMENT = function(begin, end, modeOptions = {}) {\r\n  const mode = inherit(\r\n    {\r\n      className: 'comment',\r\n      begin,\r\n      end,\r\n      contains: []\r\n    },\r\n    modeOptions\r\n  );\r\n  mode.contains.push(PHRASAL_WORDS_MODE);\r\n  mode.contains.push({\r\n    className: 'doctag',\r\n    begin: '(?:TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):',\r\n    relevance: 0\r\n  });\r\n  return mode;\r\n};\r\nconst C_LINE_COMMENT_MODE = COMMENT('//', '$');\r\nconst C_BLOCK_COMMENT_MODE = COMMENT('/\\\\*', '\\\\*/');\r\nconst HASH_COMMENT_MODE = COMMENT('#', '$');\r\nconst NUMBER_MODE = {\r\n  className: 'number',\r\n  begin: NUMBER_RE,\r\n  relevance: 0\r\n};\r\nconst C_NUMBER_MODE = {\r\n  className: 'number',\r\n  begin: C_NUMBER_RE,\r\n  relevance: 0\r\n};\r\nconst BINARY_NUMBER_MODE = {\r\n  className: 'number',\r\n  begin: BINARY_NUMBER_RE,\r\n  relevance: 0\r\n};\r\nconst CSS_NUMBER_MODE = {\r\n  className: 'number',\r\n  begin: NUMBER_RE + '(' +\r\n    '%|em|ex|ch|rem' +\r\n    '|vw|vh|vmin|vmax' +\r\n    '|cm|mm|in|pt|pc|px' +\r\n    '|deg|grad|rad|turn' +\r\n    '|s|ms' +\r\n    '|Hz|kHz' +\r\n    '|dpi|dpcm|dppx' +\r\n    ')?',\r\n  relevance: 0\r\n};\r\nconst REGEXP_MODE = {\r\n  // this outer rule makes sure we actually have a WHOLE regex and not simply\r\n  // an expression such as:\r\n  //\r\n  //     3 / something\r\n  //\r\n  // (which will then blow up when regex's `illegal` sees the newline)\r\n  begin: /(?=\\/[^/\\n]*\\/)/,\r\n  contains: [{\r\n    className: 'regexp',\r\n    begin: /\\//,\r\n    end: /\\/[gimuy]*/,\r\n    illegal: /\\n/,\r\n    contains: [\r\n      BACKSLASH_ESCAPE,\r\n      {\r\n        begin: /\\[/,\r\n        end: /\\]/,\r\n        relevance: 0,\r\n        contains: [BACKSLASH_ESCAPE]\r\n      }\r\n    ]\r\n  }]\r\n};\r\nconst TITLE_MODE = {\r\n  className: 'title',\r\n  begin: IDENT_RE,\r\n  relevance: 0\r\n};\r\nconst UNDERSCORE_TITLE_MODE = {\r\n  className: 'title',\r\n  begin: UNDERSCORE_IDENT_RE,\r\n  relevance: 0\r\n};\r\nconst METHOD_GUARD = {\r\n  // excludes method names from keyword processing\r\n  begin: '\\\\.\\\\s*' + UNDERSCORE_IDENT_RE,\r\n  relevance: 0\r\n};\r\n\r\n/**\r\n * Adds end same as begin mechanics to a mode\r\n *\r\n * Your mode must include at least a single () match group as that first match\r\n * group is what is used for comparison\r\n * @param {Partial<Mode>} mode\r\n */\r\nconst END_SAME_AS_BEGIN = function(mode) {\r\n  return Object.assign(mode,\r\n    {\r\n      /** @type {ModeCallback} */\r\n      'on:begin': (m, resp) => { resp.data._beginMatch = m[1]; },\r\n      /** @type {ModeCallback} */\r\n      'on:end': (m, resp) => { if (resp.data._beginMatch !== m[1]) resp.ignoreMatch(); }\r\n    });\r\n};\r\n\r\nvar MODES = /*#__PURE__*/Object.freeze({\r\n    __proto__: null,\r\n    MATCH_NOTHING_RE: MATCH_NOTHING_RE,\r\n    IDENT_RE: IDENT_RE,\r\n    UNDERSCORE_IDENT_RE: UNDERSCORE_IDENT_RE,\r\n    NUMBER_RE: NUMBER_RE,\r\n    C_NUMBER_RE: C_NUMBER_RE,\r\n    BINARY_NUMBER_RE: BINARY_NUMBER_RE,\r\n    RE_STARTERS_RE: RE_STARTERS_RE,\r\n    SHEBANG: SHEBANG,\r\n    BACKSLASH_ESCAPE: BACKSLASH_ESCAPE,\r\n    APOS_STRING_MODE: APOS_STRING_MODE,\r\n    QUOTE_STRING_MODE: QUOTE_STRING_MODE,\r\n    PHRASAL_WORDS_MODE: PHRASAL_WORDS_MODE,\r\n    COMMENT: COMMENT,\r\n    C_LINE_COMMENT_MODE: C_LINE_COMMENT_MODE,\r\n    C_BLOCK_COMMENT_MODE: C_BLOCK_COMMENT_MODE,\r\n    HASH_COMMENT_MODE: HASH_COMMENT_MODE,\r\n    NUMBER_MODE: NUMBER_MODE,\r\n    C_NUMBER_MODE: C_NUMBER_MODE,\r\n    BINARY_NUMBER_MODE: BINARY_NUMBER_MODE,\r\n    CSS_NUMBER_MODE: CSS_NUMBER_MODE,\r\n    REGEXP_MODE: REGEXP_MODE,\r\n    TITLE_MODE: TITLE_MODE,\r\n    UNDERSCORE_TITLE_MODE: UNDERSCORE_TITLE_MODE,\r\n    METHOD_GUARD: METHOD_GUARD,\r\n    END_SAME_AS_BEGIN: END_SAME_AS_BEGIN\r\n});\r\n\r\n// Grammar extensions / plugins\r\n// See: https://github.com/highlightjs/highlight.js/issues/2833\r\n\r\n// Grammar extensions allow \"syntactic sugar\" to be added to the grammar modes\r\n// without requiring any underlying changes to the compiler internals.\r\n\r\n// `compileMatch` being the perfect small example of now allowing a grammar\r\n// author to write `match` when they desire to match a single expression rather\r\n// than being forced to use `begin`.  The extension then just moves `match` into\r\n// `begin` when it runs.  Ie, no features have been added, but we've just made\r\n// the experience of writing (and reading grammars) a little bit nicer.\r\n\r\n// ------\r\n\r\n// TODO: We need negative look-behind support to do this properly\r\n/**\r\n * Skip a match if it has a preceding dot\r\n *\r\n * This is used for `beginKeywords` to prevent matching expressions such as\r\n * `bob.keyword.do()`. The mode compiler automatically wires this up as a\r\n * special _internal_ 'on:begin' callback for modes with `beginKeywords`\r\n * @param {RegExpMatchArray} match\r\n * @param {CallbackResponse} response\r\n */\r\nfunction skipIfhasPrecedingDot(match, response) {\r\n  const before = match.input[match.index - 1];\r\n  if (before === \".\") {\r\n    response.ignoreMatch();\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * `beginKeywords` syntactic sugar\r\n * @type {CompilerExt}\r\n */\r\nfunction beginKeywords(mode, parent) {\r\n  if (!parent) return;\r\n  if (!mode.beginKeywords) return;\r\n\r\n  // for languages with keywords that include non-word characters checking for\r\n  // a word boundary is not sufficient, so instead we check for a word boundary\r\n  // or whitespace - this does no harm in any case since our keyword engine\r\n  // doesn't allow spaces in keywords anyways and we still check for the boundary\r\n  // first\r\n  mode.begin = '\\\\b(' + mode.beginKeywords.split(' ').join('|') + ')(?!\\\\.)(?=\\\\b|\\\\s)';\r\n  mode.__beforeBegin = skipIfhasPrecedingDot;\r\n  mode.keywords = mode.keywords || mode.beginKeywords;\r\n  delete mode.beginKeywords;\r\n\r\n  // prevents double relevance, the keywords themselves provide\r\n  // relevance, the mode doesn't need to double it\r\n  // eslint-disable-next-line no-undefined\r\n  if (mode.relevance === undefined) mode.relevance = 0;\r\n}\r\n\r\n/**\r\n * Allow `illegal` to contain an array of illegal values\r\n * @type {CompilerExt}\r\n */\r\nfunction compileIllegal(mode, _parent) {\r\n  if (!Array.isArray(mode.illegal)) return;\r\n\r\n  mode.illegal = either(...mode.illegal);\r\n}\r\n\r\n/**\r\n * `match` to match a single expression for readability\r\n * @type {CompilerExt}\r\n */\r\nfunction compileMatch(mode, _parent) {\r\n  if (!mode.match) return;\r\n  if (mode.begin || mode.end) throw new Error(\"begin & end are not supported with match\");\r\n\r\n  mode.begin = mode.match;\r\n  delete mode.match;\r\n}\r\n\r\n/**\r\n * provides the default 1 relevance to all modes\r\n * @type {CompilerExt}\r\n */\r\nfunction compileRelevance(mode, _parent) {\r\n  // eslint-disable-next-line no-undefined\r\n  if (mode.relevance === undefined) mode.relevance = 1;\r\n}\r\n\r\n// keywords that should have no default relevance value\r\nconst COMMON_KEYWORDS = [\r\n  'of',\r\n  'and',\r\n  'for',\r\n  'in',\r\n  'not',\r\n  'or',\r\n  'if',\r\n  'then',\r\n  'parent', // common variable name\r\n  'list', // common variable name\r\n  'value' // common variable name\r\n];\r\n\r\nconst DEFAULT_KEYWORD_CLASSNAME = \"keyword\";\r\n\r\n/**\r\n * Given raw keywords from a language definition, compile them.\r\n *\r\n * @param {string | Record<string,string|string[]> | Array<string>} rawKeywords\r\n * @param {boolean} caseInsensitive\r\n */\r\nfunction compileKeywords(rawKeywords, caseInsensitive, className = DEFAULT_KEYWORD_CLASSNAME) {\r\n  /** @type KeywordDict */\r\n  const compiledKeywords = {};\r\n\r\n  // input can be a string of keywords, an array of keywords, or a object with\r\n  // named keys representing className (which can then point to a string or array)\r\n  if (typeof rawKeywords === 'string') {\r\n    compileList(className, rawKeywords.split(\" \"));\r\n  } else if (Array.isArray(rawKeywords)) {\r\n    compileList(className, rawKeywords);\r\n  } else {\r\n    Object.keys(rawKeywords).forEach(function(className) {\r\n      // collapse all our objects back into the parent object\r\n      Object.assign(\r\n        compiledKeywords,\r\n        compileKeywords(rawKeywords[className], caseInsensitive, className)\r\n      );\r\n    });\r\n  }\r\n  return compiledKeywords;\r\n\r\n  // ---\r\n\r\n  /**\r\n   * Compiles an individual list of keywords\r\n   *\r\n   * Ex: \"for if when while|5\"\r\n   *\r\n   * @param {string} className\r\n   * @param {Array<string>} keywordList\r\n   */\r\n  function compileList(className, keywordList) {\r\n    if (caseInsensitive) {\r\n      keywordList = keywordList.map(x => x.toLowerCase());\r\n    }\r\n    keywordList.forEach(function(keyword) {\r\n      const pair = keyword.split('|');\r\n      compiledKeywords[pair[0]] = [className, scoreForKeyword(pair[0], pair[1])];\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * Returns the proper score for a given keyword\r\n *\r\n * Also takes into account comment keywords, which will be scored 0 UNLESS\r\n * another score has been manually assigned.\r\n * @param {string} keyword\r\n * @param {string} [providedScore]\r\n */\r\nfunction scoreForKeyword(keyword, providedScore) {\r\n  // manual scores always win over common keywords\r\n  // so you can force a score of 1 if you really insist\r\n  if (providedScore) {\r\n    return Number(providedScore);\r\n  }\r\n\r\n  return commonKeyword(keyword) ? 0 : 1;\r\n}\r\n\r\n/**\r\n * Determines if a given keyword is common or not\r\n *\r\n * @param {string} keyword */\r\nfunction commonKeyword(keyword) {\r\n  return COMMON_KEYWORDS.includes(keyword.toLowerCase());\r\n}\r\n\r\n// compilation\r\n\r\n/**\r\n * Compiles a language definition result\r\n *\r\n * Given the raw result of a language definition (Language), compiles this so\r\n * that it is ready for highlighting code.\r\n * @param {Language} language\r\n * @param {{plugins: HLJSPlugin[]}} opts\r\n * @returns {CompiledLanguage}\r\n */\r\nfunction compileLanguage(language, { plugins }) {\r\n  /**\r\n   * Builds a regex with the case sensativility of the current language\r\n   *\r\n   * @param {RegExp | string} value\r\n   * @param {boolean} [global]\r\n   */\r\n  function langRe(value, global) {\r\n    return new RegExp(\r\n      source(value),\r\n      'm' + (language.case_insensitive ? 'i' : '') + (global ? 'g' : '')\r\n    );\r\n  }\r\n\r\n  /**\r\n    Stores multiple regular expressions and allows you to quickly search for\r\n    them all in a string simultaneously - returning the first match.  It does\r\n    this by creating a huge (a|b|c) regex - each individual item wrapped with ()\r\n    and joined by `|` - using match groups to track position.  When a match is\r\n    found checking which position in the array has content allows us to figure\r\n    out which of the original regexes / match groups triggered the match.\r\n\r\n    The match object itself (the result of `Regex.exec`) is returned but also\r\n    enhanced by merging in any meta-data that was registered with the regex.\r\n    This is how we keep track of which mode matched, and what type of rule\r\n    (`illegal`, `begin`, end, etc).\r\n  */\r\n  class MultiRegex {\r\n    constructor() {\r\n      this.matchIndexes = {};\r\n      // @ts-ignore\r\n      this.regexes = [];\r\n      this.matchAt = 1;\r\n      this.position = 0;\r\n    }\r\n\r\n    // @ts-ignore\r\n    addRule(re, opts) {\r\n      opts.position = this.position++;\r\n      // @ts-ignore\r\n      this.matchIndexes[this.matchAt] = opts;\r\n      this.regexes.push([opts, re]);\r\n      this.matchAt += countMatchGroups(re) + 1;\r\n    }\r\n\r\n    compile() {\r\n      if (this.regexes.length === 0) {\r\n        // avoids the need to check length every time exec is called\r\n        // @ts-ignore\r\n        this.exec = () => null;\r\n      }\r\n      const terminators = this.regexes.map(el => el[1]);\r\n      this.matcherRe = langRe(join(terminators), true);\r\n      this.lastIndex = 0;\r\n    }\r\n\r\n    /** @param {string} s */\r\n    exec(s) {\r\n      this.matcherRe.lastIndex = this.lastIndex;\r\n      const match = this.matcherRe.exec(s);\r\n      if (!match) { return null; }\r\n\r\n      // eslint-disable-next-line no-undefined\r\n      const i = match.findIndex((el, i) => i > 0 && el !== undefined);\r\n      // @ts-ignore\r\n      const matchData = this.matchIndexes[i];\r\n      // trim off any earlier non-relevant match groups (ie, the other regex\r\n      // match groups that make up the multi-matcher)\r\n      match.splice(0, i);\r\n\r\n      return Object.assign(match, matchData);\r\n    }\r\n  }\r\n\r\n  /*\r\n    Created to solve the key deficiently with MultiRegex - there is no way to\r\n    test for multiple matches at a single location.  Why would we need to do\r\n    that?  In the future a more dynamic engine will allow certain matches to be\r\n    ignored.  An example: if we matched say the 3rd regex in a large group but\r\n    decided to ignore it - we'd need to started testing again at the 4th\r\n    regex... but MultiRegex itself gives us no real way to do that.\r\n\r\n    So what this class creates MultiRegexs on the fly for whatever search\r\n    position they are needed.\r\n\r\n    NOTE: These additional MultiRegex objects are created dynamically.  For most\r\n    grammars most of the time we will never actually need anything more than the\r\n    first MultiRegex - so this shouldn't have too much overhead.\r\n\r\n    Say this is our search group, and we match regex3, but wish to ignore it.\r\n\r\n      regex1 | regex2 | regex3 | regex4 | regex5    ' ie, startAt = 0\r\n\r\n    What we need is a new MultiRegex that only includes the remaining\r\n    possibilities:\r\n\r\n      regex4 | regex5                               ' ie, startAt = 3\r\n\r\n    This class wraps all that complexity up in a simple API... `startAt` decides\r\n    where in the array of expressions to start doing the matching. It\r\n    auto-increments, so if a match is found at position 2, then startAt will be\r\n    set to 3.  If the end is reached startAt will return to 0.\r\n\r\n    MOST of the time the parser will be setting startAt manually to 0.\r\n  */\r\n  class ResumableMultiRegex {\r\n    constructor() {\r\n      // @ts-ignore\r\n      this.rules = [];\r\n      // @ts-ignore\r\n      this.multiRegexes = [];\r\n      this.count = 0;\r\n\r\n      this.lastIndex = 0;\r\n      this.regexIndex = 0;\r\n    }\r\n\r\n    // @ts-ignore\r\n    getMatcher(index) {\r\n      if (this.multiRegexes[index]) return this.multiRegexes[index];\r\n\r\n      const matcher = new MultiRegex();\r\n      this.rules.slice(index).forEach(([re, opts]) => matcher.addRule(re, opts));\r\n      matcher.compile();\r\n      this.multiRegexes[index] = matcher;\r\n      return matcher;\r\n    }\r\n\r\n    resumingScanAtSamePosition() {\r\n      return this.regexIndex !== 0;\r\n    }\r\n\r\n    considerAll() {\r\n      this.regexIndex = 0;\r\n    }\r\n\r\n    // @ts-ignore\r\n    addRule(re, opts) {\r\n      this.rules.push([re, opts]);\r\n      if (opts.type === \"begin\") this.count++;\r\n    }\r\n\r\n    /** @param {string} s */\r\n    exec(s) {\r\n      const m = this.getMatcher(this.regexIndex);\r\n      m.lastIndex = this.lastIndex;\r\n      let result = m.exec(s);\r\n\r\n      // The following is because we have no easy way to say \"resume scanning at the\r\n      // existing position but also skip the current rule ONLY\". What happens is\r\n      // all prior rules are also skipped which can result in matching the wrong\r\n      // thing. Example of matching \"booger\":\r\n\r\n      // our matcher is [string, \"booger\", number]\r\n      //\r\n      // ....booger....\r\n\r\n      // if \"booger\" is ignored then we'd really need a regex to scan from the\r\n      // SAME position for only: [string, number] but ignoring \"booger\" (if it\r\n      // was the first match), a simple resume would scan ahead who knows how\r\n      // far looking only for \"number\", ignoring potential string matches (or\r\n      // future \"booger\" matches that might be valid.)\r\n\r\n      // So what we do: We execute two matchers, one resuming at the same\r\n      // position, but the second full matcher starting at the position after:\r\n\r\n      //     /--- resume first regex match here (for [number])\r\n      //     |/---- full match here for [string, \"booger\", number]\r\n      //     vv\r\n      // ....booger....\r\n\r\n      // Which ever results in a match first is then used. So this 3-4 step\r\n      // process essentially allows us to say \"match at this position, excluding\r\n      // a prior rule that was ignored\".\r\n      //\r\n      // 1. Match \"booger\" first, ignore. Also proves that [string] does non match.\r\n      // 2. Resume matching for [number]\r\n      // 3. Match at index + 1 for [string, \"booger\", number]\r\n      // 4. If #2 and #3 result in matches, which came first?\r\n      if (this.resumingScanAtSamePosition()) {\r\n        if (result && result.index === this.lastIndex) ; else { // use the second matcher result\r\n          const m2 = this.getMatcher(0);\r\n          m2.lastIndex = this.lastIndex + 1;\r\n          result = m2.exec(s);\r\n        }\r\n      }\r\n\r\n      if (result) {\r\n        this.regexIndex += result.position + 1;\r\n        if (this.regexIndex === this.count) {\r\n          // wrap-around to considering all matches again\r\n          this.considerAll();\r\n        }\r\n      }\r\n\r\n      return result;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Given a mode, builds a huge ResumableMultiRegex that can be used to walk\r\n   * the content and find matches.\r\n   *\r\n   * @param {CompiledMode} mode\r\n   * @returns {ResumableMultiRegex}\r\n   */\r\n  function buildModeRegex(mode) {\r\n    const mm = new ResumableMultiRegex();\r\n\r\n    mode.contains.forEach(term => mm.addRule(term.begin, { rule: term, type: \"begin\" }));\r\n\r\n    if (mode.terminatorEnd) {\r\n      mm.addRule(mode.terminatorEnd, { type: \"end\" });\r\n    }\r\n    if (mode.illegal) {\r\n      mm.addRule(mode.illegal, { type: \"illegal\" });\r\n    }\r\n\r\n    return mm;\r\n  }\r\n\r\n  /** skip vs abort vs ignore\r\n   *\r\n   * @skip   - The mode is still entered and exited normally (and contains rules apply),\r\n   *           but all content is held and added to the parent buffer rather than being\r\n   *           output when the mode ends.  Mostly used with `sublanguage` to build up\r\n   *           a single large buffer than can be parsed by sublanguage.\r\n   *\r\n   *             - The mode begin ands ends normally.\r\n   *             - Content matched is added to the parent mode buffer.\r\n   *             - The parser cursor is moved forward normally.\r\n   *\r\n   * @abort  - A hack placeholder until we have ignore.  Aborts the mode (as if it\r\n   *           never matched) but DOES NOT continue to match subsequent `contains`\r\n   *           modes.  Abort is bad/suboptimal because it can result in modes\r\n   *           farther down not getting applied because an earlier rule eats the\r\n   *           content but then aborts.\r\n   *\r\n   *             - The mode does not begin.\r\n   *             - Content matched by `begin` is added to the mode buffer.\r\n   *             - The parser cursor is moved forward accordingly.\r\n   *\r\n   * @ignore - Ignores the mode (as if it never matched) and continues to match any\r\n   *           subsequent `contains` modes.  Ignore isn't technically possible with\r\n   *           the current parser implementation.\r\n   *\r\n   *             - The mode does not begin.\r\n   *             - Content matched by `begin` is ignored.\r\n   *             - The parser cursor is not moved forward.\r\n   */\r\n\r\n  /**\r\n   * Compiles an individual mode\r\n   *\r\n   * This can raise an error if the mode contains certain detectable known logic\r\n   * issues.\r\n   * @param {Mode} mode\r\n   * @param {CompiledMode | null} [parent]\r\n   * @returns {CompiledMode | never}\r\n   */\r\n  function compileMode(mode, parent) {\r\n    const cmode = /** @type CompiledMode */ (mode);\r\n    if (mode.isCompiled) return cmode;\r\n\r\n    [\r\n      // do this early so compiler extensions generally don't have to worry about\r\n      // the distinction between match/begin\r\n      compileMatch\r\n    ].forEach(ext => ext(mode, parent));\r\n\r\n    language.compilerExtensions.forEach(ext => ext(mode, parent));\r\n\r\n    // __beforeBegin is considered private API, internal use only\r\n    mode.__beforeBegin = null;\r\n\r\n    [\r\n      beginKeywords,\r\n      // do this later so compiler extensions that come earlier have access to the\r\n      // raw array if they wanted to perhaps manipulate it, etc.\r\n      compileIllegal,\r\n      // default to 1 relevance if not specified\r\n      compileRelevance\r\n    ].forEach(ext => ext(mode, parent));\r\n\r\n    mode.isCompiled = true;\r\n\r\n    let keywordPattern = null;\r\n    if (typeof mode.keywords === \"object\") {\r\n      keywordPattern = mode.keywords.$pattern;\r\n      delete mode.keywords.$pattern;\r\n    }\r\n\r\n    if (mode.keywords) {\r\n      mode.keywords = compileKeywords(mode.keywords, language.case_insensitive);\r\n    }\r\n\r\n    // both are not allowed\r\n    if (mode.lexemes && keywordPattern) {\r\n      throw new Error(\"ERR: Prefer `keywords.$pattern` to `mode.lexemes`, BOTH are not allowed. (see mode reference) \");\r\n    }\r\n\r\n    // `mode.lexemes` was the old standard before we added and now recommend\r\n    // using `keywords.$pattern` to pass the keyword pattern\r\n    keywordPattern = keywordPattern || mode.lexemes || /\\w+/;\r\n    cmode.keywordPatternRe = langRe(keywordPattern, true);\r\n\r\n    if (parent) {\r\n      if (!mode.begin) mode.begin = /\\B|\\b/;\r\n      cmode.beginRe = langRe(mode.begin);\r\n      if (mode.endSameAsBegin) mode.end = mode.begin;\r\n      if (!mode.end && !mode.endsWithParent) mode.end = /\\B|\\b/;\r\n      if (mode.end) cmode.endRe = langRe(mode.end);\r\n      cmode.terminatorEnd = source(mode.end) || '';\r\n      if (mode.endsWithParent && parent.terminatorEnd) {\r\n        cmode.terminatorEnd += (mode.end ? '|' : '') + parent.terminatorEnd;\r\n      }\r\n    }\r\n    if (mode.illegal) cmode.illegalRe = langRe(/** @type {RegExp | string} */ (mode.illegal));\r\n    if (!mode.contains) mode.contains = [];\r\n\r\n    mode.contains = [].concat(...mode.contains.map(function(c) {\r\n      return expandOrCloneMode(c === 'self' ? mode : c);\r\n    }));\r\n    mode.contains.forEach(function(c) { compileMode(/** @type Mode */ (c), cmode); });\r\n\r\n    if (mode.starts) {\r\n      compileMode(mode.starts, parent);\r\n    }\r\n\r\n    cmode.matcher = buildModeRegex(cmode);\r\n    return cmode;\r\n  }\r\n\r\n  if (!language.compilerExtensions) language.compilerExtensions = [];\r\n\r\n  // self is not valid at the top-level\r\n  if (language.contains && language.contains.includes('self')) {\r\n    throw new Error(\"ERR: contains `self` is not supported at the top-level of a language.  See documentation.\");\r\n  }\r\n\r\n  // we need a null object, which inherit will guarantee\r\n  language.classNameAliases = inherit(language.classNameAliases || {});\r\n\r\n  return compileMode(/** @type Mode */ (language));\r\n}\r\n\r\n/**\r\n * Determines if a mode has a dependency on it's parent or not\r\n *\r\n * If a mode does have a parent dependency then often we need to clone it if\r\n * it's used in multiple places so that each copy points to the correct parent,\r\n * where-as modes without a parent can often safely be re-used at the bottom of\r\n * a mode chain.\r\n *\r\n * @param {Mode | null} mode\r\n * @returns {boolean} - is there a dependency on the parent?\r\n * */\r\nfunction dependencyOnParent(mode) {\r\n  if (!mode) return false;\r\n\r\n  return mode.endsWithParent || dependencyOnParent(mode.starts);\r\n}\r\n\r\n/**\r\n * Expands a mode or clones it if necessary\r\n *\r\n * This is necessary for modes with parental dependenceis (see notes on\r\n * `dependencyOnParent`) and for nodes that have `variants` - which must then be\r\n * exploded into their own individual modes at compile time.\r\n *\r\n * @param {Mode} mode\r\n * @returns {Mode | Mode[]}\r\n * */\r\nfunction expandOrCloneMode(mode) {\r\n  if (mode.variants && !mode.cachedVariants) {\r\n    mode.cachedVariants = mode.variants.map(function(variant) {\r\n      return inherit(mode, { variants: null }, variant);\r\n    });\r\n  }\r\n\r\n  // EXPAND\r\n  // if we have variants then essentially \"replace\" the mode with the variants\r\n  // this happens in compileMode, where this function is called from\r\n  if (mode.cachedVariants) {\r\n    return mode.cachedVariants;\r\n  }\r\n\r\n  // CLONE\r\n  // if we have dependencies on parents then we need a unique\r\n  // instance of ourselves, so we can be reused with many\r\n  // different parents without issue\r\n  if (dependencyOnParent(mode)) {\r\n    return inherit(mode, { starts: mode.starts ? inherit(mode.starts) : null });\r\n  }\r\n\r\n  if (Object.isFrozen(mode)) {\r\n    return inherit(mode);\r\n  }\r\n\r\n  // no special dependency issues, just return ourselves\r\n  return mode;\r\n}\r\n\r\nvar version = \"10.7.3\";\r\n\r\n// @ts-nocheck\r\n\r\nfunction hasValueOrEmptyAttribute(value) {\r\n  return Boolean(value || value === \"\");\r\n}\r\n\r\nfunction BuildVuePlugin(hljs) {\r\n  const Component = {\r\n    props: [\"language\", \"code\", \"autodetect\"],\r\n    data: function() {\r\n      return {\r\n        detectedLanguage: \"\",\r\n        unknownLanguage: false\r\n      };\r\n    },\r\n    computed: {\r\n      className() {\r\n        if (this.unknownLanguage) return \"\";\r\n\r\n        return \"hljs \" + this.detectedLanguage;\r\n      },\r\n      highlighted() {\r\n        // no idea what language to use, return raw code\r\n        if (!this.autoDetect && !hljs.getLanguage(this.language)) {\r\n          console.warn(`The language \"${this.language}\" you specified could not be found.`);\r\n          this.unknownLanguage = true;\r\n          return escapeHTML(this.code);\r\n        }\r\n\r\n        let result = {};\r\n        if (this.autoDetect) {\r\n          result = hljs.highlightAuto(this.code);\r\n          this.detectedLanguage = result.language;\r\n        } else {\r\n          result = hljs.highlight(this.language, this.code, this.ignoreIllegals);\r\n          this.detectedLanguage = this.language;\r\n        }\r\n        return result.value;\r\n      },\r\n      autoDetect() {\r\n        return !this.language || hasValueOrEmptyAttribute(this.autodetect);\r\n      },\r\n      ignoreIllegals() {\r\n        return true;\r\n      }\r\n    },\r\n    // this avoids needing to use a whole Vue compilation pipeline just\r\n    // to build Highlight.js\r\n    render(createElement) {\r\n      return createElement(\"pre\", {}, [\r\n        createElement(\"code\", {\r\n          class: this.className,\r\n          domProps: { innerHTML: this.highlighted }\r\n        })\r\n      ]);\r\n    }\r\n    // template: `<pre><code :class=\"className\" v-html=\"highlighted\"></code></pre>`\r\n  };\r\n\r\n  const VuePlugin = {\r\n    install(Vue) {\r\n      Vue.component('highlightjs', Component);\r\n    }\r\n  };\r\n\r\n  return { Component, VuePlugin };\r\n}\r\n\r\n/* plugin itself */\r\n\r\n/** @type {HLJSPlugin} */\r\nconst mergeHTMLPlugin = {\r\n  \"after:highlightElement\": ({ el, result, text }) => {\r\n    const originalStream = nodeStream(el);\r\n    if (!originalStream.length) return;\r\n\r\n    const resultNode = document.createElement('div');\r\n    resultNode.innerHTML = result.value;\r\n    result.value = mergeStreams(originalStream, nodeStream(resultNode), text);\r\n  }\r\n};\r\n\r\n/* Stream merging support functions */\r\n\r\n/**\r\n * @typedef Event\r\n * @property {'start'|'stop'} event\r\n * @property {number} offset\r\n * @property {Node} node\r\n */\r\n\r\n/**\r\n * @param {Node} node\r\n */\r\nfunction tag(node) {\r\n  return node.nodeName.toLowerCase();\r\n}\r\n\r\n/**\r\n * @param {Node} node\r\n */\r\nfunction nodeStream(node) {\r\n  /** @type Event[] */\r\n  const result = [];\r\n  (function _nodeStream(node, offset) {\r\n    for (let child = node.firstChild; child; child = child.nextSibling) {\r\n      if (child.nodeType === 3) {\r\n        offset += child.nodeValue.length;\r\n      } else if (child.nodeType === 1) {\r\n        result.push({\r\n          event: 'start',\r\n          offset: offset,\r\n          node: child\r\n        });\r\n        offset = _nodeStream(child, offset);\r\n        // Prevent void elements from having an end tag that would actually\r\n        // double them in the output. There are more void elements in HTML\r\n        // but we list only those realistically expected in code display.\r\n        if (!tag(child).match(/br|hr|img|input/)) {\r\n          result.push({\r\n            event: 'stop',\r\n            offset: offset,\r\n            node: child\r\n          });\r\n        }\r\n      }\r\n    }\r\n    return offset;\r\n  })(node, 0);\r\n  return result;\r\n}\r\n\r\n/**\r\n * @param {any} original - the original stream\r\n * @param {any} highlighted - stream of the highlighted source\r\n * @param {string} value - the original source itself\r\n */\r\nfunction mergeStreams(original, highlighted, value) {\r\n  let processed = 0;\r\n  let result = '';\r\n  const nodeStack = [];\r\n\r\n  function selectStream() {\r\n    if (!original.length || !highlighted.length) {\r\n      return original.length ? original : highlighted;\r\n    }\r\n    if (original[0].offset !== highlighted[0].offset) {\r\n      return (original[0].offset < highlighted[0].offset) ? original : highlighted;\r\n    }\r\n\r\n    /*\r\n    To avoid starting the stream just before it should stop the order is\r\n    ensured that original always starts first and closes last:\r\n\r\n    if (event1 == 'start' && event2 == 'start')\r\n      return original;\r\n    if (event1 == 'start' && event2 == 'stop')\r\n      return highlighted;\r\n    if (event1 == 'stop' && event2 == 'start')\r\n      return original;\r\n    if (event1 == 'stop' && event2 == 'stop')\r\n      return highlighted;\r\n\r\n    ... which is collapsed to:\r\n    */\r\n    return highlighted[0].event === 'start' ? original : highlighted;\r\n  }\r\n\r\n  /**\r\n   * @param {Node} node\r\n   */\r\n  function open(node) {\r\n    /** @param {Attr} attr */\r\n    function attributeString(attr) {\r\n      return ' ' + attr.nodeName + '=\"' + escapeHTML(attr.value) + '\"';\r\n    }\r\n    // @ts-ignore\r\n    result += '<' + tag(node) + [].map.call(node.attributes, attributeString).join('') + '>';\r\n  }\r\n\r\n  /**\r\n   * @param {Node} node\r\n   */\r\n  function close(node) {\r\n    result += '</' + tag(node) + '>';\r\n  }\r\n\r\n  /**\r\n   * @param {Event} event\r\n   */\r\n  function render(event) {\r\n    (event.event === 'start' ? open : close)(event.node);\r\n  }\r\n\r\n  while (original.length || highlighted.length) {\r\n    let stream = selectStream();\r\n    result += escapeHTML(value.substring(processed, stream[0].offset));\r\n    processed = stream[0].offset;\r\n    if (stream === original) {\r\n      /*\r\n      On any opening or closing tag of the original markup we first close\r\n      the entire highlighted node stack, then render the original tag along\r\n      with all the following original tags at the same offset and then\r\n      reopen all the tags on the highlighted stack.\r\n      */\r\n      nodeStack.reverse().forEach(close);\r\n      do {\r\n        render(stream.splice(0, 1)[0]);\r\n        stream = selectStream();\r\n      } while (stream === original && stream.length && stream[0].offset === processed);\r\n      nodeStack.reverse().forEach(open);\r\n    } else {\r\n      if (stream[0].event === 'start') {\r\n        nodeStack.push(stream[0].node);\r\n      } else {\r\n        nodeStack.pop();\r\n      }\r\n      render(stream.splice(0, 1)[0]);\r\n    }\r\n  }\r\n  return result + escapeHTML(value.substr(processed));\r\n}\r\n\r\n/*\r\n\r\nFor the reasoning behind this please see:\r\nhttps://github.com/highlightjs/highlight.js/issues/2880#issuecomment-747275419\r\n\r\n*/\r\n\r\n/**\r\n * @type {Record<string, boolean>}\r\n */\r\nconst seenDeprecations = {};\r\n\r\n/**\r\n * @param {string} message\r\n */\r\nconst error = (message) => {\r\n  console.error(message);\r\n};\r\n\r\n/**\r\n * @param {string} message\r\n * @param {any} args\r\n */\r\nconst warn = (message, ...args) => {\r\n  console.log(`WARN: ${message}`, ...args);\r\n};\r\n\r\n/**\r\n * @param {string} version\r\n * @param {string} message\r\n */\r\nconst deprecated = (version, message) => {\r\n  if (seenDeprecations[`${version}/${message}`]) return;\r\n\r\n  console.log(`Deprecated as of ${version}. ${message}`);\r\n  seenDeprecations[`${version}/${message}`] = true;\r\n};\r\n\r\n/*\r\nSyntax highlighting with language autodetection.\r\nhttps://highlightjs.org/\r\n*/\r\n\r\nconst escape$1 = escapeHTML;\r\nconst inherit$1 = inherit;\r\nconst NO_MATCH = Symbol(\"nomatch\");\r\n\r\n/**\r\n * @param {any} hljs - object that is extended (legacy)\r\n * @returns {HLJSApi}\r\n */\r\nconst HLJS = function(hljs) {\r\n  // Global internal variables used within the highlight.js library.\r\n  /** @type {Record<string, Language>} */\r\n  const languages = Object.create(null);\r\n  /** @type {Record<string, string>} */\r\n  const aliases = Object.create(null);\r\n  /** @type {HLJSPlugin[]} */\r\n  const plugins = [];\r\n\r\n  // safe/production mode - swallows more errors, tries to keep running\r\n  // even if a single syntax or parse hits a fatal error\r\n  let SAFE_MODE = true;\r\n  const fixMarkupRe = /(^(<[^>]+>|\\t|)+|\\n)/gm;\r\n  const LANGUAGE_NOT_FOUND = \"Could not find the language '{}', did you forget to load/include a language module?\";\r\n  /** @type {Language} */\r\n  const PLAINTEXT_LANGUAGE = { disableAutodetect: true, name: 'Plain text', contains: [] };\r\n\r\n  // Global options used when within external APIs. This is modified when\r\n  // calling the `hljs.configure` function.\r\n  /** @type HLJSOptions */\r\n  let options = {\r\n    noHighlightRe: /^(no-?highlight)$/i,\r\n    languageDetectRe: /\\blang(?:uage)?-([\\w-]+)\\b/i,\r\n    classPrefix: 'hljs-',\r\n    tabReplace: null,\r\n    useBR: false,\r\n    languages: null,\r\n    // beta configuration options, subject to change, welcome to discuss\r\n    // https://github.com/highlightjs/highlight.js/issues/1086\r\n    __emitter: TokenTreeEmitter\r\n  };\r\n\r\n  /* Utility functions */\r\n\r\n  /**\r\n   * Tests a language name to see if highlighting should be skipped\r\n   * @param {string} languageName\r\n   */\r\n  function shouldNotHighlight(languageName) {\r\n    return options.noHighlightRe.test(languageName);\r\n  }\r\n\r\n  /**\r\n   * @param {HighlightedHTMLElement} block - the HTML element to determine language for\r\n   */\r\n  function blockLanguage(block) {\r\n    let classes = block.className + ' ';\r\n\r\n    classes += block.parentNode ? block.parentNode.className : '';\r\n\r\n    // language-* takes precedence over non-prefixed class names.\r\n    const match = options.languageDetectRe.exec(classes);\r\n    if (match) {\r\n      const language = getLanguage(match[1]);\r\n      if (!language) {\r\n        warn(LANGUAGE_NOT_FOUND.replace(\"{}\", match[1]));\r\n        warn(\"Falling back to no-highlight mode for this block.\", block);\r\n      }\r\n      return language ? match[1] : 'no-highlight';\r\n    }\r\n\r\n    return classes\r\n      .split(/\\s+/)\r\n      .find((_class) => shouldNotHighlight(_class) || getLanguage(_class));\r\n  }\r\n\r\n  /**\r\n   * Core highlighting function.\r\n   *\r\n   * OLD API\r\n   * highlight(lang, code, ignoreIllegals, continuation)\r\n   *\r\n   * NEW API\r\n   * highlight(code, {lang, ignoreIllegals})\r\n   *\r\n   * @param {string} codeOrlanguageName - the language to use for highlighting\r\n   * @param {string | HighlightOptions} optionsOrCode - the code to highlight\r\n   * @param {boolean} [ignoreIllegals] - whether to ignore illegal matches, default is to bail\r\n   * @param {CompiledMode} [continuation] - current continuation mode, if any\r\n   *\r\n   * @returns {HighlightResult} Result - an object that represents the result\r\n   * @property {string} language - the language name\r\n   * @property {number} relevance - the relevance score\r\n   * @property {string} value - the highlighted HTML code\r\n   * @property {string} code - the original raw code\r\n   * @property {CompiledMode} top - top of the current mode stack\r\n   * @property {boolean} illegal - indicates whether any illegal matches were found\r\n  */\r\n  function highlight(codeOrlanguageName, optionsOrCode, ignoreIllegals, continuation) {\r\n    let code = \"\";\r\n    let languageName = \"\";\r\n    if (typeof optionsOrCode === \"object\") {\r\n      code = codeOrlanguageName;\r\n      ignoreIllegals = optionsOrCode.ignoreIllegals;\r\n      languageName = optionsOrCode.language;\r\n      // continuation not supported at all via the new API\r\n      // eslint-disable-next-line no-undefined\r\n      continuation = undefined;\r\n    } else {\r\n      // old API\r\n      deprecated(\"10.7.0\", \"highlight(lang, code, ...args) has been deprecated.\");\r\n      deprecated(\"10.7.0\", \"Please use highlight(code, options) instead.\\nhttps://github.com/highlightjs/highlight.js/issues/2277\");\r\n      languageName = codeOrlanguageName;\r\n      code = optionsOrCode;\r\n    }\r\n\r\n    /** @type {BeforeHighlightContext} */\r\n    const context = {\r\n      code,\r\n      language: languageName\r\n    };\r\n    // the plugin can change the desired language or the code to be highlighted\r\n    // just be changing the object it was passed\r\n    fire(\"before:highlight\", context);\r\n\r\n    // a before plugin can usurp the result completely by providing it's own\r\n    // in which case we don't even need to call highlight\r\n    const result = context.result\r\n      ? context.result\r\n      : _highlight(context.language, context.code, ignoreIllegals, continuation);\r\n\r\n    result.code = context.code;\r\n    // the plugin can change anything in result to suite it\r\n    fire(\"after:highlight\", result);\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * private highlight that's used internally and does not fire callbacks\r\n   *\r\n   * @param {string} languageName - the language to use for highlighting\r\n   * @param {string} codeToHighlight - the code to highlight\r\n   * @param {boolean?} [ignoreIllegals] - whether to ignore illegal matches, default is to bail\r\n   * @param {CompiledMode?} [continuation] - current continuation mode, if any\r\n   * @returns {HighlightResult} - result of the highlight operation\r\n  */\r\n  function _highlight(languageName, codeToHighlight, ignoreIllegals, continuation) {\r\n    /**\r\n     * Return keyword data if a match is a keyword\r\n     * @param {CompiledMode} mode - current mode\r\n     * @param {RegExpMatchArray} match - regexp match data\r\n     * @returns {KeywordData | false}\r\n     */\r\n    function keywordData(mode, match) {\r\n      const matchText = language.case_insensitive ? match[0].toLowerCase() : match[0];\r\n      return Object.prototype.hasOwnProperty.call(mode.keywords, matchText) && mode.keywords[matchText];\r\n    }\r\n\r\n    function processKeywords() {\r\n      if (!top.keywords) {\r\n        emitter.addText(modeBuffer);\r\n        return;\r\n      }\r\n\r\n      let lastIndex = 0;\r\n      top.keywordPatternRe.lastIndex = 0;\r\n      let match = top.keywordPatternRe.exec(modeBuffer);\r\n      let buf = \"\";\r\n\r\n      while (match) {\r\n        buf += modeBuffer.substring(lastIndex, match.index);\r\n        const data = keywordData(top, match);\r\n        if (data) {\r\n          const [kind, keywordRelevance] = data;\r\n          emitter.addText(buf);\r\n          buf = \"\";\r\n\r\n          relevance += keywordRelevance;\r\n          if (kind.startsWith(\"_\")) {\r\n            // _ implied for relevance only, do not highlight\r\n            // by applying a class name\r\n            buf += match[0];\r\n          } else {\r\n            const cssClass = language.classNameAliases[kind] || kind;\r\n            emitter.addKeyword(match[0], cssClass);\r\n          }\r\n        } else {\r\n          buf += match[0];\r\n        }\r\n        lastIndex = top.keywordPatternRe.lastIndex;\r\n        match = top.keywordPatternRe.exec(modeBuffer);\r\n      }\r\n      buf += modeBuffer.substr(lastIndex);\r\n      emitter.addText(buf);\r\n    }\r\n\r\n    function processSubLanguage() {\r\n      if (modeBuffer === \"\") return;\r\n      /** @type HighlightResult */\r\n      let result = null;\r\n\r\n      if (typeof top.subLanguage === 'string') {\r\n        if (!languages[top.subLanguage]) {\r\n          emitter.addText(modeBuffer);\r\n          return;\r\n        }\r\n        result = _highlight(top.subLanguage, modeBuffer, true, continuations[top.subLanguage]);\r\n        continuations[top.subLanguage] = /** @type {CompiledMode} */ (result.top);\r\n      } else {\r\n        result = highlightAuto(modeBuffer, top.subLanguage.length ? top.subLanguage : null);\r\n      }\r\n\r\n      // Counting embedded language score towards the host language may be disabled\r\n      // with zeroing the containing mode relevance. Use case in point is Markdown that\r\n      // allows XML everywhere and makes every XML snippet to have a much larger Markdown\r\n      // score.\r\n      if (top.relevance > 0) {\r\n        relevance += result.relevance;\r\n      }\r\n      emitter.addSublanguage(result.emitter, result.language);\r\n    }\r\n\r\n    function processBuffer() {\r\n      if (top.subLanguage != null) {\r\n        processSubLanguage();\r\n      } else {\r\n        processKeywords();\r\n      }\r\n      modeBuffer = '';\r\n    }\r\n\r\n    /**\r\n     * @param {Mode} mode - new mode to start\r\n     */\r\n    function startNewMode(mode) {\r\n      if (mode.className) {\r\n        emitter.openNode(language.classNameAliases[mode.className] || mode.className);\r\n      }\r\n      top = Object.create(mode, { parent: { value: top } });\r\n      return top;\r\n    }\r\n\r\n    /**\r\n     * @param {CompiledMode } mode - the mode to potentially end\r\n     * @param {RegExpMatchArray} match - the latest match\r\n     * @param {string} matchPlusRemainder - match plus remainder of content\r\n     * @returns {CompiledMode | void} - the next mode, or if void continue on in current mode\r\n     */\r\n    function endOfMode(mode, match, matchPlusRemainder) {\r\n      let matched = startsWith(mode.endRe, matchPlusRemainder);\r\n\r\n      if (matched) {\r\n        if (mode[\"on:end\"]) {\r\n          const resp = new Response(mode);\r\n          mode[\"on:end\"](match, resp);\r\n          if (resp.isMatchIgnored) matched = false;\r\n        }\r\n\r\n        if (matched) {\r\n          while (mode.endsParent && mode.parent) {\r\n            mode = mode.parent;\r\n          }\r\n          return mode;\r\n        }\r\n      }\r\n      // even if on:end fires an `ignore` it's still possible\r\n      // that we might trigger the end node because of a parent mode\r\n      if (mode.endsWithParent) {\r\n        return endOfMode(mode.parent, match, matchPlusRemainder);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Handle matching but then ignoring a sequence of text\r\n     *\r\n     * @param {string} lexeme - string containing full match text\r\n     */\r\n    function doIgnore(lexeme) {\r\n      if (top.matcher.regexIndex === 0) {\r\n        // no more regexs to potentially match here, so we move the cursor forward one\r\n        // space\r\n        modeBuffer += lexeme[0];\r\n        return 1;\r\n      } else {\r\n        // no need to move the cursor, we still have additional regexes to try and\r\n        // match at this very spot\r\n        resumeScanAtSamePosition = true;\r\n        return 0;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Handle the start of a new potential mode match\r\n     *\r\n     * @param {EnhancedMatch} match - the current match\r\n     * @returns {number} how far to advance the parse cursor\r\n     */\r\n    function doBeginMatch(match) {\r\n      const lexeme = match[0];\r\n      const newMode = match.rule;\r\n\r\n      const resp = new Response(newMode);\r\n      // first internal before callbacks, then the public ones\r\n      const beforeCallbacks = [newMode.__beforeBegin, newMode[\"on:begin\"]];\r\n      for (const cb of beforeCallbacks) {\r\n        if (!cb) continue;\r\n        cb(match, resp);\r\n        if (resp.isMatchIgnored) return doIgnore(lexeme);\r\n      }\r\n\r\n      if (newMode && newMode.endSameAsBegin) {\r\n        newMode.endRe = escape(lexeme);\r\n      }\r\n\r\n      if (newMode.skip) {\r\n        modeBuffer += lexeme;\r\n      } else {\r\n        if (newMode.excludeBegin) {\r\n          modeBuffer += lexeme;\r\n        }\r\n        processBuffer();\r\n        if (!newMode.returnBegin && !newMode.excludeBegin) {\r\n          modeBuffer = lexeme;\r\n        }\r\n      }\r\n      startNewMode(newMode);\r\n      // if (mode[\"after:begin\"]) {\r\n      //   let resp = new Response(mode);\r\n      //   mode[\"after:begin\"](match, resp);\r\n      // }\r\n      return newMode.returnBegin ? 0 : lexeme.length;\r\n    }\r\n\r\n    /**\r\n     * Handle the potential end of mode\r\n     *\r\n     * @param {RegExpMatchArray} match - the current match\r\n     */\r\n    function doEndMatch(match) {\r\n      const lexeme = match[0];\r\n      const matchPlusRemainder = codeToHighlight.substr(match.index);\r\n\r\n      const endMode = endOfMode(top, match, matchPlusRemainder);\r\n      if (!endMode) { return NO_MATCH; }\r\n\r\n      const origin = top;\r\n      if (origin.skip) {\r\n        modeBuffer += lexeme;\r\n      } else {\r\n        if (!(origin.returnEnd || origin.excludeEnd)) {\r\n          modeBuffer += lexeme;\r\n        }\r\n        processBuffer();\r\n        if (origin.excludeEnd) {\r\n          modeBuffer = lexeme;\r\n        }\r\n      }\r\n      do {\r\n        if (top.className) {\r\n          emitter.closeNode();\r\n        }\r\n        if (!top.skip && !top.subLanguage) {\r\n          relevance += top.relevance;\r\n        }\r\n        top = top.parent;\r\n      } while (top !== endMode.parent);\r\n      if (endMode.starts) {\r\n        if (endMode.endSameAsBegin) {\r\n          endMode.starts.endRe = endMode.endRe;\r\n        }\r\n        startNewMode(endMode.starts);\r\n      }\r\n      return origin.returnEnd ? 0 : lexeme.length;\r\n    }\r\n\r\n    function processContinuations() {\r\n      const list = [];\r\n      for (let current = top; current !== language; current = current.parent) {\r\n        if (current.className) {\r\n          list.unshift(current.className);\r\n        }\r\n      }\r\n      list.forEach(item => emitter.openNode(item));\r\n    }\r\n\r\n    /** @type {{type?: MatchType, index?: number, rule?: Mode}}} */\r\n    let lastMatch = {};\r\n\r\n    /**\r\n     *  Process an individual match\r\n     *\r\n     * @param {string} textBeforeMatch - text preceeding the match (since the last match)\r\n     * @param {EnhancedMatch} [match] - the match itself\r\n     */\r\n    function processLexeme(textBeforeMatch, match) {\r\n      const lexeme = match && match[0];\r\n\r\n      // add non-matched text to the current mode buffer\r\n      modeBuffer += textBeforeMatch;\r\n\r\n      if (lexeme == null) {\r\n        processBuffer();\r\n        return 0;\r\n      }\r\n\r\n      // we've found a 0 width match and we're stuck, so we need to advance\r\n      // this happens when we have badly behaved rules that have optional matchers to the degree that\r\n      // sometimes they can end up matching nothing at all\r\n      // Ref: https://github.com/highlightjs/highlight.js/issues/2140\r\n      if (lastMatch.type === \"begin\" && match.type === \"end\" && lastMatch.index === match.index && lexeme === \"\") {\r\n        // spit the \"skipped\" character that our regex choked on back into the output sequence\r\n        modeBuffer += codeToHighlight.slice(match.index, match.index + 1);\r\n        if (!SAFE_MODE) {\r\n          /** @type {AnnotatedError} */\r\n          const err = new Error('0 width match regex');\r\n          err.languageName = languageName;\r\n          err.badRule = lastMatch.rule;\r\n          throw err;\r\n        }\r\n        return 1;\r\n      }\r\n      lastMatch = match;\r\n\r\n      if (match.type === \"begin\") {\r\n        return doBeginMatch(match);\r\n      } else if (match.type === \"illegal\" && !ignoreIllegals) {\r\n        // illegal match, we do not continue processing\r\n        /** @type {AnnotatedError} */\r\n        const err = new Error('Illegal lexeme \"' + lexeme + '\" for mode \"' + (top.className || '<unnamed>') + '\"');\r\n        err.mode = top;\r\n        throw err;\r\n      } else if (match.type === \"end\") {\r\n        const processed = doEndMatch(match);\r\n        if (processed !== NO_MATCH) {\r\n          return processed;\r\n        }\r\n      }\r\n\r\n      // edge case for when illegal matches $ (end of line) which is technically\r\n      // a 0 width match but not a begin/end match so it's not caught by the\r\n      // first handler (when ignoreIllegals is true)\r\n      if (match.type === \"illegal\" && lexeme === \"\") {\r\n        // advance so we aren't stuck in an infinite loop\r\n        return 1;\r\n      }\r\n\r\n      // infinite loops are BAD, this is a last ditch catch all. if we have a\r\n      // decent number of iterations yet our index (cursor position in our\r\n      // parsing) still 3x behind our index then something is very wrong\r\n      // so we bail\r\n      if (iterations > 100000 && iterations > match.index * 3) {\r\n        const err = new Error('potential infinite loop, way more iterations than matches');\r\n        throw err;\r\n      }\r\n\r\n      /*\r\n      Why might be find ourselves here?  Only one occasion now.  An end match that was\r\n      triggered but could not be completed.  When might this happen?  When an `endSameasBegin`\r\n      rule sets the end rule to a specific match.  Since the overall mode termination rule that's\r\n      being used to scan the text isn't recompiled that means that any match that LOOKS like\r\n      the end (but is not, because it is not an exact match to the beginning) will\r\n      end up here.  A definite end match, but when `doEndMatch` tries to \"reapply\"\r\n      the end rule and fails to match, we wind up here, and just silently ignore the end.\r\n\r\n      This causes no real harm other than stopping a few times too many.\r\n      */\r\n\r\n      modeBuffer += lexeme;\r\n      return lexeme.length;\r\n    }\r\n\r\n    const language = getLanguage(languageName);\r\n    if (!language) {\r\n      error(LANGUAGE_NOT_FOUND.replace(\"{}\", languageName));\r\n      throw new Error('Unknown language: \"' + languageName + '\"');\r\n    }\r\n\r\n    const md = compileLanguage(language, { plugins });\r\n    let result = '';\r\n    /** @type {CompiledMode} */\r\n    let top = continuation || md;\r\n    /** @type Record<string,CompiledMode> */\r\n    const continuations = {}; // keep continuations for sub-languages\r\n    const emitter = new options.__emitter(options);\r\n    processContinuations();\r\n    let modeBuffer = '';\r\n    let relevance = 0;\r\n    let index = 0;\r\n    let iterations = 0;\r\n    let resumeScanAtSamePosition = false;\r\n\r\n    try {\r\n      top.matcher.considerAll();\r\n\r\n      for (;;) {\r\n        iterations++;\r\n        if (resumeScanAtSamePosition) {\r\n          // only regexes not matched previously will now be\r\n          // considered for a potential match\r\n          resumeScanAtSamePosition = false;\r\n        } else {\r\n          top.matcher.considerAll();\r\n        }\r\n        top.matcher.lastIndex = index;\r\n\r\n        const match = top.matcher.exec(codeToHighlight);\r\n        // console.log(\"match\", match[0], match.rule && match.rule.begin)\r\n\r\n        if (!match) break;\r\n\r\n        const beforeMatch = codeToHighlight.substring(index, match.index);\r\n        const processedCount = processLexeme(beforeMatch, match);\r\n        index = match.index + processedCount;\r\n      }\r\n      processLexeme(codeToHighlight.substr(index));\r\n      emitter.closeAllNodes();\r\n      emitter.finalize();\r\n      result = emitter.toHTML();\r\n\r\n      return {\r\n        // avoid possible breakage with v10 clients expecting\r\n        // this to always be an integer\r\n        relevance: Math.floor(relevance),\r\n        value: result,\r\n        language: languageName,\r\n        illegal: false,\r\n        emitter: emitter,\r\n        top: top\r\n      };\r\n    } catch (err) {\r\n      if (err.message && err.message.includes('Illegal')) {\r\n        return {\r\n          illegal: true,\r\n          illegalBy: {\r\n            msg: err.message,\r\n            context: codeToHighlight.slice(index - 100, index + 100),\r\n            mode: err.mode\r\n          },\r\n          sofar: result,\r\n          relevance: 0,\r\n          value: escape$1(codeToHighlight),\r\n          emitter: emitter\r\n        };\r\n      } else if (SAFE_MODE) {\r\n        return {\r\n          illegal: false,\r\n          relevance: 0,\r\n          value: escape$1(codeToHighlight),\r\n          emitter: emitter,\r\n          language: languageName,\r\n          top: top,\r\n          errorRaised: err\r\n        };\r\n      } else {\r\n        throw err;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * returns a valid highlight result, without actually doing any actual work,\r\n   * auto highlight starts with this and it's possible for small snippets that\r\n   * auto-detection may not find a better match\r\n   * @param {string} code\r\n   * @returns {HighlightResult}\r\n   */\r\n  function justTextHighlightResult(code) {\r\n    const result = {\r\n      relevance: 0,\r\n      emitter: new options.__emitter(options),\r\n      value: escape$1(code),\r\n      illegal: false,\r\n      top: PLAINTEXT_LANGUAGE\r\n    };\r\n    result.emitter.addText(code);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n  Highlighting with language detection. Accepts a string with the code to\r\n  highlight. Returns an object with the following properties:\r\n\r\n  - language (detected language)\r\n  - relevance (int)\r\n  - value (an HTML string with highlighting markup)\r\n  - second_best (object with the same structure for second-best heuristically\r\n    detected language, may be absent)\r\n\r\n    @param {string} code\r\n    @param {Array<string>} [languageSubset]\r\n    @returns {AutoHighlightResult}\r\n  */\r\n  function highlightAuto(code, languageSubset) {\r\n    languageSubset = languageSubset || options.languages || Object.keys(languages);\r\n    const plaintext = justTextHighlightResult(code);\r\n\r\n    const results = languageSubset.filter(getLanguage).filter(autoDetection).map(name =>\r\n      _highlight(name, code, false)\r\n    );\r\n    results.unshift(plaintext); // plaintext is always an option\r\n\r\n    const sorted = results.sort((a, b) => {\r\n      // sort base on relevance\r\n      if (a.relevance !== b.relevance) return b.relevance - a.relevance;\r\n\r\n      // always award the tie to the base language\r\n      // ie if C++ and Arduino are tied, it's more likely to be C++\r\n      if (a.language && b.language) {\r\n        if (getLanguage(a.language).supersetOf === b.language) {\r\n          return 1;\r\n        } else if (getLanguage(b.language).supersetOf === a.language) {\r\n          return -1;\r\n        }\r\n      }\r\n\r\n      // otherwise say they are equal, which has the effect of sorting on\r\n      // relevance while preserving the original ordering - which is how ties\r\n      // have historically been settled, ie the language that comes first always\r\n      // wins in the case of a tie\r\n      return 0;\r\n    });\r\n\r\n    const [best, secondBest] = sorted;\r\n\r\n    /** @type {AutoHighlightResult} */\r\n    const result = best;\r\n    result.second_best = secondBest;\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n  Post-processing of the highlighted markup:\r\n\r\n  - replace TABs with something more useful\r\n  - replace real line-breaks with '<br>' for non-pre containers\r\n\r\n    @param {string} html\r\n    @returns {string}\r\n  */\r\n  function fixMarkup(html) {\r\n    if (!(options.tabReplace || options.useBR)) {\r\n      return html;\r\n    }\r\n\r\n    return html.replace(fixMarkupRe, match => {\r\n      if (match === '\\n') {\r\n        return options.useBR ? '<br>' : match;\r\n      } else if (options.tabReplace) {\r\n        return match.replace(/\\t/g, options.tabReplace);\r\n      }\r\n      return match;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Builds new class name for block given the language name\r\n   *\r\n   * @param {HTMLElement} element\r\n   * @param {string} [currentLang]\r\n   * @param {string} [resultLang]\r\n   */\r\n  function updateClassName(element, currentLang, resultLang) {\r\n    const language = currentLang ? aliases[currentLang] : resultLang;\r\n\r\n    element.classList.add(\"hljs\");\r\n    if (language) element.classList.add(language);\r\n  }\r\n\r\n  /** @type {HLJSPlugin} */\r\n  const brPlugin = {\r\n    \"before:highlightElement\": ({ el }) => {\r\n      if (options.useBR) {\r\n        el.innerHTML = el.innerHTML.replace(/\\n/g, '').replace(/<br[ /]*>/g, '\\n');\r\n      }\r\n    },\r\n    \"after:highlightElement\": ({ result }) => {\r\n      if (options.useBR) {\r\n        result.value = result.value.replace(/\\n/g, \"<br>\");\r\n      }\r\n    }\r\n  };\r\n\r\n  const TAB_REPLACE_RE = /^(<[^>]+>|\\t)+/gm;\r\n  /** @type {HLJSPlugin} */\r\n  const tabReplacePlugin = {\r\n    \"after:highlightElement\": ({ result }) => {\r\n      if (options.tabReplace) {\r\n        result.value = result.value.replace(TAB_REPLACE_RE, (m) =>\r\n          m.replace(/\\t/g, options.tabReplace)\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Applies highlighting to a DOM node containing code. Accepts a DOM node and\r\n   * two optional parameters for fixMarkup.\r\n   *\r\n   * @param {HighlightedHTMLElement} element - the HTML element to highlight\r\n  */\r\n  function highlightElement(element) {\r\n    /** @type HTMLElement */\r\n    let node = null;\r\n    const language = blockLanguage(element);\r\n\r\n    if (shouldNotHighlight(language)) return;\r\n\r\n    // support for v10 API\r\n    fire(\"before:highlightElement\",\r\n      { el: element, language: language });\r\n\r\n    node = element;\r\n    const text = node.textContent;\r\n    const result = language ? highlight(text, { language, ignoreIllegals: true }) : highlightAuto(text);\r\n\r\n    // support for v10 API\r\n    fire(\"after:highlightElement\", { el: element, result, text });\r\n\r\n    element.innerHTML = result.value;\r\n    updateClassName(element, language, result.language);\r\n    element.result = {\r\n      language: result.language,\r\n      // TODO: remove with version 11.0\r\n      re: result.relevance,\r\n      relavance: result.relevance\r\n    };\r\n    if (result.second_best) {\r\n      element.second_best = {\r\n        language: result.second_best.language,\r\n        // TODO: remove with version 11.0\r\n        re: result.second_best.relevance,\r\n        relavance: result.second_best.relevance\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates highlight.js global options with the passed options\r\n   *\r\n   * @param {Partial<HLJSOptions>} userOptions\r\n   */\r\n  function configure(userOptions) {\r\n    if (userOptions.useBR) {\r\n      deprecated(\"10.3.0\", \"'useBR' will be removed entirely in v11.0\");\r\n      deprecated(\"10.3.0\", \"Please see https://github.com/highlightjs/highlight.js/issues/2559\");\r\n    }\r\n    options = inherit$1(options, userOptions);\r\n  }\r\n\r\n  /**\r\n   * Highlights to all <pre><code> blocks on a page\r\n   *\r\n   * @type {Function & {called?: boolean}}\r\n   */\r\n  // TODO: remove v12, deprecated\r\n  const initHighlighting = () => {\r\n    if (initHighlighting.called) return;\r\n    initHighlighting.called = true;\r\n\r\n    deprecated(\"10.6.0\", \"initHighlighting() is deprecated.  Use highlightAll() instead.\");\r\n\r\n    const blocks = document.querySelectorAll('pre code');\r\n    blocks.forEach(highlightElement);\r\n  };\r\n\r\n  // Higlights all when DOMContentLoaded fires\r\n  // TODO: remove v12, deprecated\r\n  function initHighlightingOnLoad() {\r\n    deprecated(\"10.6.0\", \"initHighlightingOnLoad() is deprecated.  Use highlightAll() instead.\");\r\n    wantsHighlight = true;\r\n  }\r\n\r\n  let wantsHighlight = false;\r\n\r\n  /**\r\n   * auto-highlights all pre>code elements on the page\r\n   */\r\n  function highlightAll() {\r\n    // if we are called too early in the loading process\r\n    if (document.readyState === \"loading\") {\r\n      wantsHighlight = true;\r\n      return;\r\n    }\r\n\r\n    const blocks = document.querySelectorAll('pre code');\r\n    blocks.forEach(highlightElement);\r\n  }\r\n\r\n  function boot() {\r\n    // if a highlight was requested before DOM was loaded, do now\r\n    if (wantsHighlight) highlightAll();\r\n  }\r\n\r\n  // make sure we are in the browser environment\r\n  if (typeof window !== 'undefined' && window.addEventListener) {\r\n    window.addEventListener('DOMContentLoaded', boot, false);\r\n  }\r\n\r\n  /**\r\n   * Register a language grammar module\r\n   *\r\n   * @param {string} languageName\r\n   * @param {LanguageFn} languageDefinition\r\n   */\r\n  function registerLanguage(languageName, languageDefinition) {\r\n    let lang = null;\r\n    try {\r\n      lang = languageDefinition(hljs);\r\n    } catch (error$1) {\r\n      error(\"Language definition for '{}' could not be registered.\".replace(\"{}\", languageName));\r\n      // hard or soft error\r\n      if (!SAFE_MODE) { throw error$1; } else { error(error$1); }\r\n      // languages that have serious errors are replaced with essentially a\r\n      // \"plaintext\" stand-in so that the code blocks will still get normal\r\n      // css classes applied to them - and one bad language won't break the\r\n      // entire highlighter\r\n      lang = PLAINTEXT_LANGUAGE;\r\n    }\r\n    // give it a temporary name if it doesn't have one in the meta-data\r\n    if (!lang.name) lang.name = languageName;\r\n    languages[languageName] = lang;\r\n    lang.rawDefinition = languageDefinition.bind(null, hljs);\r\n\r\n    if (lang.aliases) {\r\n      registerAliases(lang.aliases, { languageName });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove a language grammar module\r\n   *\r\n   * @param {string} languageName\r\n   */\r\n  function unregisterLanguage(languageName) {\r\n    delete languages[languageName];\r\n    for (const alias of Object.keys(aliases)) {\r\n      if (aliases[alias] === languageName) {\r\n        delete aliases[alias];\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {string[]} List of language internal names\r\n   */\r\n  function listLanguages() {\r\n    return Object.keys(languages);\r\n  }\r\n\r\n  /**\r\n    intended usage: When one language truly requires another\r\n\r\n    Unlike `getLanguage`, this will throw when the requested language\r\n    is not available.\r\n\r\n    @param {string} name - name of the language to fetch/require\r\n    @returns {Language | never}\r\n  */\r\n  function requireLanguage(name) {\r\n    deprecated(\"10.4.0\", \"requireLanguage will be removed entirely in v11.\");\r\n    deprecated(\"10.4.0\", \"Please see https://github.com/highlightjs/highlight.js/pull/2844\");\r\n\r\n    const lang = getLanguage(name);\r\n    if (lang) { return lang; }\r\n\r\n    const err = new Error('The \\'{}\\' language is required, but not loaded.'.replace('{}', name));\r\n    throw err;\r\n  }\r\n\r\n  /**\r\n   * @param {string} name - name of the language to retrieve\r\n   * @returns {Language | undefined}\r\n   */\r\n  function getLanguage(name) {\r\n    name = (name || '').toLowerCase();\r\n    return languages[name] || languages[aliases[name]];\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {string|string[]} aliasList - single alias or list of aliases\r\n   * @param {{languageName: string}} opts\r\n   */\r\n  function registerAliases(aliasList, { languageName }) {\r\n    if (typeof aliasList === 'string') {\r\n      aliasList = [aliasList];\r\n    }\r\n    aliasList.forEach(alias => { aliases[alias.toLowerCase()] = languageName; });\r\n  }\r\n\r\n  /**\r\n   * Determines if a given language has auto-detection enabled\r\n   * @param {string} name - name of the language\r\n   */\r\n  function autoDetection(name) {\r\n    const lang = getLanguage(name);\r\n    return lang && !lang.disableAutodetect;\r\n  }\r\n\r\n  /**\r\n   * Upgrades the old highlightBlock plugins to the new\r\n   * highlightElement API\r\n   * @param {HLJSPlugin} plugin\r\n   */\r\n  function upgradePluginAPI(plugin) {\r\n    // TODO: remove with v12\r\n    if (plugin[\"before:highlightBlock\"] && !plugin[\"before:highlightElement\"]) {\r\n      plugin[\"before:highlightElement\"] = (data) => {\r\n        plugin[\"before:highlightBlock\"](\r\n          Object.assign({ block: data.el }, data)\r\n        );\r\n      };\r\n    }\r\n    if (plugin[\"after:highlightBlock\"] && !plugin[\"after:highlightElement\"]) {\r\n      plugin[\"after:highlightElement\"] = (data) => {\r\n        plugin[\"after:highlightBlock\"](\r\n          Object.assign({ block: data.el }, data)\r\n        );\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {HLJSPlugin} plugin\r\n   */\r\n  function addPlugin(plugin) {\r\n    upgradePluginAPI(plugin);\r\n    plugins.push(plugin);\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {PluginEvent} event\r\n   * @param {any} args\r\n   */\r\n  function fire(event, args) {\r\n    const cb = event;\r\n    plugins.forEach(function(plugin) {\r\n      if (plugin[cb]) {\r\n        plugin[cb](args);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n  Note: fixMarkup is deprecated and will be removed entirely in v11\r\n\r\n  @param {string} arg\r\n  @returns {string}\r\n  */\r\n  function deprecateFixMarkup(arg) {\r\n    deprecated(\"10.2.0\", \"fixMarkup will be removed entirely in v11.0\");\r\n    deprecated(\"10.2.0\", \"Please see https://github.com/highlightjs/highlight.js/issues/2534\");\r\n\r\n    return fixMarkup(arg);\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {HighlightedHTMLElement} el\r\n   */\r\n  function deprecateHighlightBlock(el) {\r\n    deprecated(\"10.7.0\", \"highlightBlock will be removed entirely in v12.0\");\r\n    deprecated(\"10.7.0\", \"Please use highlightElement now.\");\r\n\r\n    return highlightElement(el);\r\n  }\r\n\r\n  /* Interface definition */\r\n  Object.assign(hljs, {\r\n    highlight,\r\n    highlightAuto,\r\n    highlightAll,\r\n    fixMarkup: deprecateFixMarkup,\r\n    highlightElement,\r\n    // TODO: Remove with v12 API\r\n    highlightBlock: deprecateHighlightBlock,\r\n    configure,\r\n    initHighlighting,\r\n    initHighlightingOnLoad,\r\n    registerLanguage,\r\n    unregisterLanguage,\r\n    listLanguages,\r\n    getLanguage,\r\n    registerAliases,\r\n    requireLanguage,\r\n    autoDetection,\r\n    inherit: inherit$1,\r\n    addPlugin,\r\n    // plugins for frameworks\r\n    vuePlugin: BuildVuePlugin(hljs).VuePlugin\r\n  });\r\n\r\n  hljs.debugMode = function() { SAFE_MODE = false; };\r\n  hljs.safeMode = function() { SAFE_MODE = true; };\r\n  hljs.versionString = version;\r\n\r\n  for (const key in MODES) {\r\n    // @ts-ignore\r\n    if (typeof MODES[key] === \"object\") {\r\n      // @ts-ignore\r\n      deepFreezeEs6(MODES[key]);\r\n    }\r\n  }\r\n\r\n  // merge all the modes/regexs into our main object\r\n  Object.assign(hljs, MODES);\r\n\r\n  // built-in plugins, likely to be moved out of core in the future\r\n  hljs.addPlugin(brPlugin); // slated to be removed in v11\r\n  hljs.addPlugin(mergeHTMLPlugin);\r\n  hljs.addPlugin(tabReplacePlugin);\r\n  return hljs;\r\n};\r\n\r\n// export an \"instance\" of the highlighter\r\nvar highlight = HLJS({});\r\n\r\nmodule.exports = highlight;\r\n\n\n/***/ })\n\n}]);","inputSourceMap":null}