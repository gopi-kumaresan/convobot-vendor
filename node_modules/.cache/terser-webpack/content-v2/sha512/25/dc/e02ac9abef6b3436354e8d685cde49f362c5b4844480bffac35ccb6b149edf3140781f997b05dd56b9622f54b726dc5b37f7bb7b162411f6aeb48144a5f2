{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{\"7EHt\":function(module,__webpack_exports__,__webpack_require__){\"use strict\";__webpack_require__.d(__webpack_exports__,\"a\",function(){return expansion_MatAccordion}),__webpack_require__.d(__webpack_exports__,\"b\",function(){return expansion_MatExpansionModule}),__webpack_require__.d(__webpack_exports__,\"c\",function(){return expansion_MatExpansionPanel}),__webpack_require__.d(__webpack_exports__,\"d\",function(){return expansion_MatExpansionPanelActionRow}),__webpack_require__.d(__webpack_exports__,\"e\",function(){return expansion_MatExpansionPanelDescription}),__webpack_require__.d(__webpack_exports__,\"f\",function(){return expansion_MatExpansionPanelHeader}),__webpack_require__.d(__webpack_exports__,\"g\",function(){return expansion_MatExpansionPanelTitle});var core=__webpack_require__(\"fXoL\"),coercion=__webpack_require__(\"8LU1\"),Subject=__webpack_require__(\"XNiG\"),Subscription=__webpack_require__(\"quSY\"),collections=__webpack_require__(\"0EQZ\");let nextId=0;const CDK_ACCORDION=new core.u(\"CdkAccordion\");let accordion_CdkAccordion=(()=>{class CdkAccordion{constructor(){this._stateChanges=new Subject.a,this._openCloseAllActions=new Subject.a,this.id=\"cdk-accordion-\"+nextId++,this._multi=!1}get multi(){return this._multi}set multi(multi){this._multi=Object(coercion.c)(multi)}openAll(){this._multi&&this._openCloseAllActions.next(!0)}closeAll(){this._openCloseAllActions.next(!1)}ngOnChanges(changes){this._stateChanges.next(changes)}ngOnDestroy(){this._stateChanges.complete(),this._openCloseAllActions.complete()}}return CdkAccordion.ɵfac=function(t){return new(t||CdkAccordion)},CdkAccordion.ɵdir=core.Ob({type:CdkAccordion,selectors:[[\"cdk-accordion\"],[\"\",\"cdkAccordion\",\"\"]],inputs:{multi:\"multi\"},exportAs:[\"cdkAccordion\"],features:[core.Fb([{provide:CDK_ACCORDION,useExisting:CdkAccordion}]),core.Eb]}),CdkAccordion})(),nextId$1=0,accordion_CdkAccordionItem=(()=>{class CdkAccordionItem{constructor(accordion,_changeDetectorRef,_expansionDispatcher){this.accordion=accordion,this._changeDetectorRef=_changeDetectorRef,this._expansionDispatcher=_expansionDispatcher,this._openCloseAllSubscription=Subscription.a.EMPTY,this.closed=new core.p,this.opened=new core.p,this.destroyed=new core.p,this.expandedChange=new core.p,this.id=\"cdk-accordion-child-\"+nextId$1++,this._expanded=!1,this._disabled=!1,this._removeUniqueSelectionListener=()=>{},this._removeUniqueSelectionListener=_expansionDispatcher.listen((id,accordionId)=>{this.accordion&&!this.accordion.multi&&this.accordion.id===accordionId&&this.id!==id&&(this.expanded=!1)}),this.accordion&&(this._openCloseAllSubscription=this._subscribeToOpenCloseAllActions())}get expanded(){return this._expanded}set expanded(expanded){expanded=Object(coercion.c)(expanded),this._expanded!==expanded&&(this._expanded=expanded,this.expandedChange.emit(expanded),expanded?(this.opened.emit(),this._expansionDispatcher.notify(this.id,this.accordion?this.accordion.id:this.id)):this.closed.emit(),this._changeDetectorRef.markForCheck())}get disabled(){return this._disabled}set disabled(disabled){this._disabled=Object(coercion.c)(disabled)}ngOnDestroy(){this.opened.complete(),this.closed.complete(),this.destroyed.emit(),this.destroyed.complete(),this._removeUniqueSelectionListener(),this._openCloseAllSubscription.unsubscribe()}toggle(){this.disabled||(this.expanded=!this.expanded)}close(){this.disabled||(this.expanded=!1)}open(){this.disabled||(this.expanded=!0)}_subscribeToOpenCloseAllActions(){return this.accordion._openCloseAllActions.subscribe(expanded=>{this.disabled||(this.expanded=expanded)})}}return CdkAccordionItem.ɵfac=function(t){return new(t||CdkAccordionItem)(core.Tb(CDK_ACCORDION,12),core.Tb(core.i),core.Tb(collections.d))},CdkAccordionItem.ɵdir=core.Ob({type:CdkAccordionItem,selectors:[[\"cdk-accordion-item\"],[\"\",\"cdkAccordionItem\",\"\"]],inputs:{expanded:\"expanded\",disabled:\"disabled\"},outputs:{closed:\"closed\",opened:\"opened\",destroyed:\"destroyed\",expandedChange:\"expandedChange\"},exportAs:[\"cdkAccordionItem\"],features:[core.Fb([{provide:CDK_ACCORDION,useValue:void 0}])]}),CdkAccordionItem})(),accordion_CdkAccordionModule=(()=>{class CdkAccordionModule{}return CdkAccordionModule.ɵmod=core.Rb({type:CdkAccordionModule}),CdkAccordionModule.ɵinj=core.Qb({factory:function(t){return new(t||CdkAccordionModule)}}),CdkAccordionModule})();var portal=__webpack_require__(\"+rOU\"),common=__webpack_require__(\"ofXK\"),fesm2015_core=__webpack_require__(\"FKr1\"),a11y=__webpack_require__(\"u47x\"),distinctUntilChanged=__webpack_require__(\"/uUt\"),startWith=__webpack_require__(\"JX91\"),filter=__webpack_require__(\"pLZG\"),take=__webpack_require__(\"IzEk\"),keycodes=__webpack_require__(\"FtGj\"),animations=__webpack_require__(\"R1ws\"),empty=__webpack_require__(\"EY2u\"),merge=__webpack_require__(\"VRyK\"),fesm2015_animations=__webpack_require__(\"R0Ic\");const _c0=[\"body\"];function MatExpansionPanel_ng_template_5_Template(rf,ctx){}const _c1=[[[\"mat-expansion-panel-header\"]],\"*\",[[\"mat-action-row\"]]],_c2=[\"mat-expansion-panel-header\",\"*\",\"mat-action-row\"];function MatExpansionPanelHeader_span_4_Template(rf,ctx){if(1&rf&&core.Ub(0,\"span\",2),2&rf){const ctx_r0=core.nc();core.tc(\"@indicatorRotate\",ctx_r0._getExpandedState())}}const _c3=[[[\"mat-panel-title\"]],[[\"mat-panel-description\"]],\"*\"],_c4=[\"mat-panel-title\",\"mat-panel-description\",\"*\"],MAT_ACCORDION=new core.u(\"MAT_ACCORDION\"),matExpansionAnimations={indicatorRotate:Object(fesm2015_animations.n)(\"indicatorRotate\",[Object(fesm2015_animations.k)(\"collapsed, void\",Object(fesm2015_animations.l)({transform:\"rotate(0deg)\"})),Object(fesm2015_animations.k)(\"expanded\",Object(fesm2015_animations.l)({transform:\"rotate(180deg)\"})),Object(fesm2015_animations.m)(\"expanded <=> collapsed, void => collapsed\",Object(fesm2015_animations.e)(\"225ms cubic-bezier(0.4,0.0,0.2,1)\"))]),bodyExpansion:Object(fesm2015_animations.n)(\"bodyExpansion\",[Object(fesm2015_animations.k)(\"collapsed, void\",Object(fesm2015_animations.l)({height:\"0px\",visibility:\"hidden\"})),Object(fesm2015_animations.k)(\"expanded\",Object(fesm2015_animations.l)({height:\"*\",visibility:\"visible\"})),Object(fesm2015_animations.m)(\"expanded <=> collapsed, void => collapsed\",Object(fesm2015_animations.e)(\"225ms cubic-bezier(0.4,0.0,0.2,1)\"))])};let expansion_MatExpansionPanelContent=(()=>{class MatExpansionPanelContent{constructor(_template){this._template=_template}}return MatExpansionPanelContent.ɵfac=function(t){return new(t||MatExpansionPanelContent)(core.Tb(core.R))},MatExpansionPanelContent.ɵdir=core.Ob({type:MatExpansionPanelContent,selectors:[[\"ng-template\",\"matExpansionPanelContent\",\"\"]]}),MatExpansionPanelContent})(),uniqueId=0;const MAT_EXPANSION_PANEL_DEFAULT_OPTIONS=new core.u(\"MAT_EXPANSION_PANEL_DEFAULT_OPTIONS\");let expansion_MatExpansionPanel=(()=>{class MatExpansionPanel extends accordion_CdkAccordionItem{constructor(accordion,_changeDetectorRef,_uniqueSelectionDispatcher,_viewContainerRef,_document,_animationMode,defaultOptions){super(accordion,_changeDetectorRef,_uniqueSelectionDispatcher),this._viewContainerRef=_viewContainerRef,this._animationMode=_animationMode,this._hideToggle=!1,this.afterExpand=new core.p,this.afterCollapse=new core.p,this._inputChanges=new Subject.a,this._headerId=\"mat-expansion-panel-header-\"+uniqueId++,this._bodyAnimationDone=new Subject.a,this.accordion=accordion,this._document=_document,this._bodyAnimationDone.pipe(Object(distinctUntilChanged.a)((x,y)=>x.fromState===y.fromState&&x.toState===y.toState)).subscribe(event=>{\"void\"!==event.fromState&&(\"expanded\"===event.toState?this.afterExpand.emit():\"collapsed\"===event.toState&&this.afterCollapse.emit())}),defaultOptions&&(this.hideToggle=defaultOptions.hideToggle)}get hideToggle(){return this._hideToggle||this.accordion&&this.accordion.hideToggle}set hideToggle(value){this._hideToggle=Object(coercion.c)(value)}get togglePosition(){return this._togglePosition||this.accordion&&this.accordion.togglePosition}set togglePosition(value){this._togglePosition=value}_hasSpacing(){return!!this.accordion&&this.expanded&&\"default\"===this.accordion.displayMode}_getExpandedState(){return this.expanded?\"expanded\":\"collapsed\"}toggle(){this.expanded=!this.expanded}close(){this.expanded=!1}open(){this.expanded=!0}ngAfterContentInit(){this._lazyContent&&this.opened.pipe(Object(startWith.a)(null),Object(filter.a)(()=>this.expanded&&!this._portal),Object(take.a)(1)).subscribe(()=>{this._portal=new portal.g(this._lazyContent._template,this._viewContainerRef)})}ngOnChanges(changes){this._inputChanges.next(changes)}ngOnDestroy(){super.ngOnDestroy(),this._bodyAnimationDone.complete(),this._inputChanges.complete()}_containsFocus(){if(this._body){const focusedElement=this._document.activeElement,bodyElement=this._body.nativeElement;return focusedElement===bodyElement||bodyElement.contains(focusedElement)}return!1}}return MatExpansionPanel.ɵfac=function(t){return new(t||MatExpansionPanel)(core.Tb(MAT_ACCORDION,12),core.Tb(core.i),core.Tb(collections.d),core.Tb(core.V),core.Tb(common.d),core.Tb(animations.a,8),core.Tb(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS,8))},MatExpansionPanel.ɵcmp=core.Nb({type:MatExpansionPanel,selectors:[[\"mat-expansion-panel\"]],contentQueries:function(rf,ctx,dirIndex){if(1&rf&&core.Mb(dirIndex,expansion_MatExpansionPanelContent,!0),2&rf){let _t;core.Fc(_t=core.kc())&&(ctx._lazyContent=_t.first)}},viewQuery:function(rf,ctx){if(1&rf&&core.Zc(_c0,!0),2&rf){let _t;core.Fc(_t=core.kc())&&(ctx._body=_t.first)}},hostAttrs:[1,\"mat-expansion-panel\"],hostVars:6,hostBindings:function(rf,ctx){2&rf&&core.Lb(\"mat-expanded\",ctx.expanded)(\"_mat-animation-noopable\",\"NoopAnimations\"===ctx._animationMode)(\"mat-expansion-panel-spacing\",ctx._hasSpacing())},inputs:{disabled:\"disabled\",expanded:\"expanded\",hideToggle:\"hideToggle\",togglePosition:\"togglePosition\"},outputs:{opened:\"opened\",closed:\"closed\",expandedChange:\"expandedChange\",afterExpand:\"afterExpand\",afterCollapse:\"afterCollapse\"},exportAs:[\"matExpansionPanel\"],features:[core.Fb([{provide:MAT_ACCORDION,useValue:void 0}]),core.Db,core.Eb],ngContentSelectors:_c2,decls:7,vars:4,consts:[[\"role\",\"region\",1,\"mat-expansion-panel-content\",3,\"id\"],[\"body\",\"\"],[1,\"mat-expansion-panel-body\"],[3,\"cdkPortalOutlet\"]],template:function(rf,ctx){1&rf&&(core.sc(_c1),core.rc(0),core.Zb(1,\"div\",0,1),core.jc(\"@bodyExpansion.done\",function($event){return ctx._bodyAnimationDone.next($event)}),core.Zb(3,\"div\",2),core.rc(4,1),core.Sc(5,MatExpansionPanel_ng_template_5_Template,0,0,\"ng-template\",3),core.Yb(),core.rc(6,2),core.Yb()),2&rf&&(core.Gb(1),core.tc(\"@bodyExpansion\",ctx._getExpandedState())(\"id\",ctx.id),core.Hb(\"aria-labelledby\",ctx._headerId),core.Gb(4),core.tc(\"cdkPortalOutlet\",ctx._portal))},directives:[portal.c],styles:[\".mat-expansion-panel{box-sizing:content-box;display:block;margin:0;border-radius:4px;overflow:hidden;transition:margin 225ms cubic-bezier(0.4, 0, 0.2, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);position:relative}.mat-accordion .mat-expansion-panel:not(.mat-expanded),.mat-accordion .mat-expansion-panel:not(.mat-expansion-panel-spacing){border-radius:0}.mat-accordion .mat-expansion-panel:first-of-type{border-top-right-radius:4px;border-top-left-radius:4px}.mat-accordion .mat-expansion-panel:last-of-type{border-bottom-right-radius:4px;border-bottom-left-radius:4px}.cdk-high-contrast-active .mat-expansion-panel{outline:solid 1px}.mat-expansion-panel.ng-animate-disabled,.ng-animate-disabled .mat-expansion-panel,.mat-expansion-panel._mat-animation-noopable{transition:none}.mat-expansion-panel-content{display:flex;flex-direction:column;overflow:visible}.mat-expansion-panel-body{padding:0 24px 16px}.mat-expansion-panel-spacing{margin:16px 0}.mat-accordion>.mat-expansion-panel-spacing:first-child,.mat-accordion>*:first-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-top:0}.mat-accordion>.mat-expansion-panel-spacing:last-child,.mat-accordion>*:last-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-bottom:0}.mat-action-row{border-top-style:solid;border-top-width:1px;display:flex;flex-direction:row;justify-content:flex-end;padding:16px 8px 16px 24px}.mat-action-row button.mat-button-base,.mat-action-row button.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-action-row button.mat-button-base,[dir=rtl] .mat-action-row button.mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"],encapsulation:2,data:{animation:[matExpansionAnimations.bodyExpansion]},changeDetection:0}),MatExpansionPanel})(),expansion_MatExpansionPanelActionRow=(()=>{class MatExpansionPanelActionRow{}return MatExpansionPanelActionRow.ɵfac=function(t){return new(t||MatExpansionPanelActionRow)},MatExpansionPanelActionRow.ɵdir=core.Ob({type:MatExpansionPanelActionRow,selectors:[[\"mat-action-row\"]],hostAttrs:[1,\"mat-action-row\"]}),MatExpansionPanelActionRow})(),expansion_MatExpansionPanelHeader=(()=>{class MatExpansionPanelHeader{constructor(panel,_element,_focusMonitor,_changeDetectorRef,defaultOptions,_animationMode){this.panel=panel,this._element=_element,this._focusMonitor=_focusMonitor,this._changeDetectorRef=_changeDetectorRef,this._animationMode=_animationMode,this._parentChangeSubscription=Subscription.a.EMPTY;const accordionHideToggleChange=panel.accordion?panel.accordion._stateChanges.pipe(Object(filter.a)(changes=>!(!changes.hideToggle&&!changes.togglePosition))):empty.a;this._parentChangeSubscription=Object(merge.a)(panel.opened,panel.closed,accordionHideToggleChange,panel._inputChanges.pipe(Object(filter.a)(changes=>!!(changes.hideToggle||changes.disabled||changes.togglePosition)))).subscribe(()=>this._changeDetectorRef.markForCheck()),panel.closed.pipe(Object(filter.a)(()=>panel._containsFocus())).subscribe(()=>_focusMonitor.focusVia(_element,\"program\")),defaultOptions&&(this.expandedHeight=defaultOptions.expandedHeight,this.collapsedHeight=defaultOptions.collapsedHeight)}get disabled(){return this.panel.disabled}_toggle(){this.disabled||this.panel.toggle()}_isExpanded(){return this.panel.expanded}_getExpandedState(){return this.panel._getExpandedState()}_getPanelId(){return this.panel.id}_getTogglePosition(){return this.panel.togglePosition}_showToggle(){return!this.panel.hideToggle&&!this.panel.disabled}_getHeaderHeight(){const isExpanded=this._isExpanded();return isExpanded&&this.expandedHeight?this.expandedHeight:!isExpanded&&this.collapsedHeight?this.collapsedHeight:null}_keydown(event){switch(event.keyCode){case keycodes.o:case keycodes.g:Object(keycodes.t)(event)||(event.preventDefault(),this._toggle());break;default:return void(this.panel.accordion&&this.panel.accordion._handleHeaderKeydown(event))}}focus(origin,options){origin?this._focusMonitor.focusVia(this._element,origin,options):this._element.nativeElement.focus(options)}ngAfterViewInit(){this._focusMonitor.monitor(this._element).subscribe(origin=>{origin&&this.panel.accordion&&this.panel.accordion._handleHeaderFocus(this)})}ngOnDestroy(){this._parentChangeSubscription.unsubscribe(),this._focusMonitor.stopMonitoring(this._element)}}return MatExpansionPanelHeader.ɵfac=function(t){return new(t||MatExpansionPanelHeader)(core.Tb(expansion_MatExpansionPanel,1),core.Tb(core.m),core.Tb(a11y.h),core.Tb(core.i),core.Tb(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS,8),core.Tb(animations.a,8))},MatExpansionPanelHeader.ɵcmp=core.Nb({type:MatExpansionPanelHeader,selectors:[[\"mat-expansion-panel-header\"]],hostAttrs:[\"role\",\"button\",1,\"mat-expansion-panel-header\",\"mat-focus-indicator\"],hostVars:15,hostBindings:function(rf,ctx){1&rf&&core.jc(\"click\",function(){return ctx._toggle()})(\"keydown\",function($event){return ctx._keydown($event)}),2&rf&&(core.Hb(\"id\",ctx.panel._headerId)(\"tabindex\",ctx.disabled?-1:0)(\"aria-controls\",ctx._getPanelId())(\"aria-expanded\",ctx._isExpanded())(\"aria-disabled\",ctx.panel.disabled),core.Pc(\"height\",ctx._getHeaderHeight()),core.Lb(\"mat-expanded\",ctx._isExpanded())(\"mat-expansion-toggle-indicator-after\",\"after\"===ctx._getTogglePosition())(\"mat-expansion-toggle-indicator-before\",\"before\"===ctx._getTogglePosition())(\"_mat-animation-noopable\",\"NoopAnimations\"===ctx._animationMode))},inputs:{expandedHeight:\"expandedHeight\",collapsedHeight:\"collapsedHeight\"},ngContentSelectors:_c4,decls:5,vars:1,consts:[[1,\"mat-content\"],[\"class\",\"mat-expansion-indicator\",4,\"ngIf\"],[1,\"mat-expansion-indicator\"]],template:function(rf,ctx){1&rf&&(core.sc(_c3),core.Zb(0,\"span\",0),core.rc(1),core.rc(2,1),core.rc(3,2),core.Yb(),core.Sc(4,MatExpansionPanelHeader_span_4_Template,1,1,\"span\",1)),2&rf&&(core.Gb(4),core.tc(\"ngIf\",ctx._showToggle()))},directives:[common.n],styles:['.mat-expansion-panel-header{display:flex;flex-direction:row;align-items:center;padding:0 24px;border-radius:inherit;transition:height 225ms cubic-bezier(0.4, 0, 0.2, 1)}.mat-expansion-panel-header._mat-animation-noopable{transition:none}.mat-expansion-panel-header:focus,.mat-expansion-panel-header:hover{outline:none}.mat-expansion-panel-header.mat-expanded:focus,.mat-expansion-panel-header.mat-expanded:hover{background:inherit}.mat-expansion-panel-header:not([aria-disabled=true]){cursor:pointer}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before{flex-direction:row-reverse}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 16px 0 0}[dir=rtl] .mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 0 0 16px}.mat-content{display:flex;flex:1;flex-direction:row;overflow:hidden}.mat-expansion-panel-header-title,.mat-expansion-panel-header-description{display:flex;flex-grow:1;margin-right:16px}[dir=rtl] .mat-expansion-panel-header-title,[dir=rtl] .mat-expansion-panel-header-description{margin-right:0;margin-left:16px}.mat-expansion-panel-header-description{flex-grow:2}.mat-expansion-indicator::after{border-style:solid;border-width:0 2px 2px 0;content:\"\";display:inline-block;padding:3px;transform:rotate(45deg);vertical-align:middle}.cdk-high-contrast-active .mat-expansion-panel .mat-expansion-panel-header.cdk-keyboard-focused:not([aria-disabled=true])::before,.cdk-high-contrast-active .mat-expansion-panel .mat-expansion-panel-header.cdk-program-focused:not([aria-disabled=true])::before,.cdk-high-contrast-active .mat-expansion-panel:not(.mat-expanded) .mat-expansion-panel-header:hover:not([aria-disabled=true])::before{top:0;left:0;right:0;bottom:0;position:absolute;box-sizing:border-box;pointer-events:none;border:3px solid;border-radius:4px;content:\"\"}\\n'],encapsulation:2,data:{animation:[matExpansionAnimations.indicatorRotate]},changeDetection:0}),MatExpansionPanelHeader})(),expansion_MatExpansionPanelDescription=(()=>{class MatExpansionPanelDescription{}return MatExpansionPanelDescription.ɵfac=function(t){return new(t||MatExpansionPanelDescription)},MatExpansionPanelDescription.ɵdir=core.Ob({type:MatExpansionPanelDescription,selectors:[[\"mat-panel-description\"]],hostAttrs:[1,\"mat-expansion-panel-header-description\"]}),MatExpansionPanelDescription})(),expansion_MatExpansionPanelTitle=(()=>{class MatExpansionPanelTitle{}return MatExpansionPanelTitle.ɵfac=function(t){return new(t||MatExpansionPanelTitle)},MatExpansionPanelTitle.ɵdir=core.Ob({type:MatExpansionPanelTitle,selectors:[[\"mat-panel-title\"]],hostAttrs:[1,\"mat-expansion-panel-header-title\"]}),MatExpansionPanelTitle})(),expansion_MatAccordion=(()=>{class MatAccordion extends accordion_CdkAccordion{constructor(){super(...arguments),this._ownHeaders=new core.J,this._hideToggle=!1,this.displayMode=\"default\",this.togglePosition=\"after\"}get hideToggle(){return this._hideToggle}set hideToggle(show){this._hideToggle=Object(coercion.c)(show)}ngAfterContentInit(){this._headers.changes.pipe(Object(startWith.a)(this._headers)).subscribe(headers=>{this._ownHeaders.reset(headers.filter(header=>header.panel.accordion===this)),this._ownHeaders.notifyOnChanges()}),this._keyManager=new a11y.g(this._ownHeaders).withWrap().withHomeAndEnd()}_handleHeaderKeydown(event){this._keyManager.onKeydown(event)}_handleHeaderFocus(header){this._keyManager.updateActiveItem(header)}ngOnDestroy(){super.ngOnDestroy(),this._ownHeaders.destroy()}}return MatAccordion.ɵfac=function(t){return ɵMatAccordion_BaseFactory(t||MatAccordion)},MatAccordion.ɵdir=core.Ob({type:MatAccordion,selectors:[[\"mat-accordion\"]],contentQueries:function(rf,ctx,dirIndex){if(1&rf&&core.Mb(dirIndex,expansion_MatExpansionPanelHeader,!0),2&rf){let _t;core.Fc(_t=core.kc())&&(ctx._headers=_t)}},hostAttrs:[1,\"mat-accordion\"],hostVars:2,hostBindings:function(rf,ctx){2&rf&&core.Lb(\"mat-accordion-multi\",ctx.multi)},inputs:{multi:\"multi\",displayMode:\"displayMode\",togglePosition:\"togglePosition\",hideToggle:\"hideToggle\"},exportAs:[\"matAccordion\"],features:[core.Fb([{provide:MAT_ACCORDION,useExisting:MatAccordion}]),core.Db]}),MatAccordion})();const ɵMatAccordion_BaseFactory=core.bc(expansion_MatAccordion);let expansion_MatExpansionModule=(()=>{class MatExpansionModule{}return MatExpansionModule.ɵmod=core.Rb({type:MatExpansionModule}),MatExpansionModule.ɵinj=core.Qb({factory:function(t){return new(t||MatExpansionModule)},imports:[[common.c,fesm2015_core.j,accordion_CdkAccordionModule,portal.f]]}),MatExpansionModule})()}}]);","name":"9-es2015.489a2c72330d4db5ef0e.js","input":"(window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || []).push([[9],{\n\n/***/ \"7EHt\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, \"a\", function() { return /* binding */ expansion_MatAccordion; });\n__webpack_require__.d(__webpack_exports__, \"b\", function() { return /* binding */ expansion_MatExpansionModule; });\n__webpack_require__.d(__webpack_exports__, \"c\", function() { return /* binding */ expansion_MatExpansionPanel; });\n__webpack_require__.d(__webpack_exports__, \"d\", function() { return /* binding */ expansion_MatExpansionPanelActionRow; });\n__webpack_require__.d(__webpack_exports__, \"e\", function() { return /* binding */ expansion_MatExpansionPanelDescription; });\n__webpack_require__.d(__webpack_exports__, \"f\", function() { return /* binding */ expansion_MatExpansionPanelHeader; });\n__webpack_require__.d(__webpack_exports__, \"g\", function() { return /* binding */ expansion_MatExpansionPanelTitle; });\n\n// UNUSED EXPORTS: EXPANSION_PANEL_ANIMATION_TIMING, MAT_ACCORDION, MAT_EXPANSION_PANEL_DEFAULT_OPTIONS, MatExpansionPanelContent, matExpansionAnimations, ɵ0\n\n// EXTERNAL MODULE: ./node_modules/@angular/core/__ivy_ngcc__/fesm2015/core.js\nvar core = __webpack_require__(\"fXoL\");\n\n// EXTERNAL MODULE: ./node_modules/@angular/cdk/fesm2015/coercion.js\nvar coercion = __webpack_require__(\"8LU1\");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm2015/internal/Subject.js\nvar Subject = __webpack_require__(\"XNiG\");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm2015/internal/Subscription.js + 1 modules\nvar Subscription = __webpack_require__(\"quSY\");\n\n// EXTERNAL MODULE: ./node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/collections.js\nvar collections = __webpack_require__(\"0EQZ\");\n\n// CONCATENATED MODULE: ./node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/accordion.js\n\n\n\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Used to generate unique ID for each accordion. */\n\n\nlet nextId = 0;\n/**\n * Injection token that can be used to reference instances of `CdkAccordion`. It serves\n * as alternative token to the actual `CdkAccordion` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_ACCORDION = /*@__PURE__*/ new core[\"u\" /* InjectionToken */]('CdkAccordion');\nlet accordion_CdkAccordion = /*@__PURE__*/ (() => {\n    class CdkAccordion {\n        constructor() {\n            /** Emits when the state of the accordion changes */\n            this._stateChanges = new Subject[\"a\" /* Subject */]();\n            /** Stream that emits true/false when openAll/closeAll is triggered. */\n            this._openCloseAllActions = new Subject[\"a\" /* Subject */]();\n            /** A readonly id value to use for unique selection coordination. */\n            this.id = `cdk-accordion-${nextId++}`;\n            this._multi = false;\n        }\n        /** Whether the accordion should allow multiple expanded accordion items simultaneously. */\n        get multi() { return this._multi; }\n        set multi(multi) { this._multi = Object(coercion[\"c\" /* coerceBooleanProperty */])(multi); }\n        /** Opens all enabled accordion items in an accordion where multi is enabled. */\n        openAll() {\n            if (this._multi) {\n                this._openCloseAllActions.next(true);\n            }\n        }\n        /** Closes all enabled accordion items in an accordion where multi is enabled. */\n        closeAll() {\n            this._openCloseAllActions.next(false);\n        }\n        ngOnChanges(changes) {\n            this._stateChanges.next(changes);\n        }\n        ngOnDestroy() {\n            this._stateChanges.complete();\n            this._openCloseAllActions.complete();\n        }\n    }\n    CdkAccordion.ɵfac = function CdkAccordion_Factory(t) { return new (t || CdkAccordion)(); };\n    CdkAccordion.ɵdir = /*@__PURE__*/ core[\"Ob\" /* ɵɵdefineDirective */]({ type: CdkAccordion, selectors: [[\"cdk-accordion\"], [\"\", \"cdkAccordion\", \"\"]], inputs: { multi: \"multi\" }, exportAs: [\"cdkAccordion\"], features: [/*@__PURE__*/ core[\"Fb\" /* ɵɵProvidersFeature */]([{ provide: CDK_ACCORDION, useExisting: CdkAccordion }]), core[\"Eb\" /* ɵɵNgOnChangesFeature */]] });\n    return CdkAccordion;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Used to generate unique ID for each accordion item. */\nlet nextId$1 = 0;\nconst ɵ0 = undefined;\nlet accordion_CdkAccordionItem = /*@__PURE__*/ (() => {\n    class CdkAccordionItem {\n        constructor(accordion, _changeDetectorRef, _expansionDispatcher) {\n            this.accordion = accordion;\n            this._changeDetectorRef = _changeDetectorRef;\n            this._expansionDispatcher = _expansionDispatcher;\n            /** Subscription to openAll/closeAll events. */\n            this._openCloseAllSubscription = Subscription[\"a\" /* Subscription */].EMPTY;\n            /** Event emitted every time the AccordionItem is closed. */\n            this.closed = new core[\"p\" /* EventEmitter */]();\n            /** Event emitted every time the AccordionItem is opened. */\n            this.opened = new core[\"p\" /* EventEmitter */]();\n            /** Event emitted when the AccordionItem is destroyed. */\n            this.destroyed = new core[\"p\" /* EventEmitter */]();\n            /**\n             * Emits whenever the expanded state of the accordion changes.\n             * Primarily used to facilitate two-way binding.\n             * @docs-private\n             */\n            this.expandedChange = new core[\"p\" /* EventEmitter */]();\n            /** The unique AccordionItem id. */\n            this.id = `cdk-accordion-child-${nextId$1++}`;\n            this._expanded = false;\n            this._disabled = false;\n            /** Unregister function for _expansionDispatcher. */\n            this._removeUniqueSelectionListener = () => { };\n            this._removeUniqueSelectionListener =\n                _expansionDispatcher.listen((id, accordionId) => {\n                    if (this.accordion && !this.accordion.multi &&\n                        this.accordion.id === accordionId && this.id !== id) {\n                        this.expanded = false;\n                    }\n                });\n            // When an accordion item is hosted in an accordion, subscribe to open/close events.\n            if (this.accordion) {\n                this._openCloseAllSubscription = this._subscribeToOpenCloseAllActions();\n            }\n        }\n        /** Whether the AccordionItem is expanded. */\n        get expanded() { return this._expanded; }\n        set expanded(expanded) {\n            expanded = Object(coercion[\"c\" /* coerceBooleanProperty */])(expanded);\n            // Only emit events and update the internal value if the value changes.\n            if (this._expanded !== expanded) {\n                this._expanded = expanded;\n                this.expandedChange.emit(expanded);\n                if (expanded) {\n                    this.opened.emit();\n                    /**\n                     * In the unique selection dispatcher, the id parameter is the id of the CdkAccordionItem,\n                     * the name value is the id of the accordion.\n                     */\n                    const accordionId = this.accordion ? this.accordion.id : this.id;\n                    this._expansionDispatcher.notify(this.id, accordionId);\n                }\n                else {\n                    this.closed.emit();\n                }\n                // Ensures that the animation will run when the value is set outside of an `@Input`.\n                // This includes cases like the open, close and toggle methods.\n                this._changeDetectorRef.markForCheck();\n            }\n        }\n        /** Whether the AccordionItem is disabled. */\n        get disabled() { return this._disabled; }\n        set disabled(disabled) { this._disabled = Object(coercion[\"c\" /* coerceBooleanProperty */])(disabled); }\n        /** Emits an event for the accordion item being destroyed. */\n        ngOnDestroy() {\n            this.opened.complete();\n            this.closed.complete();\n            this.destroyed.emit();\n            this.destroyed.complete();\n            this._removeUniqueSelectionListener();\n            this._openCloseAllSubscription.unsubscribe();\n        }\n        /** Toggles the expanded state of the accordion item. */\n        toggle() {\n            if (!this.disabled) {\n                this.expanded = !this.expanded;\n            }\n        }\n        /** Sets the expanded state of the accordion item to false. */\n        close() {\n            if (!this.disabled) {\n                this.expanded = false;\n            }\n        }\n        /** Sets the expanded state of the accordion item to true. */\n        open() {\n            if (!this.disabled) {\n                this.expanded = true;\n            }\n        }\n        _subscribeToOpenCloseAllActions() {\n            return this.accordion._openCloseAllActions.subscribe(expanded => {\n                // Only change expanded state if item is enabled\n                if (!this.disabled) {\n                    this.expanded = expanded;\n                }\n            });\n        }\n    }\n    CdkAccordionItem.ɵfac = function CdkAccordionItem_Factory(t) { return new (t || CdkAccordionItem)(core[\"Tb\" /* ɵɵdirectiveInject */](CDK_ACCORDION, 12), core[\"Tb\" /* ɵɵdirectiveInject */](core[\"i\" /* ChangeDetectorRef */]), core[\"Tb\" /* ɵɵdirectiveInject */](collections[\"d\" /* UniqueSelectionDispatcher */])); };\n    CdkAccordionItem.ɵdir = /*@__PURE__*/ core[\"Ob\" /* ɵɵdefineDirective */]({ type: CdkAccordionItem, selectors: [[\"cdk-accordion-item\"], [\"\", \"cdkAccordionItem\", \"\"]], inputs: { expanded: \"expanded\", disabled: \"disabled\" }, outputs: { closed: \"closed\", opened: \"opened\", destroyed: \"destroyed\", expandedChange: \"expandedChange\" }, exportAs: [\"cdkAccordionItem\"], features: [/*@__PURE__*/ core[\"Fb\" /* ɵɵProvidersFeature */]([\n                // Provide `CDK_ACCORDION` as undefined to prevent nested accordion items from\n                // registering to the same accordion.\n                { provide: CDK_ACCORDION, useValue: ɵ0 },\n            ])] });\n    return CdkAccordionItem;\n})();\nlet accordion_CdkAccordionModule = /*@__PURE__*/ (() => {\n    class CdkAccordionModule {\n    }\n    CdkAccordionModule.ɵmod = /*@__PURE__*/ core[\"Rb\" /* ɵɵdefineNgModule */]({ type: CdkAccordionModule });\n    CdkAccordionModule.ɵinj = /*@__PURE__*/ core[\"Qb\" /* ɵɵdefineInjector */]({ factory: function CdkAccordionModule_Factory(t) { return new (t || CdkAccordionModule)(); } });\n    return CdkAccordionModule;\n})();\n/*@__PURE__*/ (function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && core[\"Lc\" /* ɵɵsetNgModuleScope */](accordion_CdkAccordionModule, { declarations: [accordion_CdkAccordion, accordion_CdkAccordionItem], exports: [accordion_CdkAccordion, accordion_CdkAccordionItem] }); })();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Generated bundle index. Do not edit.\n */\n\n//# sourceMappingURL=accordion.js.map\n\n// EXTERNAL MODULE: ./node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/portal.js\nvar portal = __webpack_require__(\"+rOU\");\n\n// EXTERNAL MODULE: ./node_modules/@angular/common/__ivy_ngcc__/fesm2015/common.js\nvar common = __webpack_require__(\"ofXK\");\n\n// EXTERNAL MODULE: ./node_modules/@angular/material/__ivy_ngcc__/fesm2015/core.js + 1 modules\nvar fesm2015_core = __webpack_require__(\"FKr1\");\n\n// EXTERNAL MODULE: ./node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/a11y.js\nvar a11y = __webpack_require__(\"u47x\");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm2015/internal/operators/distinctUntilChanged.js\nvar distinctUntilChanged = __webpack_require__(\"/uUt\");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm2015/internal/operators/startWith.js\nvar startWith = __webpack_require__(\"JX91\");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm2015/internal/operators/filter.js\nvar filter = __webpack_require__(\"pLZG\");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm2015/internal/operators/take.js\nvar take = __webpack_require__(\"IzEk\");\n\n// EXTERNAL MODULE: ./node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/keycodes.js\nvar keycodes = __webpack_require__(\"FtGj\");\n\n// EXTERNAL MODULE: ./node_modules/@angular/platform-browser/__ivy_ngcc__/fesm2015/animations.js + 1 modules\nvar animations = __webpack_require__(\"R1ws\");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm2015/internal/observable/empty.js\nvar empty = __webpack_require__(\"EY2u\");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm2015/internal/observable/merge.js\nvar merge = __webpack_require__(\"VRyK\");\n\n// EXTERNAL MODULE: ./node_modules/@angular/animations/__ivy_ngcc__/fesm2015/animations.js\nvar fesm2015_animations = __webpack_require__(\"R0Ic\");\n\n// CONCATENATED MODULE: ./node_modules/@angular/material/__ivy_ngcc__/fesm2015/expansion.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\n\n\n\n\n\nconst _c0 = [\"body\"];\nfunction MatExpansionPanel_ng_template_5_Template(rf, ctx) { }\nconst _c1 = [[[\"mat-expansion-panel-header\"]], \"*\", [[\"mat-action-row\"]]];\nconst _c2 = [\"mat-expansion-panel-header\", \"*\", \"mat-action-row\"];\nfunction MatExpansionPanelHeader_span_4_Template(rf, ctx) {\n    if (rf & 1) {\n        core[\"Ub\" /* ɵɵelement */](0, \"span\", 2);\n    }\n    if (rf & 2) {\n        const ctx_r0 = core[\"nc\" /* ɵɵnextContext */]();\n        core[\"tc\" /* ɵɵproperty */](\"@indicatorRotate\", ctx_r0._getExpandedState());\n    }\n}\nconst _c3 = [[[\"mat-panel-title\"]], [[\"mat-panel-description\"]], \"*\"];\nconst _c4 = [\"mat-panel-title\", \"mat-panel-description\", \"*\"];\nconst MAT_ACCORDION = /*@__PURE__*/ new core[\"u\" /* InjectionToken */]('MAT_ACCORDION');\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Time and timing curve for expansion panel animations. */\n// Note: Keep this in sync with the Sass variable for the panel header animation.\nconst EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\nconst matExpansionAnimations = {\n    /** Animation that rotates the indicator arrow. */\n    indicatorRotate: /*@__PURE__*/ Object(fesm2015_animations[\"n\" /* trigger */])('indicatorRotate', [\n        /*@__PURE__*/ Object(fesm2015_animations[\"k\" /* state */])('collapsed, void', /*@__PURE__*/ Object(fesm2015_animations[\"l\" /* style */])({ transform: 'rotate(0deg)' })),\n        /*@__PURE__*/ Object(fesm2015_animations[\"k\" /* state */])('expanded', /*@__PURE__*/ Object(fesm2015_animations[\"l\" /* style */])({ transform: 'rotate(180deg)' })),\n        /*@__PURE__*/ Object(fesm2015_animations[\"m\" /* transition */])('expanded <=> collapsed, void => collapsed', /*@__PURE__*/ Object(fesm2015_animations[\"e\" /* animate */])(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ]),\n    /** Animation that expands and collapses the panel content. */\n    bodyExpansion: /*@__PURE__*/ Object(fesm2015_animations[\"n\" /* trigger */])('bodyExpansion', [\n        /*@__PURE__*/ Object(fesm2015_animations[\"k\" /* state */])('collapsed, void', /*@__PURE__*/ Object(fesm2015_animations[\"l\" /* style */])({ height: '0px', visibility: 'hidden' })),\n        /*@__PURE__*/ Object(fesm2015_animations[\"k\" /* state */])('expanded', /*@__PURE__*/ Object(fesm2015_animations[\"l\" /* style */])({ height: '*', visibility: 'visible' })),\n        /*@__PURE__*/ Object(fesm2015_animations[\"m\" /* transition */])('expanded <=> collapsed, void => collapsed', /*@__PURE__*/ Object(fesm2015_animations[\"e\" /* animate */])(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ])\n};\nlet expansion_MatExpansionPanelContent = /*@__PURE__*/ (() => {\n    class MatExpansionPanelContent {\n        constructor(_template) {\n            this._template = _template;\n        }\n    }\n    MatExpansionPanelContent.ɵfac = function MatExpansionPanelContent_Factory(t) { return new (t || MatExpansionPanelContent)(core[\"Tb\" /* ɵɵdirectiveInject */](core[\"R\" /* TemplateRef */])); };\n    MatExpansionPanelContent.ɵdir = /*@__PURE__*/ core[\"Ob\" /* ɵɵdefineDirective */]({ type: MatExpansionPanelContent, selectors: [[\"ng-template\", \"matExpansionPanelContent\", \"\"]] });\n    return MatExpansionPanelContent;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n/**\n * Injection token that can be used to configure the defalt\n * options for the expansion panel component.\n */\nconst MAT_EXPANSION_PANEL_DEFAULT_OPTIONS = /*@__PURE__*/ new core[\"u\" /* InjectionToken */]('MAT_EXPANSION_PANEL_DEFAULT_OPTIONS');\nconst expansion_0 = undefined;\nlet expansion_MatExpansionPanel = /*@__PURE__*/ (() => {\n    class MatExpansionPanel extends accordion_CdkAccordionItem {\n        constructor(accordion, _changeDetectorRef, _uniqueSelectionDispatcher, _viewContainerRef, _document, _animationMode, defaultOptions) {\n            super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n            this._viewContainerRef = _viewContainerRef;\n            this._animationMode = _animationMode;\n            this._hideToggle = false;\n            /** An event emitted after the body's expansion animation happens. */\n            this.afterExpand = new core[\"p\" /* EventEmitter */]();\n            /** An event emitted after the body's collapse animation happens. */\n            this.afterCollapse = new core[\"p\" /* EventEmitter */]();\n            /** Stream that emits for changes in `@Input` properties. */\n            this._inputChanges = new Subject[\"a\" /* Subject */]();\n            /** ID for the associated header element. Used for a11y labelling. */\n            this._headerId = `mat-expansion-panel-header-${uniqueId++}`;\n            /** Stream of body animation done events. */\n            this._bodyAnimationDone = new Subject[\"a\" /* Subject */]();\n            this.accordion = accordion;\n            this._document = _document;\n            // We need a Subject with distinctUntilChanged, because the `done` event\n            // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n            this._bodyAnimationDone.pipe(Object(distinctUntilChanged[\"a\" /* distinctUntilChanged */])((x, y) => {\n                return x.fromState === y.fromState && x.toState === y.toState;\n            })).subscribe(event => {\n                if (event.fromState !== 'void') {\n                    if (event.toState === 'expanded') {\n                        this.afterExpand.emit();\n                    }\n                    else if (event.toState === 'collapsed') {\n                        this.afterCollapse.emit();\n                    }\n                }\n            });\n            if (defaultOptions) {\n                this.hideToggle = defaultOptions.hideToggle;\n            }\n        }\n        /** Whether the toggle indicator should be hidden. */\n        get hideToggle() {\n            return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n        }\n        set hideToggle(value) {\n            this._hideToggle = Object(coercion[\"c\" /* coerceBooleanProperty */])(value);\n        }\n        /** The position of the expansion indicator. */\n        get togglePosition() {\n            return this._togglePosition || (this.accordion && this.accordion.togglePosition);\n        }\n        set togglePosition(value) {\n            this._togglePosition = value;\n        }\n        /** Determines whether the expansion panel should have spacing between it and its siblings. */\n        _hasSpacing() {\n            if (this.accordion) {\n                return this.expanded && this.accordion.displayMode === 'default';\n            }\n            return false;\n        }\n        /** Gets the expanded state string. */\n        _getExpandedState() {\n            return this.expanded ? 'expanded' : 'collapsed';\n        }\n        /** Toggles the expanded state of the expansion panel. */\n        toggle() {\n            this.expanded = !this.expanded;\n        }\n        /** Sets the expanded state of the expansion panel to false. */\n        close() {\n            this.expanded = false;\n        }\n        /** Sets the expanded state of the expansion panel to true. */\n        open() {\n            this.expanded = true;\n        }\n        ngAfterContentInit() {\n            if (this._lazyContent) {\n                // Render the content as soon as the panel becomes open.\n                this.opened.pipe(Object(startWith[\"a\" /* startWith */])(null), Object(filter[\"a\" /* filter */])(() => this.expanded && !this._portal), Object(take[\"a\" /* take */])(1)).subscribe(() => {\n                    this._portal = new portal[\"g\" /* TemplatePortal */](this._lazyContent._template, this._viewContainerRef);\n                });\n            }\n        }\n        ngOnChanges(changes) {\n            this._inputChanges.next(changes);\n        }\n        ngOnDestroy() {\n            super.ngOnDestroy();\n            this._bodyAnimationDone.complete();\n            this._inputChanges.complete();\n        }\n        /** Checks whether the expansion panel's content contains the currently-focused element. */\n        _containsFocus() {\n            if (this._body) {\n                const focusedElement = this._document.activeElement;\n                const bodyElement = this._body.nativeElement;\n                return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n            }\n            return false;\n        }\n    }\n    MatExpansionPanel.ɵfac = function MatExpansionPanel_Factory(t) { return new (t || MatExpansionPanel)(core[\"Tb\" /* ɵɵdirectiveInject */](MAT_ACCORDION, 12), core[\"Tb\" /* ɵɵdirectiveInject */](core[\"i\" /* ChangeDetectorRef */]), core[\"Tb\" /* ɵɵdirectiveInject */](collections[\"d\" /* UniqueSelectionDispatcher */]), core[\"Tb\" /* ɵɵdirectiveInject */](core[\"V\" /* ViewContainerRef */]), core[\"Tb\" /* ɵɵdirectiveInject */](common[\"d\" /* DOCUMENT */]), core[\"Tb\" /* ɵɵdirectiveInject */](animations[\"a\" /* ANIMATION_MODULE_TYPE */], 8), core[\"Tb\" /* ɵɵdirectiveInject */](MAT_EXPANSION_PANEL_DEFAULT_OPTIONS, 8)); };\n    MatExpansionPanel.ɵcmp = /*@__PURE__*/ core[\"Nb\" /* ɵɵdefineComponent */]({ type: MatExpansionPanel, selectors: [[\"mat-expansion-panel\"]], contentQueries: function MatExpansionPanel_ContentQueries(rf, ctx, dirIndex) {\n            if (rf & 1) {\n                core[\"Mb\" /* ɵɵcontentQuery */](dirIndex, expansion_MatExpansionPanelContent, true);\n            }\n            if (rf & 2) {\n                let _t;\n                core[\"Fc\" /* ɵɵqueryRefresh */](_t = core[\"kc\" /* ɵɵloadQuery */]()) && (ctx._lazyContent = _t.first);\n            }\n        }, viewQuery: function MatExpansionPanel_Query(rf, ctx) {\n            if (rf & 1) {\n                core[\"Zc\" /* ɵɵviewQuery */](_c0, true);\n            }\n            if (rf & 2) {\n                let _t;\n                core[\"Fc\" /* ɵɵqueryRefresh */](_t = core[\"kc\" /* ɵɵloadQuery */]()) && (ctx._body = _t.first);\n            }\n        }, hostAttrs: [1, \"mat-expansion-panel\"], hostVars: 6, hostBindings: function MatExpansionPanel_HostBindings(rf, ctx) {\n            if (rf & 2) {\n                core[\"Lb\" /* ɵɵclassProp */](\"mat-expanded\", ctx.expanded)(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\")(\"mat-expansion-panel-spacing\", ctx._hasSpacing());\n            }\n        }, inputs: { disabled: \"disabled\", expanded: \"expanded\", hideToggle: \"hideToggle\", togglePosition: \"togglePosition\" }, outputs: { opened: \"opened\", closed: \"closed\", expandedChange: \"expandedChange\", afterExpand: \"afterExpand\", afterCollapse: \"afterCollapse\" }, exportAs: [\"matExpansionPanel\"], features: [/*@__PURE__*/ core[\"Fb\" /* ɵɵProvidersFeature */]([\n                // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n                // to the same accordion.\n                { provide: MAT_ACCORDION, useValue: expansion_0 },\n            ]), core[\"Db\" /* ɵɵInheritDefinitionFeature */], core[\"Eb\" /* ɵɵNgOnChangesFeature */]], ngContentSelectors: _c2, decls: 7, vars: 4, consts: [[\"role\", \"region\", 1, \"mat-expansion-panel-content\", 3, \"id\"], [\"body\", \"\"], [1, \"mat-expansion-panel-body\"], [3, \"cdkPortalOutlet\"]], template: function MatExpansionPanel_Template(rf, ctx) {\n            if (rf & 1) {\n                core[\"sc\" /* ɵɵprojectionDef */](_c1);\n                core[\"rc\" /* ɵɵprojection */](0);\n                core[\"Zb\" /* ɵɵelementStart */](1, \"div\", 0, 1);\n                core[\"jc\" /* ɵɵlistener */](\"@bodyExpansion.done\", function MatExpansionPanel_Template_div_animation_bodyExpansion_done_1_listener($event) { return ctx._bodyAnimationDone.next($event); });\n                core[\"Zb\" /* ɵɵelementStart */](3, \"div\", 2);\n                core[\"rc\" /* ɵɵprojection */](4, 1);\n                core[\"Sc\" /* ɵɵtemplate */](5, MatExpansionPanel_ng_template_5_Template, 0, 0, \"ng-template\", 3);\n                core[\"Yb\" /* ɵɵelementEnd */]();\n                core[\"rc\" /* ɵɵprojection */](6, 2);\n                core[\"Yb\" /* ɵɵelementEnd */]();\n            }\n            if (rf & 2) {\n                core[\"Gb\" /* ɵɵadvance */](1);\n                core[\"tc\" /* ɵɵproperty */](\"@bodyExpansion\", ctx._getExpandedState())(\"id\", ctx.id);\n                core[\"Hb\" /* ɵɵattribute */](\"aria-labelledby\", ctx._headerId);\n                core[\"Gb\" /* ɵɵadvance */](4);\n                core[\"tc\" /* ɵɵproperty */](\"cdkPortalOutlet\", ctx._portal);\n            }\n        }, directives: [portal[\"c\" /* CdkPortalOutlet */]], styles: [\".mat-expansion-panel{box-sizing:content-box;display:block;margin:0;border-radius:4px;overflow:hidden;transition:margin 225ms cubic-bezier(0.4, 0, 0.2, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);position:relative}.mat-accordion .mat-expansion-panel:not(.mat-expanded),.mat-accordion .mat-expansion-panel:not(.mat-expansion-panel-spacing){border-radius:0}.mat-accordion .mat-expansion-panel:first-of-type{border-top-right-radius:4px;border-top-left-radius:4px}.mat-accordion .mat-expansion-panel:last-of-type{border-bottom-right-radius:4px;border-bottom-left-radius:4px}.cdk-high-contrast-active .mat-expansion-panel{outline:solid 1px}.mat-expansion-panel.ng-animate-disabled,.ng-animate-disabled .mat-expansion-panel,.mat-expansion-panel._mat-animation-noopable{transition:none}.mat-expansion-panel-content{display:flex;flex-direction:column;overflow:visible}.mat-expansion-panel-body{padding:0 24px 16px}.mat-expansion-panel-spacing{margin:16px 0}.mat-accordion>.mat-expansion-panel-spacing:first-child,.mat-accordion>*:first-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-top:0}.mat-accordion>.mat-expansion-panel-spacing:last-child,.mat-accordion>*:last-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-bottom:0}.mat-action-row{border-top-style:solid;border-top-width:1px;display:flex;flex-direction:row;justify-content:flex-end;padding:16px 8px 16px 24px}.mat-action-row button.mat-button-base,.mat-action-row button.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-action-row button.mat-button-base,[dir=rtl] .mat-action-row button.mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"], encapsulation: 2, data: { animation: [matExpansionAnimations.bodyExpansion] }, changeDetection: 0 });\n    return MatExpansionPanel;\n})();\nlet expansion_MatExpansionPanelActionRow = /*@__PURE__*/ (() => {\n    class MatExpansionPanelActionRow {\n    }\n    MatExpansionPanelActionRow.ɵfac = function MatExpansionPanelActionRow_Factory(t) { return new (t || MatExpansionPanelActionRow)(); };\n    MatExpansionPanelActionRow.ɵdir = /*@__PURE__*/ core[\"Ob\" /* ɵɵdefineDirective */]({ type: MatExpansionPanelActionRow, selectors: [[\"mat-action-row\"]], hostAttrs: [1, \"mat-action-row\"] });\n    return MatExpansionPanelActionRow;\n})();\nlet expansion_MatExpansionPanelHeader = /*@__PURE__*/ (() => {\n    class MatExpansionPanelHeader {\n        constructor(panel, _element, _focusMonitor, _changeDetectorRef, defaultOptions, _animationMode) {\n            this.panel = panel;\n            this._element = _element;\n            this._focusMonitor = _focusMonitor;\n            this._changeDetectorRef = _changeDetectorRef;\n            this._animationMode = _animationMode;\n            this._parentChangeSubscription = Subscription[\"a\" /* Subscription */].EMPTY;\n            const accordionHideToggleChange = panel.accordion ?\n                panel.accordion._stateChanges.pipe(Object(filter[\"a\" /* filter */])(changes => !!(changes['hideToggle'] || changes['togglePosition']))) :\n                empty[\"a\" /* EMPTY */];\n            // Since the toggle state depends on an @Input on the panel, we\n            // need to subscribe and trigger change detection manually.\n            this._parentChangeSubscription =\n                Object(merge[\"a\" /* merge */])(panel.opened, panel.closed, accordionHideToggleChange, panel._inputChanges.pipe(Object(filter[\"a\" /* filter */])(changes => {\n                    return !!(changes['hideToggle'] ||\n                        changes['disabled'] ||\n                        changes['togglePosition']);\n                })))\n                    .subscribe(() => this._changeDetectorRef.markForCheck());\n            // Avoids focus being lost if the panel contained the focused element and was closed.\n            panel.closed\n                .pipe(Object(filter[\"a\" /* filter */])(() => panel._containsFocus()))\n                .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n            if (defaultOptions) {\n                this.expandedHeight = defaultOptions.expandedHeight;\n                this.collapsedHeight = defaultOptions.collapsedHeight;\n            }\n        }\n        /**\n         * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n         * @docs-private\n         */\n        get disabled() {\n            return this.panel.disabled;\n        }\n        /** Toggles the expanded state of the panel. */\n        _toggle() {\n            if (!this.disabled) {\n                this.panel.toggle();\n            }\n        }\n        /** Gets whether the panel is expanded. */\n        _isExpanded() {\n            return this.panel.expanded;\n        }\n        /** Gets the expanded state string of the panel. */\n        _getExpandedState() {\n            return this.panel._getExpandedState();\n        }\n        /** Gets the panel id. */\n        _getPanelId() {\n            return this.panel.id;\n        }\n        /** Gets the toggle position for the header. */\n        _getTogglePosition() {\n            return this.panel.togglePosition;\n        }\n        /** Gets whether the expand indicator should be shown. */\n        _showToggle() {\n            return !this.panel.hideToggle && !this.panel.disabled;\n        }\n        /**\n         * Gets the current height of the header. Null if no custom height has been\n         * specified, and if the default height from the stylesheet should be used.\n         */\n        _getHeaderHeight() {\n            const isExpanded = this._isExpanded();\n            if (isExpanded && this.expandedHeight) {\n                return this.expandedHeight;\n            }\n            else if (!isExpanded && this.collapsedHeight) {\n                return this.collapsedHeight;\n            }\n            return null;\n        }\n        /** Handle keydown event calling to toggle() if appropriate. */\n        _keydown(event) {\n            switch (event.keyCode) {\n                // Toggle for space and enter keys.\n                case keycodes[\"o\" /* SPACE */]:\n                case keycodes[\"g\" /* ENTER */]:\n                    if (!Object(keycodes[\"t\" /* hasModifierKey */])(event)) {\n                        event.preventDefault();\n                        this._toggle();\n                    }\n                    break;\n                default:\n                    if (this.panel.accordion) {\n                        this.panel.accordion._handleHeaderKeydown(event);\n                    }\n                    return;\n            }\n        }\n        /**\n         * Focuses the panel header. Implemented as a part of `FocusableOption`.\n         * @param origin Origin of the action that triggered the focus.\n         * @docs-private\n         */\n        focus(origin, options) {\n            if (origin) {\n                this._focusMonitor.focusVia(this._element, origin, options);\n            }\n            else {\n                this._element.nativeElement.focus(options);\n            }\n        }\n        ngAfterViewInit() {\n            this._focusMonitor.monitor(this._element).subscribe(origin => {\n                if (origin && this.panel.accordion) {\n                    this.panel.accordion._handleHeaderFocus(this);\n                }\n            });\n        }\n        ngOnDestroy() {\n            this._parentChangeSubscription.unsubscribe();\n            this._focusMonitor.stopMonitoring(this._element);\n        }\n    }\n    MatExpansionPanelHeader.ɵfac = function MatExpansionPanelHeader_Factory(t) { return new (t || MatExpansionPanelHeader)(core[\"Tb\" /* ɵɵdirectiveInject */](expansion_MatExpansionPanel, 1), core[\"Tb\" /* ɵɵdirectiveInject */](core[\"m\" /* ElementRef */]), core[\"Tb\" /* ɵɵdirectiveInject */](a11y[\"h\" /* FocusMonitor */]), core[\"Tb\" /* ɵɵdirectiveInject */](core[\"i\" /* ChangeDetectorRef */]), core[\"Tb\" /* ɵɵdirectiveInject */](MAT_EXPANSION_PANEL_DEFAULT_OPTIONS, 8), core[\"Tb\" /* ɵɵdirectiveInject */](animations[\"a\" /* ANIMATION_MODULE_TYPE */], 8)); };\n    MatExpansionPanelHeader.ɵcmp = /*@__PURE__*/ core[\"Nb\" /* ɵɵdefineComponent */]({ type: MatExpansionPanelHeader, selectors: [[\"mat-expansion-panel-header\"]], hostAttrs: [\"role\", \"button\", 1, \"mat-expansion-panel-header\", \"mat-focus-indicator\"], hostVars: 15, hostBindings: function MatExpansionPanelHeader_HostBindings(rf, ctx) {\n            if (rf & 1) {\n                core[\"jc\" /* ɵɵlistener */](\"click\", function MatExpansionPanelHeader_click_HostBindingHandler() { return ctx._toggle(); })(\"keydown\", function MatExpansionPanelHeader_keydown_HostBindingHandler($event) { return ctx._keydown($event); });\n            }\n            if (rf & 2) {\n                core[\"Hb\" /* ɵɵattribute */](\"id\", ctx.panel._headerId)(\"tabindex\", ctx.disabled ? -1 : 0)(\"aria-controls\", ctx._getPanelId())(\"aria-expanded\", ctx._isExpanded())(\"aria-disabled\", ctx.panel.disabled);\n                core[\"Pc\" /* ɵɵstyleProp */](\"height\", ctx._getHeaderHeight());\n                core[\"Lb\" /* ɵɵclassProp */](\"mat-expanded\", ctx._isExpanded())(\"mat-expansion-toggle-indicator-after\", ctx._getTogglePosition() === \"after\")(\"mat-expansion-toggle-indicator-before\", ctx._getTogglePosition() === \"before\")(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n            }\n        }, inputs: { expandedHeight: \"expandedHeight\", collapsedHeight: \"collapsedHeight\" }, ngContentSelectors: _c4, decls: 5, vars: 1, consts: [[1, \"mat-content\"], [\"class\", \"mat-expansion-indicator\", 4, \"ngIf\"], [1, \"mat-expansion-indicator\"]], template: function MatExpansionPanelHeader_Template(rf, ctx) {\n            if (rf & 1) {\n                core[\"sc\" /* ɵɵprojectionDef */](_c3);\n                core[\"Zb\" /* ɵɵelementStart */](0, \"span\", 0);\n                core[\"rc\" /* ɵɵprojection */](1);\n                core[\"rc\" /* ɵɵprojection */](2, 1);\n                core[\"rc\" /* ɵɵprojection */](3, 2);\n                core[\"Yb\" /* ɵɵelementEnd */]();\n                core[\"Sc\" /* ɵɵtemplate */](4, MatExpansionPanelHeader_span_4_Template, 1, 1, \"span\", 1);\n            }\n            if (rf & 2) {\n                core[\"Gb\" /* ɵɵadvance */](4);\n                core[\"tc\" /* ɵɵproperty */](\"ngIf\", ctx._showToggle());\n            }\n        }, directives: [common[\"n\" /* NgIf */]], styles: [\".mat-expansion-panel-header{display:flex;flex-direction:row;align-items:center;padding:0 24px;border-radius:inherit;transition:height 225ms cubic-bezier(0.4, 0, 0.2, 1)}.mat-expansion-panel-header._mat-animation-noopable{transition:none}.mat-expansion-panel-header:focus,.mat-expansion-panel-header:hover{outline:none}.mat-expansion-panel-header.mat-expanded:focus,.mat-expansion-panel-header.mat-expanded:hover{background:inherit}.mat-expansion-panel-header:not([aria-disabled=true]){cursor:pointer}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before{flex-direction:row-reverse}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 16px 0 0}[dir=rtl] .mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 0 0 16px}.mat-content{display:flex;flex:1;flex-direction:row;overflow:hidden}.mat-expansion-panel-header-title,.mat-expansion-panel-header-description{display:flex;flex-grow:1;margin-right:16px}[dir=rtl] .mat-expansion-panel-header-title,[dir=rtl] .mat-expansion-panel-header-description{margin-right:0;margin-left:16px}.mat-expansion-panel-header-description{flex-grow:2}.mat-expansion-indicator::after{border-style:solid;border-width:0 2px 2px 0;content:\\\"\\\";display:inline-block;padding:3px;transform:rotate(45deg);vertical-align:middle}.cdk-high-contrast-active .mat-expansion-panel .mat-expansion-panel-header.cdk-keyboard-focused:not([aria-disabled=true])::before,.cdk-high-contrast-active .mat-expansion-panel .mat-expansion-panel-header.cdk-program-focused:not([aria-disabled=true])::before,.cdk-high-contrast-active .mat-expansion-panel:not(.mat-expanded) .mat-expansion-panel-header:hover:not([aria-disabled=true])::before{top:0;left:0;right:0;bottom:0;position:absolute;box-sizing:border-box;pointer-events:none;border:3px solid;border-radius:4px;content:\\\"\\\"}\\n\"], encapsulation: 2, data: { animation: [\n                matExpansionAnimations.indicatorRotate,\n            ] }, changeDetection: 0 });\n    return MatExpansionPanelHeader;\n})();\nlet expansion_MatExpansionPanelDescription = /*@__PURE__*/ (() => {\n    class MatExpansionPanelDescription {\n    }\n    MatExpansionPanelDescription.ɵfac = function MatExpansionPanelDescription_Factory(t) { return new (t || MatExpansionPanelDescription)(); };\n    MatExpansionPanelDescription.ɵdir = /*@__PURE__*/ core[\"Ob\" /* ɵɵdefineDirective */]({ type: MatExpansionPanelDescription, selectors: [[\"mat-panel-description\"]], hostAttrs: [1, \"mat-expansion-panel-header-description\"] });\n    return MatExpansionPanelDescription;\n})();\nlet expansion_MatExpansionPanelTitle = /*@__PURE__*/ (() => {\n    class MatExpansionPanelTitle {\n    }\n    MatExpansionPanelTitle.ɵfac = function MatExpansionPanelTitle_Factory(t) { return new (t || MatExpansionPanelTitle)(); };\n    MatExpansionPanelTitle.ɵdir = /*@__PURE__*/ core[\"Ob\" /* ɵɵdefineDirective */]({ type: MatExpansionPanelTitle, selectors: [[\"mat-panel-title\"]], hostAttrs: [1, \"mat-expansion-panel-header-title\"] });\n    return MatExpansionPanelTitle;\n})();\nlet expansion_MatAccordion = /*@__PURE__*/ (() => {\n    class MatAccordion extends accordion_CdkAccordion {\n        constructor() {\n            super(...arguments);\n            /** Headers belonging to this accordion. */\n            this._ownHeaders = new core[\"J\" /* QueryList */]();\n            this._hideToggle = false;\n            /**\n             * Display mode used for all expansion panels in the accordion. Currently two display\n             * modes exist:\n             *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n             *     panel at a different elevation from the rest of the accordion.\n             *  flat - no spacing is placed around expanded panels, showing all panels at the same\n             *     elevation.\n             */\n            this.displayMode = 'default';\n            /** The position of the expansion indicator. */\n            this.togglePosition = 'after';\n        }\n        /** Whether the expansion indicator should be hidden. */\n        get hideToggle() { return this._hideToggle; }\n        set hideToggle(show) { this._hideToggle = Object(coercion[\"c\" /* coerceBooleanProperty */])(show); }\n        ngAfterContentInit() {\n            this._headers.changes\n                .pipe(Object(startWith[\"a\" /* startWith */])(this._headers))\n                .subscribe((headers) => {\n                this._ownHeaders.reset(headers.filter(header => header.panel.accordion === this));\n                this._ownHeaders.notifyOnChanges();\n            });\n            this._keyManager = new a11y[\"g\" /* FocusKeyManager */](this._ownHeaders).withWrap().withHomeAndEnd();\n        }\n        /** Handles keyboard events coming in from the panel headers. */\n        _handleHeaderKeydown(event) {\n            this._keyManager.onKeydown(event);\n        }\n        _handleHeaderFocus(header) {\n            this._keyManager.updateActiveItem(header);\n        }\n        ngOnDestroy() {\n            super.ngOnDestroy();\n            this._ownHeaders.destroy();\n        }\n    }\n    MatAccordion.ɵfac = function MatAccordion_Factory(t) { return ɵMatAccordion_BaseFactory(t || MatAccordion); };\n    MatAccordion.ɵdir = /*@__PURE__*/ core[\"Ob\" /* ɵɵdefineDirective */]({ type: MatAccordion, selectors: [[\"mat-accordion\"]], contentQueries: function MatAccordion_ContentQueries(rf, ctx, dirIndex) {\n            if (rf & 1) {\n                core[\"Mb\" /* ɵɵcontentQuery */](dirIndex, expansion_MatExpansionPanelHeader, true);\n            }\n            if (rf & 2) {\n                let _t;\n                core[\"Fc\" /* ɵɵqueryRefresh */](_t = core[\"kc\" /* ɵɵloadQuery */]()) && (ctx._headers = _t);\n            }\n        }, hostAttrs: [1, \"mat-accordion\"], hostVars: 2, hostBindings: function MatAccordion_HostBindings(rf, ctx) {\n            if (rf & 2) {\n                core[\"Lb\" /* ɵɵclassProp */](\"mat-accordion-multi\", ctx.multi);\n            }\n        }, inputs: { multi: \"multi\", displayMode: \"displayMode\", togglePosition: \"togglePosition\", hideToggle: \"hideToggle\" }, exportAs: [\"matAccordion\"], features: [/*@__PURE__*/ core[\"Fb\" /* ɵɵProvidersFeature */]([{\n                    provide: MAT_ACCORDION,\n                    useExisting: MatAccordion\n                }]), core[\"Db\" /* ɵɵInheritDefinitionFeature */]] });\n    return MatAccordion;\n})();\nconst ɵMatAccordion_BaseFactory = /*@__PURE__*/ /*@__PURE__*/ core[\"bc\" /* ɵɵgetInheritedFactory */](expansion_MatAccordion);\nlet expansion_MatExpansionModule = /*@__PURE__*/ (() => {\n    class MatExpansionModule {\n    }\n    MatExpansionModule.ɵmod = /*@__PURE__*/ core[\"Rb\" /* ɵɵdefineNgModule */]({ type: MatExpansionModule });\n    MatExpansionModule.ɵinj = /*@__PURE__*/ core[\"Qb\" /* ɵɵdefineInjector */]({ factory: function MatExpansionModule_Factory(t) { return new (t || MatExpansionModule)(); }, imports: [[common[\"c\" /* CommonModule */], fesm2015_core[\"j\" /* MatCommonModule */], accordion_CdkAccordionModule, portal[\"f\" /* PortalModule */]]] });\n    return MatExpansionModule;\n})();\n/*@__PURE__*/ (function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && core[\"Lc\" /* ɵɵsetNgModuleScope */](expansion_MatExpansionModule, { declarations: function () { return [expansion_MatAccordion, expansion_MatExpansionPanel, expansion_MatExpansionPanelActionRow, expansion_MatExpansionPanelHeader, expansion_MatExpansionPanelTitle, expansion_MatExpansionPanelDescription, expansion_MatExpansionPanelContent]; }, imports: function () { return [common[\"c\" /* CommonModule */], fesm2015_core[\"j\" /* MatCommonModule */], accordion_CdkAccordionModule, portal[\"f\" /* PortalModule */]]; }, exports: function () { return [expansion_MatAccordion, expansion_MatExpansionPanel, expansion_MatExpansionPanelActionRow, expansion_MatExpansionPanelHeader, expansion_MatExpansionPanelTitle, expansion_MatExpansionPanelDescription, expansion_MatExpansionPanelContent]; } }); })();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Generated bundle index. Do not edit.\n */\n\n//# sourceMappingURL=expansion.js.map\n\n\n/***/ })\n\n}]);","inputSourceMap":null}