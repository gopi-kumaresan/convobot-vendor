{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{2:function(module,exports,__webpack_require__){module.exports=__webpack_require__(\"hN/g\")},\"N/DB\":function(module,exports){const __globalThis=\"undefined\"!=typeof globalThis&&globalThis,__window=\"undefined\"!=typeof window&&window,__self=\"undefined\"!=typeof self&&\"undefined\"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope&&self,__global=\"undefined\"!=typeof global&&global,$localize=function(messageParts,...expressions){if($localize.translate){const translation=$localize.translate(messageParts,expressions);messageParts=translation[0],expressions=translation[1]}let message=stripBlock(messageParts[0],messageParts.raw[0]);for(let i=1;i<messageParts.length;i++)message+=expressions[i-1]+stripBlock(messageParts[i],messageParts.raw[i]);return message};function stripBlock(messagePart,rawMessagePart){return\":\"===rawMessagePart.charAt(0)?messagePart.substring(function(cooked,raw){for(let cookedIndex=1,rawIndex=1;cookedIndex<cooked.length;cookedIndex++,rawIndex++)if(\"\\\\\"===raw[rawIndex])rawIndex++;else if(\":\"===cooked[cookedIndex])return cookedIndex;throw new Error(`Unterminated $localize metadata block in \"${raw}\".`)}(messagePart,rawMessagePart)+1):messagePart}(__globalThis||__global||__window||__self).$localize=$localize},\"hN/g\":function(module,__webpack_exports__,__webpack_require__){\"use strict\";__webpack_require__.r(__webpack_exports__),__webpack_require__(\"N/DB\"),__webpack_require__(\"pDpN\")},pDpN:function(module,exports,__webpack_require__){var __WEBPACK_AMD_DEFINE_FACTORY__,__WEBPACK_AMD_DEFINE_RESULT__;void 0===(__WEBPACK_AMD_DEFINE_RESULT__=\"function\"==typeof(__WEBPACK_AMD_DEFINE_FACTORY__=function(){\"use strict\";!function(global){const performance=global.performance;function mark(name){performance&&performance.mark&&performance.mark(name)}function performanceMeasure(name,label){performance&&performance.measure&&performance.measure(name,label)}mark(\"Zone\");const symbolPrefix=global.__Zone_symbol_prefix||\"__zone_symbol__\";function __symbol__(name){return symbolPrefix+name}const checkDuplicate=!0===global[__symbol__(\"forceDuplicateZoneCheck\")];if(global.Zone){if(checkDuplicate||\"function\"!=typeof global.Zone.__symbol__)throw new Error(\"Zone already loaded.\");return global.Zone}class Zone{constructor(parent,zoneSpec){this._parent=parent,this._name=zoneSpec?zoneSpec.name||\"unnamed\":\"<root>\",this._properties=zoneSpec&&zoneSpec.properties||{},this._zoneDelegate=new ZoneDelegate(this,this._parent&&this._parent._zoneDelegate,zoneSpec)}static assertZonePatched(){if(global.Promise!==patches.ZoneAwarePromise)throw new Error(\"Zone.js has detected that ZoneAwarePromise `(window|global).Promise` has been overwritten.\\nMost likely cause is that a Promise polyfill has been loaded after Zone.js (Polyfilling Promise api is not necessary when zone.js is loaded. If you must load one, do so before loading zone.js.)\")}static get root(){let zone=Zone.current;for(;zone.parent;)zone=zone.parent;return zone}static get current(){return _currentZoneFrame.zone}static get currentTask(){return _currentTask}static __load_patch(name,fn){if(patches.hasOwnProperty(name)){if(checkDuplicate)throw Error(\"Already loaded patch: \"+name)}else if(!global[\"__Zone_disable_\"+name]){const perfName=\"Zone:\"+name;mark(perfName),patches[name]=fn(global,Zone,_api),performanceMeasure(perfName,perfName)}}get parent(){return this._parent}get name(){return this._name}get(key){const zone=this.getZoneWith(key);if(zone)return zone._properties[key]}getZoneWith(key){let current=this;for(;current;){if(current._properties.hasOwnProperty(key))return current;current=current._parent}return null}fork(zoneSpec){if(!zoneSpec)throw new Error(\"ZoneSpec required!\");return this._zoneDelegate.fork(this,zoneSpec)}wrap(callback,source){if(\"function\"!=typeof callback)throw new Error(\"Expecting function got: \"+callback);const _callback=this._zoneDelegate.intercept(this,callback,source),zone=this;return function(){return zone.runGuarded(_callback,this,arguments,source)}}run(callback,applyThis,applyArgs,source){_currentZoneFrame={parent:_currentZoneFrame,zone:this};try{return this._zoneDelegate.invoke(this,callback,applyThis,applyArgs,source)}finally{_currentZoneFrame=_currentZoneFrame.parent}}runGuarded(callback,applyThis=null,applyArgs,source){_currentZoneFrame={parent:_currentZoneFrame,zone:this};try{try{return this._zoneDelegate.invoke(this,callback,applyThis,applyArgs,source)}catch(error){if(this._zoneDelegate.handleError(this,error))throw error}}finally{_currentZoneFrame=_currentZoneFrame.parent}}runTask(task,applyThis,applyArgs){if(task.zone!=this)throw new Error(\"A task can only be run in the zone of creation! (Creation: \"+(task.zone||NO_ZONE).name+\"; Execution: \"+this.name+\")\");if(task.state===notScheduled&&(task.type===eventTask||task.type===macroTask))return;const reEntryGuard=task.state!=running;reEntryGuard&&task._transitionTo(running,scheduled),task.runCount++;const previousTask=_currentTask;_currentTask=task,_currentZoneFrame={parent:_currentZoneFrame,zone:this};try{task.type==macroTask&&task.data&&!task.data.isPeriodic&&(task.cancelFn=void 0);try{return this._zoneDelegate.invokeTask(this,task,applyThis,applyArgs)}catch(error){if(this._zoneDelegate.handleError(this,error))throw error}}finally{task.state!==notScheduled&&task.state!==unknown&&(task.type==eventTask||task.data&&task.data.isPeriodic?reEntryGuard&&task._transitionTo(scheduled,running):(task.runCount=0,this._updateTaskCount(task,-1),reEntryGuard&&task._transitionTo(notScheduled,running,notScheduled))),_currentZoneFrame=_currentZoneFrame.parent,_currentTask=previousTask}}scheduleTask(task){if(task.zone&&task.zone!==this){let newZone=this;for(;newZone;){if(newZone===task.zone)throw Error(`can not reschedule task to ${this.name} which is descendants of the original zone ${task.zone.name}`);newZone=newZone.parent}}task._transitionTo(scheduling,notScheduled);const zoneDelegates=[];task._zoneDelegates=zoneDelegates,task._zone=this;try{task=this._zoneDelegate.scheduleTask(this,task)}catch(err){throw task._transitionTo(unknown,scheduling,notScheduled),this._zoneDelegate.handleError(this,err),err}return task._zoneDelegates===zoneDelegates&&this._updateTaskCount(task,1),task.state==scheduling&&task._transitionTo(scheduled,scheduling),task}scheduleMicroTask(source,callback,data,customSchedule){return this.scheduleTask(new ZoneTask(microTask,source,callback,data,customSchedule,void 0))}scheduleMacroTask(source,callback,data,customSchedule,customCancel){return this.scheduleTask(new ZoneTask(macroTask,source,callback,data,customSchedule,customCancel))}scheduleEventTask(source,callback,data,customSchedule,customCancel){return this.scheduleTask(new ZoneTask(eventTask,source,callback,data,customSchedule,customCancel))}cancelTask(task){if(task.zone!=this)throw new Error(\"A task can only be cancelled in the zone of creation! (Creation: \"+(task.zone||NO_ZONE).name+\"; Execution: \"+this.name+\")\");task._transitionTo(canceling,scheduled,running);try{this._zoneDelegate.cancelTask(this,task)}catch(err){throw task._transitionTo(unknown,canceling),this._zoneDelegate.handleError(this,err),err}return this._updateTaskCount(task,-1),task._transitionTo(notScheduled,canceling),task.runCount=0,task}_updateTaskCount(task,count){const zoneDelegates=task._zoneDelegates;-1==count&&(task._zoneDelegates=null);for(let i=0;i<zoneDelegates.length;i++)zoneDelegates[i]._updateTaskCount(task.type,count)}}Zone.__symbol__=__symbol__;const DELEGATE_ZS={name:\"\",onHasTask:(delegate,_,target,hasTaskState)=>delegate.hasTask(target,hasTaskState),onScheduleTask:(delegate,_,target,task)=>delegate.scheduleTask(target,task),onInvokeTask:(delegate,_,target,task,applyThis,applyArgs)=>delegate.invokeTask(target,task,applyThis,applyArgs),onCancelTask:(delegate,_,target,task)=>delegate.cancelTask(target,task)};class ZoneDelegate{constructor(zone,parentDelegate,zoneSpec){this._taskCounts={microTask:0,macroTask:0,eventTask:0},this.zone=zone,this._parentDelegate=parentDelegate,this._forkZS=zoneSpec&&(zoneSpec&&zoneSpec.onFork?zoneSpec:parentDelegate._forkZS),this._forkDlgt=zoneSpec&&(zoneSpec.onFork?parentDelegate:parentDelegate._forkDlgt),this._forkCurrZone=zoneSpec&&(zoneSpec.onFork?this.zone:parentDelegate._forkCurrZone),this._interceptZS=zoneSpec&&(zoneSpec.onIntercept?zoneSpec:parentDelegate._interceptZS),this._interceptDlgt=zoneSpec&&(zoneSpec.onIntercept?parentDelegate:parentDelegate._interceptDlgt),this._interceptCurrZone=zoneSpec&&(zoneSpec.onIntercept?this.zone:parentDelegate._interceptCurrZone),this._invokeZS=zoneSpec&&(zoneSpec.onInvoke?zoneSpec:parentDelegate._invokeZS),this._invokeDlgt=zoneSpec&&(zoneSpec.onInvoke?parentDelegate:parentDelegate._invokeDlgt),this._invokeCurrZone=zoneSpec&&(zoneSpec.onInvoke?this.zone:parentDelegate._invokeCurrZone),this._handleErrorZS=zoneSpec&&(zoneSpec.onHandleError?zoneSpec:parentDelegate._handleErrorZS),this._handleErrorDlgt=zoneSpec&&(zoneSpec.onHandleError?parentDelegate:parentDelegate._handleErrorDlgt),this._handleErrorCurrZone=zoneSpec&&(zoneSpec.onHandleError?this.zone:parentDelegate._handleErrorCurrZone),this._scheduleTaskZS=zoneSpec&&(zoneSpec.onScheduleTask?zoneSpec:parentDelegate._scheduleTaskZS),this._scheduleTaskDlgt=zoneSpec&&(zoneSpec.onScheduleTask?parentDelegate:parentDelegate._scheduleTaskDlgt),this._scheduleTaskCurrZone=zoneSpec&&(zoneSpec.onScheduleTask?this.zone:parentDelegate._scheduleTaskCurrZone),this._invokeTaskZS=zoneSpec&&(zoneSpec.onInvokeTask?zoneSpec:parentDelegate._invokeTaskZS),this._invokeTaskDlgt=zoneSpec&&(zoneSpec.onInvokeTask?parentDelegate:parentDelegate._invokeTaskDlgt),this._invokeTaskCurrZone=zoneSpec&&(zoneSpec.onInvokeTask?this.zone:parentDelegate._invokeTaskCurrZone),this._cancelTaskZS=zoneSpec&&(zoneSpec.onCancelTask?zoneSpec:parentDelegate._cancelTaskZS),this._cancelTaskDlgt=zoneSpec&&(zoneSpec.onCancelTask?parentDelegate:parentDelegate._cancelTaskDlgt),this._cancelTaskCurrZone=zoneSpec&&(zoneSpec.onCancelTask?this.zone:parentDelegate._cancelTaskCurrZone),this._hasTaskZS=null,this._hasTaskDlgt=null,this._hasTaskDlgtOwner=null,this._hasTaskCurrZone=null;const zoneSpecHasTask=zoneSpec&&zoneSpec.onHasTask;(zoneSpecHasTask||parentDelegate&&parentDelegate._hasTaskZS)&&(this._hasTaskZS=zoneSpecHasTask?zoneSpec:DELEGATE_ZS,this._hasTaskDlgt=parentDelegate,this._hasTaskDlgtOwner=this,this._hasTaskCurrZone=zone,zoneSpec.onScheduleTask||(this._scheduleTaskZS=DELEGATE_ZS,this._scheduleTaskDlgt=parentDelegate,this._scheduleTaskCurrZone=this.zone),zoneSpec.onInvokeTask||(this._invokeTaskZS=DELEGATE_ZS,this._invokeTaskDlgt=parentDelegate,this._invokeTaskCurrZone=this.zone),zoneSpec.onCancelTask||(this._cancelTaskZS=DELEGATE_ZS,this._cancelTaskDlgt=parentDelegate,this._cancelTaskCurrZone=this.zone))}fork(targetZone,zoneSpec){return this._forkZS?this._forkZS.onFork(this._forkDlgt,this.zone,targetZone,zoneSpec):new Zone(targetZone,zoneSpec)}intercept(targetZone,callback,source){return this._interceptZS?this._interceptZS.onIntercept(this._interceptDlgt,this._interceptCurrZone,targetZone,callback,source):callback}invoke(targetZone,callback,applyThis,applyArgs,source){return this._invokeZS?this._invokeZS.onInvoke(this._invokeDlgt,this._invokeCurrZone,targetZone,callback,applyThis,applyArgs,source):callback.apply(applyThis,applyArgs)}handleError(targetZone,error){return!this._handleErrorZS||this._handleErrorZS.onHandleError(this._handleErrorDlgt,this._handleErrorCurrZone,targetZone,error)}scheduleTask(targetZone,task){let returnTask=task;if(this._scheduleTaskZS)this._hasTaskZS&&returnTask._zoneDelegates.push(this._hasTaskDlgtOwner),returnTask=this._scheduleTaskZS.onScheduleTask(this._scheduleTaskDlgt,this._scheduleTaskCurrZone,targetZone,task),returnTask||(returnTask=task);else if(task.scheduleFn)task.scheduleFn(task);else{if(task.type!=microTask)throw new Error(\"Task is missing scheduleFn.\");scheduleMicroTask(task)}return returnTask}invokeTask(targetZone,task,applyThis,applyArgs){return this._invokeTaskZS?this._invokeTaskZS.onInvokeTask(this._invokeTaskDlgt,this._invokeTaskCurrZone,targetZone,task,applyThis,applyArgs):task.callback.apply(applyThis,applyArgs)}cancelTask(targetZone,task){let value;if(this._cancelTaskZS)value=this._cancelTaskZS.onCancelTask(this._cancelTaskDlgt,this._cancelTaskCurrZone,targetZone,task);else{if(!task.cancelFn)throw Error(\"Task is not cancelable\");value=task.cancelFn(task)}return value}hasTask(targetZone,isEmpty){try{this._hasTaskZS&&this._hasTaskZS.onHasTask(this._hasTaskDlgt,this._hasTaskCurrZone,targetZone,isEmpty)}catch(err){this.handleError(targetZone,err)}}_updateTaskCount(type,count){const counts=this._taskCounts,prev=counts[type],next=counts[type]=prev+count;if(next<0)throw new Error(\"More tasks executed then were scheduled.\");0!=prev&&0!=next||this.hasTask(this.zone,{microTask:counts.microTask>0,macroTask:counts.macroTask>0,eventTask:counts.eventTask>0,change:type})}}class ZoneTask{constructor(type,source,callback,options,scheduleFn,cancelFn){if(this._zone=null,this.runCount=0,this._zoneDelegates=null,this._state=\"notScheduled\",this.type=type,this.source=source,this.data=options,this.scheduleFn=scheduleFn,this.cancelFn=cancelFn,!callback)throw new Error(\"callback is not defined\");this.callback=callback;const self=this;this.invoke=type===eventTask&&options&&options.useG?ZoneTask.invokeTask:function(){return ZoneTask.invokeTask.call(global,self,this,arguments)}}static invokeTask(task,target,args){task||(task=this),_numberOfNestedTaskFrames++;try{return task.runCount++,task.zone.runTask(task,target,args)}finally{1==_numberOfNestedTaskFrames&&drainMicroTaskQueue(),_numberOfNestedTaskFrames--}}get zone(){return this._zone}get state(){return this._state}cancelScheduleRequest(){this._transitionTo(notScheduled,scheduling)}_transitionTo(toState,fromState1,fromState2){if(this._state!==fromState1&&this._state!==fromState2)throw new Error(`${this.type} '${this.source}': can not transition to '${toState}', expecting state '${fromState1}'${fromState2?\" or '\"+fromState2+\"'\":\"\"}, was '${this._state}'.`);this._state=toState,toState==notScheduled&&(this._zoneDelegates=null)}toString(){return this.data&&void 0!==this.data.handleId?this.data.handleId.toString():Object.prototype.toString.call(this)}toJSON(){return{type:this.type,state:this.state,source:this.source,zone:this.zone.name,runCount:this.runCount}}}const symbolSetTimeout=__symbol__(\"setTimeout\"),symbolPromise=__symbol__(\"Promise\"),symbolThen=__symbol__(\"then\");let nativeMicroTaskQueuePromise,_microTaskQueue=[],_isDrainingMicrotaskQueue=!1;function scheduleMicroTask(task){if(0===_numberOfNestedTaskFrames&&0===_microTaskQueue.length)if(nativeMicroTaskQueuePromise||global[symbolPromise]&&(nativeMicroTaskQueuePromise=global[symbolPromise].resolve(0)),nativeMicroTaskQueuePromise){let nativeThen=nativeMicroTaskQueuePromise[symbolThen];nativeThen||(nativeThen=nativeMicroTaskQueuePromise.then),nativeThen.call(nativeMicroTaskQueuePromise,drainMicroTaskQueue)}else global[symbolSetTimeout](drainMicroTaskQueue,0);task&&_microTaskQueue.push(task)}function drainMicroTaskQueue(){if(!_isDrainingMicrotaskQueue){for(_isDrainingMicrotaskQueue=!0;_microTaskQueue.length;){const queue=_microTaskQueue;_microTaskQueue=[];for(let i=0;i<queue.length;i++){const task=queue[i];try{task.zone.runTask(task,null,null)}catch(error){_api.onUnhandledError(error)}}}_api.microtaskDrainDone(),_isDrainingMicrotaskQueue=!1}}const NO_ZONE={name:\"NO ZONE\"},notScheduled=\"notScheduled\",scheduling=\"scheduling\",scheduled=\"scheduled\",running=\"running\",canceling=\"canceling\",unknown=\"unknown\",microTask=\"microTask\",macroTask=\"macroTask\",eventTask=\"eventTask\",patches={},_api={symbol:__symbol__,currentZoneFrame:()=>_currentZoneFrame,onUnhandledError:noop,microtaskDrainDone:noop,scheduleMicroTask:scheduleMicroTask,showUncaughtError:()=>!Zone[__symbol__(\"ignoreConsoleErrorUncaughtError\")],patchEventTarget:()=>[],patchOnProperties:noop,patchMethod:()=>noop,bindArguments:()=>[],patchThen:()=>noop,patchMacroTask:()=>noop,setNativePromise:NativePromise=>{NativePromise&&\"function\"==typeof NativePromise.resolve&&(nativeMicroTaskQueuePromise=NativePromise.resolve(0))},patchEventPrototype:()=>noop,isIEOrEdge:()=>!1,getGlobalObjects:()=>{},ObjectDefineProperty:()=>noop,ObjectGetOwnPropertyDescriptor:()=>{},ObjectCreate:()=>{},ArraySlice:()=>[],patchClass:()=>noop,wrapWithCurrentZone:()=>noop,filterProperties:()=>[],attachOriginToPatched:()=>noop,_redefineProperty:()=>noop,patchCallbacks:()=>noop};let _currentZoneFrame={parent:null,zone:new Zone(null,null)},_currentTask=null,_numberOfNestedTaskFrames=0;function noop(){}performanceMeasure(\"Zone\",\"Zone\"),global.Zone=Zone}(\"undefined\"!=typeof window&&window||\"undefined\"!=typeof self&&self||global),Zone.__load_patch(\"ZoneAwarePromise\",(global,Zone,api)=>{const ObjectGetOwnPropertyDescriptor=Object.getOwnPropertyDescriptor,ObjectDefineProperty=Object.defineProperty,__symbol__=api.symbol,_uncaughtPromiseErrors=[],isDisableWrappingUncaughtPromiseRejection=!0===global[__symbol__(\"DISABLE_WRAPPING_UNCAUGHT_PROMISE_REJECTION\")],symbolPromise=__symbol__(\"Promise\"),symbolThen=__symbol__(\"then\");api.onUnhandledError=e=>{if(api.showUncaughtError()){const rejection=e&&e.rejection;rejection?console.error(\"Unhandled Promise rejection:\",rejection instanceof Error?rejection.message:rejection,\"; Zone:\",e.zone.name,\"; Task:\",e.task&&e.task.source,\"; Value:\",rejection,rejection instanceof Error?rejection.stack:void 0):console.error(e)}},api.microtaskDrainDone=()=>{for(;_uncaughtPromiseErrors.length;){const uncaughtPromiseError=_uncaughtPromiseErrors.shift();try{uncaughtPromiseError.zone.runGuarded(()=>{throw uncaughtPromiseError})}catch(error){handleUnhandledRejection(error)}}};const UNHANDLED_PROMISE_REJECTION_HANDLER_SYMBOL=__symbol__(\"unhandledPromiseRejectionHandler\");function handleUnhandledRejection(e){api.onUnhandledError(e);try{const handler=Zone[UNHANDLED_PROMISE_REJECTION_HANDLER_SYMBOL];\"function\"==typeof handler&&handler.call(this,e)}catch(err){}}function isThenable(value){return value&&value.then}function forwardResolution(value){return value}function forwardRejection(rejection){return ZoneAwarePromise.reject(rejection)}const symbolState=__symbol__(\"state\"),symbolValue=__symbol__(\"value\"),symbolFinally=__symbol__(\"finally\"),symbolParentPromiseValue=__symbol__(\"parentPromiseValue\"),symbolParentPromiseState=__symbol__(\"parentPromiseState\");function makeResolver(promise,state){return v=>{try{resolvePromise(promise,state,v)}catch(err){resolvePromise(promise,!1,err)}}}const CURRENT_TASK_TRACE_SYMBOL=__symbol__(\"currentTaskTrace\");function resolvePromise(promise,state,value){const onceWrapper=function(){let wasCalled=!1;return function(wrappedFunction){return function(){wasCalled||(wasCalled=!0,wrappedFunction.apply(null,arguments))}}}();if(promise===value)throw new TypeError(\"Promise resolved with itself\");if(null===promise[symbolState]){let then=null;try{\"object\"!=typeof value&&\"function\"!=typeof value||(then=value&&value.then)}catch(err){return onceWrapper(()=>{resolvePromise(promise,!1,err)})(),promise}if(!1!==state&&value instanceof ZoneAwarePromise&&value.hasOwnProperty(symbolState)&&value.hasOwnProperty(symbolValue)&&null!==value[symbolState])clearRejectedNoCatch(value),resolvePromise(promise,value[symbolState],value[symbolValue]);else if(!1!==state&&\"function\"==typeof then)try{then.call(value,onceWrapper(makeResolver(promise,state)),onceWrapper(makeResolver(promise,!1)))}catch(err){onceWrapper(()=>{resolvePromise(promise,!1,err)})()}else{promise[symbolState]=state;const queue=promise[symbolValue];if(promise[symbolValue]=value,promise[symbolFinally]===symbolFinally&&!0===state&&(promise[symbolState]=promise[symbolParentPromiseState],promise[symbolValue]=promise[symbolParentPromiseValue]),!1===state&&value instanceof Error){const trace=Zone.currentTask&&Zone.currentTask.data&&Zone.currentTask.data.__creationTrace__;trace&&ObjectDefineProperty(value,CURRENT_TASK_TRACE_SYMBOL,{configurable:!0,enumerable:!1,writable:!0,value:trace})}for(let i=0;i<queue.length;)scheduleResolveOrReject(promise,queue[i++],queue[i++],queue[i++],queue[i++]);if(0==queue.length&&0==state){promise[symbolState]=0;let uncaughtPromiseError=value;if(!isDisableWrappingUncaughtPromiseRejection)try{throw new Error(\"Uncaught (in promise): \"+((obj=value)&&obj.toString===Object.prototype.toString?(obj.constructor&&obj.constructor.name||\"\")+\": \"+JSON.stringify(obj):obj?obj.toString():Object.prototype.toString.call(obj))+(value&&value.stack?\"\\n\"+value.stack:\"\"))}catch(err){uncaughtPromiseError=err}uncaughtPromiseError.rejection=value,uncaughtPromiseError.promise=promise,uncaughtPromiseError.zone=Zone.current,uncaughtPromiseError.task=Zone.currentTask,_uncaughtPromiseErrors.push(uncaughtPromiseError),api.scheduleMicroTask()}}}var obj;return promise}const REJECTION_HANDLED_HANDLER=__symbol__(\"rejectionHandledHandler\");function clearRejectedNoCatch(promise){if(0===promise[symbolState]){try{const handler=Zone[REJECTION_HANDLED_HANDLER];handler&&\"function\"==typeof handler&&handler.call(this,{rejection:promise[symbolValue],promise:promise})}catch(err){}promise[symbolState]=!1;for(let i=0;i<_uncaughtPromiseErrors.length;i++)promise===_uncaughtPromiseErrors[i].promise&&_uncaughtPromiseErrors.splice(i,1)}}function scheduleResolveOrReject(promise,zone,chainPromise,onFulfilled,onRejected){clearRejectedNoCatch(promise);const promiseState=promise[symbolState],delegate=promiseState?\"function\"==typeof onFulfilled?onFulfilled:forwardResolution:\"function\"==typeof onRejected?onRejected:forwardRejection;zone.scheduleMicroTask(\"Promise.then\",()=>{try{const parentPromiseValue=promise[symbolValue],isFinallyPromise=!!chainPromise&&symbolFinally===chainPromise[symbolFinally];isFinallyPromise&&(chainPromise[symbolParentPromiseValue]=parentPromiseValue,chainPromise[symbolParentPromiseState]=promiseState);const value=zone.run(delegate,void 0,isFinallyPromise&&delegate!==forwardRejection&&delegate!==forwardResolution?[]:[parentPromiseValue]);resolvePromise(chainPromise,!0,value)}catch(error){resolvePromise(chainPromise,!1,error)}},chainPromise)}const noop=function(){};class ZoneAwarePromise{static toString(){return\"function ZoneAwarePromise() { [native code] }\"}static resolve(value){return resolvePromise(new this(null),!0,value)}static reject(error){return resolvePromise(new this(null),!1,error)}static race(values){let resolve,reject,promise=new this((res,rej)=>{resolve=res,reject=rej});function onResolve(value){resolve(value)}function onReject(error){reject(error)}for(let value of values)isThenable(value)||(value=this.resolve(value)),value.then(onResolve,onReject);return promise}static all(values){return ZoneAwarePromise.allWithCallback(values)}static allSettled(values){return(this&&this.prototype instanceof ZoneAwarePromise?this:ZoneAwarePromise).allWithCallback(values,{thenCallback:value=>({status:\"fulfilled\",value:value}),errorCallback:err=>({status:\"rejected\",reason:err})})}static allWithCallback(values,callback){let resolve,reject,promise=new this((res,rej)=>{resolve=res,reject=rej}),unresolvedCount=2,valueIndex=0;const resolvedValues=[];for(let value of values){isThenable(value)||(value=this.resolve(value));const curValueIndex=valueIndex;try{value.then(value=>{resolvedValues[curValueIndex]=callback?callback.thenCallback(value):value,unresolvedCount--,0===unresolvedCount&&resolve(resolvedValues)},err=>{callback?(resolvedValues[curValueIndex]=callback.errorCallback(err),unresolvedCount--,0===unresolvedCount&&resolve(resolvedValues)):reject(err)})}catch(thenErr){reject(thenErr)}unresolvedCount++,valueIndex++}return unresolvedCount-=2,0===unresolvedCount&&resolve(resolvedValues),promise}constructor(executor){const promise=this;if(!(promise instanceof ZoneAwarePromise))throw new Error(\"Must be an instanceof Promise.\");promise[symbolState]=null,promise[symbolValue]=[];try{executor&&executor(makeResolver(promise,!0),makeResolver(promise,!1))}catch(error){resolvePromise(promise,!1,error)}}get[Symbol.toStringTag](){return\"Promise\"}get[Symbol.species](){return ZoneAwarePromise}then(onFulfilled,onRejected){let C=this.constructor[Symbol.species];C&&\"function\"==typeof C||(C=this.constructor||ZoneAwarePromise);const chainPromise=new C(noop),zone=Zone.current;return null==this[symbolState]?this[symbolValue].push(zone,chainPromise,onFulfilled,onRejected):scheduleResolveOrReject(this,zone,chainPromise,onFulfilled,onRejected),chainPromise}catch(onRejected){return this.then(null,onRejected)}finally(onFinally){let C=this.constructor[Symbol.species];C&&\"function\"==typeof C||(C=ZoneAwarePromise);const chainPromise=new C(noop);chainPromise[symbolFinally]=symbolFinally;const zone=Zone.current;return null==this[symbolState]?this[symbolValue].push(zone,chainPromise,onFinally,onFinally):scheduleResolveOrReject(this,zone,chainPromise,onFinally,onFinally),chainPromise}}ZoneAwarePromise.resolve=ZoneAwarePromise.resolve,ZoneAwarePromise.reject=ZoneAwarePromise.reject,ZoneAwarePromise.race=ZoneAwarePromise.race,ZoneAwarePromise.all=ZoneAwarePromise.all;const NativePromise=global[symbolPromise]=global.Promise,ZONE_AWARE_PROMISE=Zone.__symbol__(\"ZoneAwarePromise\");let desc=ObjectGetOwnPropertyDescriptor(global,\"Promise\");desc&&!desc.configurable||(desc&&delete desc.writable,desc&&delete desc.value,desc||(desc={configurable:!0,enumerable:!0}),desc.get=function(){return global[ZONE_AWARE_PROMISE]?global[ZONE_AWARE_PROMISE]:global[symbolPromise]},desc.set=function(NewNativePromise){NewNativePromise===ZoneAwarePromise?global[ZONE_AWARE_PROMISE]=NewNativePromise:(global[symbolPromise]=NewNativePromise,NewNativePromise.prototype[symbolThen]||patchThen(NewNativePromise),api.setNativePromise(NewNativePromise))},ObjectDefineProperty(global,\"Promise\",desc)),global.Promise=ZoneAwarePromise;const symbolThenPatched=__symbol__(\"thenPatched\");function patchThen(Ctor){const proto=Ctor.prototype,prop=ObjectGetOwnPropertyDescriptor(proto,\"then\");if(prop&&(!1===prop.writable||!prop.configurable))return;const originalThen=proto.then;proto[symbolThen]=originalThen,Ctor.prototype.then=function(onResolve,onReject){return new ZoneAwarePromise((resolve,reject)=>{originalThen.call(this,resolve,reject)}).then(onResolve,onReject)},Ctor[symbolThenPatched]=!0}if(api.patchThen=patchThen,NativePromise){patchThen(NativePromise);const fetch=global.fetch;\"function\"==typeof fetch&&(global[api.symbol(\"fetch\")]=fetch,global.fetch=(fn=fetch,function(){let resultPromise=fn.apply(this,arguments);if(resultPromise instanceof ZoneAwarePromise)return resultPromise;let ctor=resultPromise.constructor;return ctor[symbolThenPatched]||patchThen(ctor),resultPromise}))}var fn;return Promise[Zone.__symbol__(\"uncaughtPromiseErrors\")]=_uncaughtPromiseErrors,ZoneAwarePromise});const ObjectGetOwnPropertyDescriptor=Object.getOwnPropertyDescriptor,ObjectDefineProperty=Object.defineProperty,ObjectGetPrototypeOf=Object.getPrototypeOf,ObjectCreate=Object.create,ArraySlice=Array.prototype.slice,ZONE_SYMBOL_ADD_EVENT_LISTENER=Zone.__symbol__(\"addEventListener\"),ZONE_SYMBOL_REMOVE_EVENT_LISTENER=Zone.__symbol__(\"removeEventListener\"),ZONE_SYMBOL_PREFIX=Zone.__symbol__(\"\");function wrapWithCurrentZone(callback,source){return Zone.current.wrap(callback,source)}function scheduleMacroTaskWithCurrentZone(source,callback,data,customSchedule,customCancel){return Zone.current.scheduleMacroTask(source,callback,data,customSchedule,customCancel)}const zoneSymbol=Zone.__symbol__,isWindowExists=\"undefined\"!=typeof window,internalWindow=isWindowExists?window:void 0,_global=isWindowExists&&internalWindow||\"object\"==typeof self&&self||global,NULL_ON_PROP_VALUE=[null];function bindArguments(args,source){for(let i=args.length-1;i>=0;i--)\"function\"==typeof args[i]&&(args[i]=wrapWithCurrentZone(args[i],source+\"_\"+i));return args}function isPropertyWritable(propertyDesc){return!propertyDesc||!1!==propertyDesc.writable&&!(\"function\"==typeof propertyDesc.get&&void 0===propertyDesc.set)}const isWebWorker=\"undefined\"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope,isNode=!(\"nw\"in _global)&&void 0!==_global.process&&\"[object process]\"==={}.toString.call(_global.process),isBrowser=!isNode&&!isWebWorker&&!(!isWindowExists||!internalWindow.HTMLElement),isMix=void 0!==_global.process&&\"[object process]\"==={}.toString.call(_global.process)&&!isWebWorker&&!(!isWindowExists||!internalWindow.HTMLElement),zoneSymbolEventNames={},wrapFn=function(event){if(!(event=event||_global.event))return;let eventNameSymbol=zoneSymbolEventNames[event.type];eventNameSymbol||(eventNameSymbol=zoneSymbolEventNames[event.type]=zoneSymbol(\"ON_PROPERTY\"+event.type));const target=this||event.target||_global,listener=target[eventNameSymbol];let result;if(isBrowser&&target===internalWindow&&\"error\"===event.type){const errorEvent=event;result=listener&&listener.call(this,errorEvent.message,errorEvent.filename,errorEvent.lineno,errorEvent.colno,errorEvent.error),!0===result&&event.preventDefault()}else result=listener&&listener.apply(this,arguments),null==result||result||event.preventDefault();return result};function patchProperty(obj,prop,prototype){let desc=ObjectGetOwnPropertyDescriptor(obj,prop);if(!desc&&prototype&&ObjectGetOwnPropertyDescriptor(prototype,prop)&&(desc={enumerable:!0,configurable:!0}),!desc||!desc.configurable)return;const onPropPatchedSymbol=zoneSymbol(\"on\"+prop+\"patched\");if(obj.hasOwnProperty(onPropPatchedSymbol)&&obj[onPropPatchedSymbol])return;delete desc.writable,delete desc.value;const originalDescGet=desc.get,originalDescSet=desc.set,eventName=prop.substr(2);let eventNameSymbol=zoneSymbolEventNames[eventName];eventNameSymbol||(eventNameSymbol=zoneSymbolEventNames[eventName]=zoneSymbol(\"ON_PROPERTY\"+eventName)),desc.set=function(newValue){let target=this;target||obj!==_global||(target=_global),target&&(target[eventNameSymbol]&&target.removeEventListener(eventName,wrapFn),originalDescSet&&originalDescSet.apply(target,NULL_ON_PROP_VALUE),\"function\"==typeof newValue?(target[eventNameSymbol]=newValue,target.addEventListener(eventName,wrapFn,!1)):target[eventNameSymbol]=null)},desc.get=function(){let target=this;if(target||obj!==_global||(target=_global),!target)return null;const listener=target[eventNameSymbol];if(listener)return listener;if(originalDescGet){let value=originalDescGet&&originalDescGet.call(this);if(value)return desc.set.call(this,value),\"function\"==typeof target.removeAttribute&&target.removeAttribute(prop),value}return null},ObjectDefineProperty(obj,prop,desc),obj[onPropPatchedSymbol]=!0}function patchOnProperties(obj,properties,prototype){if(properties)for(let i=0;i<properties.length;i++)patchProperty(obj,\"on\"+properties[i],prototype);else{const onProperties=[];for(const prop in obj)\"on\"==prop.substr(0,2)&&onProperties.push(prop);for(let j=0;j<onProperties.length;j++)patchProperty(obj,onProperties[j],prototype)}}const originalInstanceKey=zoneSymbol(\"originalInstance\");function patchClass(className){const OriginalClass=_global[className];if(!OriginalClass)return;_global[zoneSymbol(className)]=OriginalClass,_global[className]=function(){const a=bindArguments(arguments,className);switch(a.length){case 0:this[originalInstanceKey]=new OriginalClass;break;case 1:this[originalInstanceKey]=new OriginalClass(a[0]);break;case 2:this[originalInstanceKey]=new OriginalClass(a[0],a[1]);break;case 3:this[originalInstanceKey]=new OriginalClass(a[0],a[1],a[2]);break;case 4:this[originalInstanceKey]=new OriginalClass(a[0],a[1],a[2],a[3]);break;default:throw new Error(\"Arg list too long.\")}},attachOriginToPatched(_global[className],OriginalClass);const instance=new OriginalClass(function(){});let prop;for(prop in instance)\"XMLHttpRequest\"===className&&\"responseBlob\"===prop||function(prop){\"function\"==typeof instance[prop]?_global[className].prototype[prop]=function(){return this[originalInstanceKey][prop].apply(this[originalInstanceKey],arguments)}:ObjectDefineProperty(_global[className].prototype,prop,{set:function(fn){\"function\"==typeof fn?(this[originalInstanceKey][prop]=wrapWithCurrentZone(fn,className+\".\"+prop),attachOriginToPatched(this[originalInstanceKey][prop],fn)):this[originalInstanceKey][prop]=fn},get:function(){return this[originalInstanceKey][prop]}})}(prop);for(prop in OriginalClass)\"prototype\"!==prop&&OriginalClass.hasOwnProperty(prop)&&(_global[className][prop]=OriginalClass[prop])}function patchMethod(target,name,patchFn){let proto=target;for(;proto&&!proto.hasOwnProperty(name);)proto=ObjectGetPrototypeOf(proto);!proto&&target[name]&&(proto=target);const delegateName=zoneSymbol(name);let delegate=null;if(proto&&!(delegate=proto[delegateName])&&(delegate=proto[delegateName]=proto[name],isPropertyWritable(proto&&ObjectGetOwnPropertyDescriptor(proto,name)))){const patchDelegate=patchFn(delegate,delegateName,name);proto[name]=function(){return patchDelegate(this,arguments)},attachOriginToPatched(proto[name],delegate)}return delegate}function patchMacroTask(obj,funcName,metaCreator){let setNative=null;function scheduleTask(task){const data=task.data;return data.args[data.cbIdx]=function(){task.invoke.apply(this,arguments)},setNative.apply(data.target,data.args),task}setNative=patchMethod(obj,funcName,delegate=>function(self,args){const meta=metaCreator(self,args);return meta.cbIdx>=0&&\"function\"==typeof args[meta.cbIdx]?scheduleMacroTaskWithCurrentZone(meta.name,args[meta.cbIdx],meta,scheduleTask):delegate.apply(self,args)})}function attachOriginToPatched(patched,original){patched[zoneSymbol(\"OriginalDelegate\")]=original}let isDetectedIEOrEdge=!1,ieOrEdge=!1;function isIE(){try{const ua=internalWindow.navigator.userAgent;if(-1!==ua.indexOf(\"MSIE \")||-1!==ua.indexOf(\"Trident/\"))return!0}catch(error){}return!1}function isIEOrEdge(){if(isDetectedIEOrEdge)return ieOrEdge;isDetectedIEOrEdge=!0;try{const ua=internalWindow.navigator.userAgent;-1===ua.indexOf(\"MSIE \")&&-1===ua.indexOf(\"Trident/\")&&-1===ua.indexOf(\"Edge/\")||(ieOrEdge=!0)}catch(error){}return ieOrEdge}Zone.__load_patch(\"toString\",global=>{const originalFunctionToString=Function.prototype.toString,ORIGINAL_DELEGATE_SYMBOL=zoneSymbol(\"OriginalDelegate\"),PROMISE_SYMBOL=zoneSymbol(\"Promise\"),ERROR_SYMBOL=zoneSymbol(\"Error\"),newFunctionToString=function(){if(\"function\"==typeof this){const originalDelegate=this[ORIGINAL_DELEGATE_SYMBOL];if(originalDelegate)return\"function\"==typeof originalDelegate?originalFunctionToString.call(originalDelegate):Object.prototype.toString.call(originalDelegate);if(this===Promise){const nativePromise=global[PROMISE_SYMBOL];if(nativePromise)return originalFunctionToString.call(nativePromise)}if(this===Error){const nativeError=global[ERROR_SYMBOL];if(nativeError)return originalFunctionToString.call(nativeError)}}return originalFunctionToString.call(this)};newFunctionToString[ORIGINAL_DELEGATE_SYMBOL]=originalFunctionToString,Function.prototype.toString=newFunctionToString;const originalObjectToString=Object.prototype.toString;Object.prototype.toString=function(){return this instanceof Promise?\"[object Promise]\":originalObjectToString.call(this)}});let passiveSupported=!1;if(\"undefined\"!=typeof window)try{const options=Object.defineProperty({},\"passive\",{get:function(){passiveSupported=!0}});window.addEventListener(\"test\",options,options),window.removeEventListener(\"test\",options,options)}catch(err){passiveSupported=!1}const OPTIMIZED_ZONE_EVENT_TASK_DATA={useG:!0},zoneSymbolEventNames$1={},globalSources={},EVENT_NAME_SYMBOL_REGX=new RegExp(\"^\"+ZONE_SYMBOL_PREFIX+\"(\\\\w+)(true|false)$\"),IMMEDIATE_PROPAGATION_SYMBOL=zoneSymbol(\"propagationStopped\");function prepareEventNames(eventName,eventNameToString){const falseEventName=(eventNameToString?eventNameToString(eventName):eventName)+\"false\",trueEventName=(eventNameToString?eventNameToString(eventName):eventName)+\"true\",symbol=ZONE_SYMBOL_PREFIX+falseEventName,symbolCapture=ZONE_SYMBOL_PREFIX+trueEventName;zoneSymbolEventNames$1[eventName]={},zoneSymbolEventNames$1[eventName].false=symbol,zoneSymbolEventNames$1[eventName].true=symbolCapture}function patchEventTarget(_global,apis,patchOptions){const ADD_EVENT_LISTENER=patchOptions&&patchOptions.add||\"addEventListener\",REMOVE_EVENT_LISTENER=patchOptions&&patchOptions.rm||\"removeEventListener\",LISTENERS_EVENT_LISTENER=patchOptions&&patchOptions.listeners||\"eventListeners\",REMOVE_ALL_LISTENERS_EVENT_LISTENER=patchOptions&&patchOptions.rmAll||\"removeAllListeners\",zoneSymbolAddEventListener=zoneSymbol(ADD_EVENT_LISTENER),ADD_EVENT_LISTENER_SOURCE=\".\"+ADD_EVENT_LISTENER+\":\",invokeTask=function(task,target,event){if(task.isRemoved)return;const delegate=task.callback;\"object\"==typeof delegate&&delegate.handleEvent&&(task.callback=event=>delegate.handleEvent(event),task.originalDelegate=delegate),task.invoke(task,target,[event]);const options=task.options;options&&\"object\"==typeof options&&options.once&&target[REMOVE_EVENT_LISTENER].call(target,event.type,task.originalDelegate?task.originalDelegate:task.callback,options)},globalZoneAwareCallback=function(event){if(!(event=event||_global.event))return;const target=this||event.target||_global,tasks=target[zoneSymbolEventNames$1[event.type].false];if(tasks)if(1===tasks.length)invokeTask(tasks[0],target,event);else{const copyTasks=tasks.slice();for(let i=0;i<copyTasks.length&&(!event||!0!==event[IMMEDIATE_PROPAGATION_SYMBOL]);i++)invokeTask(copyTasks[i],target,event)}},globalZoneAwareCaptureCallback=function(event){if(!(event=event||_global.event))return;const target=this||event.target||_global,tasks=target[zoneSymbolEventNames$1[event.type].true];if(tasks)if(1===tasks.length)invokeTask(tasks[0],target,event);else{const copyTasks=tasks.slice();for(let i=0;i<copyTasks.length&&(!event||!0!==event[IMMEDIATE_PROPAGATION_SYMBOL]);i++)invokeTask(copyTasks[i],target,event)}};function patchEventTargetMethods(obj,patchOptions){if(!obj)return!1;let useGlobalCallback=!0;patchOptions&&void 0!==patchOptions.useG&&(useGlobalCallback=patchOptions.useG);const validateHandler=patchOptions&&patchOptions.vh;let checkDuplicate=!0;patchOptions&&void 0!==patchOptions.chkDup&&(checkDuplicate=patchOptions.chkDup);let returnTarget=!1;patchOptions&&void 0!==patchOptions.rt&&(returnTarget=patchOptions.rt);let proto=obj;for(;proto&&!proto.hasOwnProperty(ADD_EVENT_LISTENER);)proto=ObjectGetPrototypeOf(proto);if(!proto&&obj[ADD_EVENT_LISTENER]&&(proto=obj),!proto)return!1;if(proto[zoneSymbolAddEventListener])return!1;const eventNameToString=patchOptions&&patchOptions.eventNameToString,taskData={},nativeAddEventListener=proto[zoneSymbolAddEventListener]=proto[ADD_EVENT_LISTENER],nativeRemoveEventListener=proto[zoneSymbol(REMOVE_EVENT_LISTENER)]=proto[REMOVE_EVENT_LISTENER],nativeListeners=proto[zoneSymbol(LISTENERS_EVENT_LISTENER)]=proto[LISTENERS_EVENT_LISTENER],nativeRemoveAllListeners=proto[zoneSymbol(REMOVE_ALL_LISTENERS_EVENT_LISTENER)]=proto[REMOVE_ALL_LISTENERS_EVENT_LISTENER];let nativePrependEventListener;function buildEventListenerOptions(options,passive){return!passiveSupported&&\"object\"==typeof options&&options?!!options.capture:passiveSupported&&passive?\"boolean\"==typeof options?{capture:options,passive:!0}:options?\"object\"==typeof options&&!1!==options.passive?Object.assign(Object.assign({},options),{passive:!0}):options:{passive:!0}:options}patchOptions&&patchOptions.prepend&&(nativePrependEventListener=proto[zoneSymbol(patchOptions.prepend)]=proto[patchOptions.prepend]);const customSchedule=useGlobalCallback?function(task){if(!taskData.isExisting)return nativeAddEventListener.call(taskData.target,taskData.eventName,taskData.capture?globalZoneAwareCaptureCallback:globalZoneAwareCallback,taskData.options)}:function(task){return nativeAddEventListener.call(taskData.target,taskData.eventName,task.invoke,taskData.options)},customCancel=useGlobalCallback?function(task){if(!task.isRemoved){const symbolEventNames=zoneSymbolEventNames$1[task.eventName];let symbolEventName;symbolEventNames&&(symbolEventName=symbolEventNames[task.capture?\"true\":\"false\"]);const existingTasks=symbolEventName&&task.target[symbolEventName];if(existingTasks)for(let i=0;i<existingTasks.length;i++)if(existingTasks[i]===task){existingTasks.splice(i,1),task.isRemoved=!0,0===existingTasks.length&&(task.allRemoved=!0,task.target[symbolEventName]=null);break}}if(task.allRemoved)return nativeRemoveEventListener.call(task.target,task.eventName,task.capture?globalZoneAwareCaptureCallback:globalZoneAwareCallback,task.options)}:function(task){return nativeRemoveEventListener.call(task.target,task.eventName,task.invoke,task.options)},compare=patchOptions&&patchOptions.diff?patchOptions.diff:function(task,delegate){const typeOfDelegate=typeof delegate;return\"function\"===typeOfDelegate&&task.callback===delegate||\"object\"===typeOfDelegate&&task.originalDelegate===delegate},blackListedEvents=Zone[zoneSymbol(\"BLACK_LISTED_EVENTS\")],passiveEvents=_global[zoneSymbol(\"PASSIVE_EVENTS\")],makeAddListener=function(nativeListener,addSource,customScheduleFn,customCancelFn,returnTarget=!1,prepend=!1){return function(){const target=this||_global;let eventName=arguments[0];patchOptions&&patchOptions.transferEventName&&(eventName=patchOptions.transferEventName(eventName));let delegate=arguments[1];if(!delegate)return nativeListener.apply(this,arguments);if(isNode&&\"uncaughtException\"===eventName)return nativeListener.apply(this,arguments);let isHandleEvent=!1;if(\"function\"!=typeof delegate){if(!delegate.handleEvent)return nativeListener.apply(this,arguments);isHandleEvent=!0}if(validateHandler&&!validateHandler(nativeListener,delegate,target,arguments))return;const passive=passiveSupported&&!!passiveEvents&&-1!==passiveEvents.indexOf(eventName),options=buildEventListenerOptions(arguments[2],passive);if(blackListedEvents)for(let i=0;i<blackListedEvents.length;i++)if(eventName===blackListedEvents[i])return passive?nativeListener.call(target,eventName,delegate,options):nativeListener.apply(this,arguments);const capture=!!options&&(\"boolean\"==typeof options||options.capture),once=!(!options||\"object\"!=typeof options)&&options.once,zone=Zone.current;let symbolEventNames=zoneSymbolEventNames$1[eventName];symbolEventNames||(prepareEventNames(eventName,eventNameToString),symbolEventNames=zoneSymbolEventNames$1[eventName]);const symbolEventName=symbolEventNames[capture?\"true\":\"false\"];let source,existingTasks=target[symbolEventName],isExisting=!1;if(existingTasks){if(isExisting=!0,checkDuplicate)for(let i=0;i<existingTasks.length;i++)if(compare(existingTasks[i],delegate))return}else existingTasks=target[symbolEventName]=[];const constructorName=target.constructor.name,targetSource=globalSources[constructorName];targetSource&&(source=targetSource[eventName]),source||(source=constructorName+addSource+(eventNameToString?eventNameToString(eventName):eventName)),taskData.options=options,once&&(taskData.options.once=!1),taskData.target=target,taskData.capture=capture,taskData.eventName=eventName,taskData.isExisting=isExisting;const data=useGlobalCallback?OPTIMIZED_ZONE_EVENT_TASK_DATA:void 0;data&&(data.taskData=taskData);const task=zone.scheduleEventTask(source,delegate,data,customScheduleFn,customCancelFn);return taskData.target=null,data&&(data.taskData=null),once&&(options.once=!0),(passiveSupported||\"boolean\"!=typeof task.options)&&(task.options=options),task.target=target,task.capture=capture,task.eventName=eventName,isHandleEvent&&(task.originalDelegate=delegate),prepend?existingTasks.unshift(task):existingTasks.push(task),returnTarget?target:void 0}};return proto[ADD_EVENT_LISTENER]=makeAddListener(nativeAddEventListener,ADD_EVENT_LISTENER_SOURCE,customSchedule,customCancel,returnTarget),nativePrependEventListener&&(proto.prependListener=makeAddListener(nativePrependEventListener,\".prependListener:\",function(task){return nativePrependEventListener.call(taskData.target,taskData.eventName,task.invoke,taskData.options)},customCancel,returnTarget,!0)),proto[REMOVE_EVENT_LISTENER]=function(){const target=this||_global;let eventName=arguments[0];patchOptions&&patchOptions.transferEventName&&(eventName=patchOptions.transferEventName(eventName));const options=arguments[2],capture=!!options&&(\"boolean\"==typeof options||options.capture),delegate=arguments[1];if(!delegate)return nativeRemoveEventListener.apply(this,arguments);if(validateHandler&&!validateHandler(nativeRemoveEventListener,delegate,target,arguments))return;const symbolEventNames=zoneSymbolEventNames$1[eventName];let symbolEventName;symbolEventNames&&(symbolEventName=symbolEventNames[capture?\"true\":\"false\"]);const existingTasks=symbolEventName&&target[symbolEventName];if(existingTasks)for(let i=0;i<existingTasks.length;i++){const existingTask=existingTasks[i];if(compare(existingTask,delegate))return existingTasks.splice(i,1),existingTask.isRemoved=!0,0===existingTasks.length&&(existingTask.allRemoved=!0,target[symbolEventName]=null,\"string\"==typeof eventName)&&(target[ZONE_SYMBOL_PREFIX+\"ON_PROPERTY\"+eventName]=null),existingTask.zone.cancelTask(existingTask),returnTarget?target:void 0}return nativeRemoveEventListener.apply(this,arguments)},proto[LISTENERS_EVENT_LISTENER]=function(){const target=this||_global;let eventName=arguments[0];patchOptions&&patchOptions.transferEventName&&(eventName=patchOptions.transferEventName(eventName));const listeners=[],tasks=findEventTasks(target,eventNameToString?eventNameToString(eventName):eventName);for(let i=0;i<tasks.length;i++){const task=tasks[i];listeners.push(task.originalDelegate?task.originalDelegate:task.callback)}return listeners},proto[REMOVE_ALL_LISTENERS_EVENT_LISTENER]=function(){const target=this||_global;let eventName=arguments[0];if(eventName){patchOptions&&patchOptions.transferEventName&&(eventName=patchOptions.transferEventName(eventName));const symbolEventNames=zoneSymbolEventNames$1[eventName];if(symbolEventNames){const tasks=target[symbolEventNames.false],captureTasks=target[symbolEventNames.true];if(tasks){const removeTasks=tasks.slice();for(let i=0;i<removeTasks.length;i++){const task=removeTasks[i];this[REMOVE_EVENT_LISTENER].call(this,eventName,task.originalDelegate?task.originalDelegate:task.callback,task.options)}}if(captureTasks){const removeTasks=captureTasks.slice();for(let i=0;i<removeTasks.length;i++){const task=removeTasks[i];this[REMOVE_EVENT_LISTENER].call(this,eventName,task.originalDelegate?task.originalDelegate:task.callback,task.options)}}}}else{const keys=Object.keys(target);for(let i=0;i<keys.length;i++){const match=EVENT_NAME_SYMBOL_REGX.exec(keys[i]);let evtName=match&&match[1];evtName&&\"removeListener\"!==evtName&&this[REMOVE_ALL_LISTENERS_EVENT_LISTENER].call(this,evtName)}this[REMOVE_ALL_LISTENERS_EVENT_LISTENER].call(this,\"removeListener\")}if(returnTarget)return this},attachOriginToPatched(proto[ADD_EVENT_LISTENER],nativeAddEventListener),attachOriginToPatched(proto[REMOVE_EVENT_LISTENER],nativeRemoveEventListener),nativeRemoveAllListeners&&attachOriginToPatched(proto[REMOVE_ALL_LISTENERS_EVENT_LISTENER],nativeRemoveAllListeners),nativeListeners&&attachOriginToPatched(proto[LISTENERS_EVENT_LISTENER],nativeListeners),!0}let results=[];for(let i=0;i<apis.length;i++)results[i]=patchEventTargetMethods(apis[i],patchOptions);return results}function findEventTasks(target,eventName){if(!eventName){const foundTasks=[];for(let prop in target){const match=EVENT_NAME_SYMBOL_REGX.exec(prop);let evtName=match&&match[1];if(evtName&&(!eventName||evtName===eventName)){const tasks=target[prop];if(tasks)for(let i=0;i<tasks.length;i++)foundTasks.push(tasks[i])}}return foundTasks}let symbolEventName=zoneSymbolEventNames$1[eventName];symbolEventName||(prepareEventNames(eventName),symbolEventName=zoneSymbolEventNames$1[eventName]);const captureFalseTasks=target[symbolEventName.false],captureTrueTasks=target[symbolEventName.true];return captureFalseTasks?captureTrueTasks?captureFalseTasks.concat(captureTrueTasks):captureFalseTasks.slice():captureTrueTasks?captureTrueTasks.slice():[]}function patchEventPrototype(global,api){const Event=global.Event;Event&&Event.prototype&&api.patchMethod(Event.prototype,\"stopImmediatePropagation\",delegate=>function(self,args){self[IMMEDIATE_PROPAGATION_SYMBOL]=!0,delegate&&delegate.apply(self,args)})}function patchCallbacks(api,target,targetName,method,callbacks){const symbol=Zone.__symbol__(method);if(target[symbol])return;const nativeDelegate=target[symbol]=target[method];target[method]=function(name,opts,options){return opts&&opts.prototype&&callbacks.forEach(function(callback){const source=`${targetName}.${method}::`+callback,prototype=opts.prototype;if(prototype.hasOwnProperty(callback)){const descriptor=api.ObjectGetOwnPropertyDescriptor(prototype,callback);descriptor&&descriptor.value?(descriptor.value=api.wrapWithCurrentZone(descriptor.value,source),api._redefineProperty(opts.prototype,callback,descriptor)):prototype[callback]&&(prototype[callback]=api.wrapWithCurrentZone(prototype[callback],source))}else prototype[callback]&&(prototype[callback]=api.wrapWithCurrentZone(prototype[callback],source))}),nativeDelegate.call(target,name,opts,options)},api.attachOriginToPatched(target[method],nativeDelegate)}const windowEventNames=[\"absolutedeviceorientation\",\"afterinput\",\"afterprint\",\"appinstalled\",\"beforeinstallprompt\",\"beforeprint\",\"beforeunload\",\"devicelight\",\"devicemotion\",\"deviceorientation\",\"deviceorientationabsolute\",\"deviceproximity\",\"hashchange\",\"languagechange\",\"message\",\"mozbeforepaint\",\"offline\",\"online\",\"paint\",\"pageshow\",\"pagehide\",\"popstate\",\"rejectionhandled\",\"storage\",\"unhandledrejection\",\"unload\",\"userproximity\",\"vrdisplayconnected\",\"vrdisplaydisconnected\",\"vrdisplaypresentchange\"],mediaElementEventNames=[\"encrypted\",\"waitingforkey\",\"msneedkey\",\"mozinterruptbegin\",\"mozinterruptend\"],frameEventNames=[\"load\"],frameSetEventNames=[\"blur\",\"error\",\"focus\",\"load\",\"resize\",\"scroll\",\"messageerror\"],marqueeEventNames=[\"bounce\",\"finish\",\"start\"],XMLHttpRequestEventNames=[\"loadstart\",\"progress\",\"abort\",\"error\",\"load\",\"progress\",\"timeout\",\"loadend\",\"readystatechange\"],IDBIndexEventNames=[\"upgradeneeded\",\"complete\",\"abort\",\"success\",\"error\",\"blocked\",\"versionchange\",\"close\"],websocketEventNames=[\"close\",\"error\",\"open\",\"message\"],workerEventNames=[\"error\",\"message\"],eventNames=[\"abort\",\"animationcancel\",\"animationend\",\"animationiteration\",\"auxclick\",\"beforeinput\",\"blur\",\"cancel\",\"canplay\",\"canplaythrough\",\"change\",\"compositionstart\",\"compositionupdate\",\"compositionend\",\"cuechange\",\"click\",\"close\",\"contextmenu\",\"curechange\",\"dblclick\",\"drag\",\"dragend\",\"dragenter\",\"dragexit\",\"dragleave\",\"dragover\",\"drop\",\"durationchange\",\"emptied\",\"ended\",\"error\",\"focus\",\"focusin\",\"focusout\",\"gotpointercapture\",\"input\",\"invalid\",\"keydown\",\"keypress\",\"keyup\",\"load\",\"loadstart\",\"loadeddata\",\"loadedmetadata\",\"lostpointercapture\",\"mousedown\",\"mouseenter\",\"mouseleave\",\"mousemove\",\"mouseout\",\"mouseover\",\"mouseup\",\"mousewheel\",\"orientationchange\",\"pause\",\"play\",\"playing\",\"pointercancel\",\"pointerdown\",\"pointerenter\",\"pointerleave\",\"pointerlockchange\",\"mozpointerlockchange\",\"webkitpointerlockerchange\",\"pointerlockerror\",\"mozpointerlockerror\",\"webkitpointerlockerror\",\"pointermove\",\"pointout\",\"pointerover\",\"pointerup\",\"progress\",\"ratechange\",\"reset\",\"resize\",\"scroll\",\"seeked\",\"seeking\",\"select\",\"selectionchange\",\"selectstart\",\"show\",\"sort\",\"stalled\",\"submit\",\"suspend\",\"timeupdate\",\"volumechange\",\"touchcancel\",\"touchmove\",\"touchstart\",\"touchend\",\"transitioncancel\",\"transitionend\",\"waiting\",\"wheel\"].concat([\"webglcontextrestored\",\"webglcontextlost\",\"webglcontextcreationerror\"],[\"autocomplete\",\"autocompleteerror\"],[\"toggle\"],[\"afterscriptexecute\",\"beforescriptexecute\",\"DOMContentLoaded\",\"freeze\",\"fullscreenchange\",\"mozfullscreenchange\",\"webkitfullscreenchange\",\"msfullscreenchange\",\"fullscreenerror\",\"mozfullscreenerror\",\"webkitfullscreenerror\",\"msfullscreenerror\",\"readystatechange\",\"visibilitychange\",\"resume\"],windowEventNames,[\"beforecopy\",\"beforecut\",\"beforepaste\",\"copy\",\"cut\",\"paste\",\"dragstart\",\"loadend\",\"animationstart\",\"search\",\"transitionrun\",\"transitionstart\",\"webkitanimationend\",\"webkitanimationiteration\",\"webkitanimationstart\",\"webkittransitionend\"],[\"activate\",\"afterupdate\",\"ariarequest\",\"beforeactivate\",\"beforedeactivate\",\"beforeeditfocus\",\"beforeupdate\",\"cellchange\",\"controlselect\",\"dataavailable\",\"datasetchanged\",\"datasetcomplete\",\"errorupdate\",\"filterchange\",\"layoutcomplete\",\"losecapture\",\"move\",\"moveend\",\"movestart\",\"propertychange\",\"resizeend\",\"resizestart\",\"rowenter\",\"rowexit\",\"rowsdelete\",\"rowsinserted\",\"command\",\"compassneedscalibration\",\"deactivate\",\"help\",\"mscontentzoom\",\"msmanipulationstatechanged\",\"msgesturechange\",\"msgesturedoubletap\",\"msgestureend\",\"msgesturehold\",\"msgesturestart\",\"msgesturetap\",\"msgotpointercapture\",\"msinertiastart\",\"mslostpointercapture\",\"mspointercancel\",\"mspointerdown\",\"mspointerenter\",\"mspointerhover\",\"mspointerleave\",\"mspointermove\",\"mspointerout\",\"mspointerover\",\"mspointerup\",\"pointerout\",\"mssitemodejumplistitemremoved\",\"msthumbnailclick\",\"stop\",\"storagecommit\"]);function filterProperties(target,onProperties,ignoreProperties){if(!ignoreProperties||0===ignoreProperties.length)return onProperties;const tip=ignoreProperties.filter(ip=>ip.target===target);if(!tip||0===tip.length)return onProperties;const targetIgnoreProperties=tip[0].ignoreProperties;return onProperties.filter(op=>-1===targetIgnoreProperties.indexOf(op))}function patchFilteredProperties(target,onProperties,ignoreProperties,prototype){target&&patchOnProperties(target,filterProperties(target,onProperties,ignoreProperties),prototype)}function propertyDescriptorPatch(api,_global){if(isNode&&!isMix)return;if(Zone[api.symbol(\"patchEvents\")])return;const supportsWebSocket=\"undefined\"!=typeof WebSocket,ignoreProperties=_global.__Zone_ignore_on_properties;if(isBrowser){const internalWindow=window,ignoreErrorProperties=isIE?[{target:internalWindow,ignoreProperties:[\"error\"]}]:[];patchFilteredProperties(internalWindow,eventNames.concat([\"messageerror\"]),ignoreProperties?ignoreProperties.concat(ignoreErrorProperties):ignoreProperties,ObjectGetPrototypeOf(internalWindow)),patchFilteredProperties(Document.prototype,eventNames,ignoreProperties),void 0!==internalWindow.SVGElement&&patchFilteredProperties(internalWindow.SVGElement.prototype,eventNames,ignoreProperties),patchFilteredProperties(Element.prototype,eventNames,ignoreProperties),patchFilteredProperties(HTMLElement.prototype,eventNames,ignoreProperties),patchFilteredProperties(HTMLMediaElement.prototype,mediaElementEventNames,ignoreProperties),patchFilteredProperties(HTMLFrameSetElement.prototype,windowEventNames.concat(frameSetEventNames),ignoreProperties),patchFilteredProperties(HTMLBodyElement.prototype,windowEventNames.concat(frameSetEventNames),ignoreProperties),patchFilteredProperties(HTMLFrameElement.prototype,frameEventNames,ignoreProperties),patchFilteredProperties(HTMLIFrameElement.prototype,frameEventNames,ignoreProperties);const HTMLMarqueeElement=internalWindow.HTMLMarqueeElement;HTMLMarqueeElement&&patchFilteredProperties(HTMLMarqueeElement.prototype,marqueeEventNames,ignoreProperties);const Worker=internalWindow.Worker;Worker&&patchFilteredProperties(Worker.prototype,workerEventNames,ignoreProperties)}const XMLHttpRequest=_global.XMLHttpRequest;XMLHttpRequest&&patchFilteredProperties(XMLHttpRequest.prototype,XMLHttpRequestEventNames,ignoreProperties);const XMLHttpRequestEventTarget=_global.XMLHttpRequestEventTarget;XMLHttpRequestEventTarget&&patchFilteredProperties(XMLHttpRequestEventTarget&&XMLHttpRequestEventTarget.prototype,XMLHttpRequestEventNames,ignoreProperties),\"undefined\"!=typeof IDBIndex&&(patchFilteredProperties(IDBIndex.prototype,IDBIndexEventNames,ignoreProperties),patchFilteredProperties(IDBRequest.prototype,IDBIndexEventNames,ignoreProperties),patchFilteredProperties(IDBOpenDBRequest.prototype,IDBIndexEventNames,ignoreProperties),patchFilteredProperties(IDBDatabase.prototype,IDBIndexEventNames,ignoreProperties),patchFilteredProperties(IDBTransaction.prototype,IDBIndexEventNames,ignoreProperties),patchFilteredProperties(IDBCursor.prototype,IDBIndexEventNames,ignoreProperties)),supportsWebSocket&&patchFilteredProperties(WebSocket.prototype,websocketEventNames,ignoreProperties)}Zone.__load_patch(\"util\",(global,Zone,api)=>{api.patchOnProperties=patchOnProperties,api.patchMethod=patchMethod,api.bindArguments=bindArguments,api.patchMacroTask=patchMacroTask;const SYMBOL_BLACK_LISTED_EVENTS=Zone.__symbol__(\"BLACK_LISTED_EVENTS\"),SYMBOL_UNPATCHED_EVENTS=Zone.__symbol__(\"UNPATCHED_EVENTS\");global[SYMBOL_UNPATCHED_EVENTS]&&(global[SYMBOL_BLACK_LISTED_EVENTS]=global[SYMBOL_UNPATCHED_EVENTS]),global[SYMBOL_BLACK_LISTED_EVENTS]&&(Zone[SYMBOL_BLACK_LISTED_EVENTS]=Zone[SYMBOL_UNPATCHED_EVENTS]=global[SYMBOL_BLACK_LISTED_EVENTS]),api.patchEventPrototype=patchEventPrototype,api.patchEventTarget=patchEventTarget,api.isIEOrEdge=isIEOrEdge,api.ObjectDefineProperty=ObjectDefineProperty,api.ObjectGetOwnPropertyDescriptor=ObjectGetOwnPropertyDescriptor,api.ObjectCreate=ObjectCreate,api.ArraySlice=ArraySlice,api.patchClass=patchClass,api.wrapWithCurrentZone=wrapWithCurrentZone,api.filterProperties=filterProperties,api.attachOriginToPatched=attachOriginToPatched,api._redefineProperty=Object.defineProperty,api.patchCallbacks=patchCallbacks,api.getGlobalObjects=()=>({globalSources:globalSources,zoneSymbolEventNames:zoneSymbolEventNames$1,eventNames:eventNames,isBrowser:isBrowser,isMix:isMix,isNode:isNode,TRUE_STR:\"true\",FALSE_STR:\"false\",ZONE_SYMBOL_PREFIX:ZONE_SYMBOL_PREFIX,ADD_EVENT_LISTENER_STR:\"addEventListener\",REMOVE_EVENT_LISTENER_STR:\"removeEventListener\"})});const taskSymbol=zoneSymbol(\"zoneTask\");function patchTimer(window,setName,cancelName,nameSuffix){let setNative=null,clearNative=null;cancelName+=nameSuffix;const tasksByHandleId={};function scheduleTask(task){const data=task.data;return data.args[0]=function(){try{task.invoke.apply(this,arguments)}finally{task.data&&task.data.isPeriodic||(\"number\"==typeof data.handleId?delete tasksByHandleId[data.handleId]:data.handleId&&(data.handleId[taskSymbol]=null))}},data.handleId=setNative.apply(window,data.args),task}function clearTask(task){return clearNative(task.data.handleId)}setNative=patchMethod(window,setName+=nameSuffix,delegate=>function(self,args){if(\"function\"==typeof args[0]){const task=scheduleMacroTaskWithCurrentZone(setName,args[0],{isPeriodic:\"Interval\"===nameSuffix,delay:\"Timeout\"===nameSuffix||\"Interval\"===nameSuffix?args[1]||0:void 0,args:args},scheduleTask,clearTask);if(!task)return task;const handle=task.data.handleId;return\"number\"==typeof handle?tasksByHandleId[handle]=task:handle&&(handle[taskSymbol]=task),handle&&handle.ref&&handle.unref&&\"function\"==typeof handle.ref&&\"function\"==typeof handle.unref&&(task.ref=handle.ref.bind(handle),task.unref=handle.unref.bind(handle)),\"number\"==typeof handle||handle?handle:task}return delegate.apply(window,args)}),clearNative=patchMethod(window,cancelName,delegate=>function(self,args){const id=args[0];let task;\"number\"==typeof id?task=tasksByHandleId[id]:(task=id&&id[taskSymbol],task||(task=id)),task&&\"string\"==typeof task.type?\"notScheduled\"!==task.state&&(task.cancelFn&&task.data.isPeriodic||0===task.runCount)&&(\"number\"==typeof id?delete tasksByHandleId[id]:id&&(id[taskSymbol]=null),task.zone.cancelTask(task)):delegate.apply(window,args)})}function eventTargetPatch(_global,api){if(Zone[api.symbol(\"patchEventTarget\")])return;const{eventNames:eventNames,zoneSymbolEventNames:zoneSymbolEventNames,TRUE_STR:TRUE_STR,FALSE_STR:FALSE_STR,ZONE_SYMBOL_PREFIX:ZONE_SYMBOL_PREFIX}=api.getGlobalObjects();for(let i=0;i<eventNames.length;i++){const eventName=eventNames[i],symbol=ZONE_SYMBOL_PREFIX+(eventName+FALSE_STR),symbolCapture=ZONE_SYMBOL_PREFIX+(eventName+TRUE_STR);zoneSymbolEventNames[eventName]={},zoneSymbolEventNames[eventName][FALSE_STR]=symbol,zoneSymbolEventNames[eventName][TRUE_STR]=symbolCapture}const EVENT_TARGET=_global.EventTarget;return EVENT_TARGET&&EVENT_TARGET.prototype?(api.patchEventTarget(_global,[EVENT_TARGET&&EVENT_TARGET.prototype]),!0):void 0}Zone.__load_patch(\"legacy\",global=>{const legacyPatch=global[Zone.__symbol__(\"legacyPatch\")];legacyPatch&&legacyPatch()}),Zone.__load_patch(\"timers\",global=>{patchTimer(global,\"set\",\"clear\",\"Timeout\"),patchTimer(global,\"set\",\"clear\",\"Interval\"),patchTimer(global,\"set\",\"clear\",\"Immediate\")}),Zone.__load_patch(\"requestAnimationFrame\",global=>{patchTimer(global,\"request\",\"cancel\",\"AnimationFrame\"),patchTimer(global,\"mozRequest\",\"mozCancel\",\"AnimationFrame\"),patchTimer(global,\"webkitRequest\",\"webkitCancel\",\"AnimationFrame\")}),Zone.__load_patch(\"blocking\",(global,Zone)=>{const blockingMethods=[\"alert\",\"prompt\",\"confirm\"];for(let i=0;i<blockingMethods.length;i++)patchMethod(global,blockingMethods[i],(delegate,symbol,name)=>function(s,args){return Zone.current.run(delegate,global,args,name)})}),Zone.__load_patch(\"EventTarget\",(global,Zone,api)=>{(function(global,api){api.patchEventPrototype(global,api)})(global,api),eventTargetPatch(global,api);const XMLHttpRequestEventTarget=global.XMLHttpRequestEventTarget;XMLHttpRequestEventTarget&&XMLHttpRequestEventTarget.prototype&&api.patchEventTarget(global,[XMLHttpRequestEventTarget.prototype]),patchClass(\"MutationObserver\"),patchClass(\"WebKitMutationObserver\"),patchClass(\"IntersectionObserver\"),patchClass(\"FileReader\")}),Zone.__load_patch(\"on_property\",(global,Zone,api)=>{propertyDescriptorPatch(api,global)}),Zone.__load_patch(\"customElements\",(global,Zone,api)=>{!function(_global,api){const{isBrowser:isBrowser,isMix:isMix}=api.getGlobalObjects();(isBrowser||isMix)&&_global.customElements&&\"customElements\"in _global&&api.patchCallbacks(api,_global.customElements,\"customElements\",\"define\",[\"connectedCallback\",\"disconnectedCallback\",\"adoptedCallback\",\"attributeChangedCallback\"])}(global,api)}),Zone.__load_patch(\"XHR\",(global,Zone)=>{!function(window){const XMLHttpRequest=window.XMLHttpRequest;if(!XMLHttpRequest)return;const XMLHttpRequestPrototype=XMLHttpRequest.prototype;let oriAddListener=XMLHttpRequestPrototype[ZONE_SYMBOL_ADD_EVENT_LISTENER],oriRemoveListener=XMLHttpRequestPrototype[ZONE_SYMBOL_REMOVE_EVENT_LISTENER];if(!oriAddListener){const XMLHttpRequestEventTarget=window.XMLHttpRequestEventTarget;if(XMLHttpRequestEventTarget){const XMLHttpRequestEventTargetPrototype=XMLHttpRequestEventTarget.prototype;oriAddListener=XMLHttpRequestEventTargetPrototype[ZONE_SYMBOL_ADD_EVENT_LISTENER],oriRemoveListener=XMLHttpRequestEventTargetPrototype[ZONE_SYMBOL_REMOVE_EVENT_LISTENER]}}function scheduleTask(task){const data=task.data,target=data.target;target[XHR_SCHEDULED]=!1,target[XHR_ERROR_BEFORE_SCHEDULED]=!1;const listener=target[XHR_LISTENER];oriAddListener||(oriAddListener=target[ZONE_SYMBOL_ADD_EVENT_LISTENER],oriRemoveListener=target[ZONE_SYMBOL_REMOVE_EVENT_LISTENER]),listener&&oriRemoveListener.call(target,\"readystatechange\",listener);const newListener=target[XHR_LISTENER]=()=>{if(target.readyState===target.DONE)if(!data.aborted&&target[XHR_SCHEDULED]&&\"scheduled\"===task.state){const loadTasks=target[Zone.__symbol__(\"loadfalse\")];if(loadTasks&&loadTasks.length>0){const oriInvoke=task.invoke;task.invoke=function(){const loadTasks=target[Zone.__symbol__(\"loadfalse\")];for(let i=0;i<loadTasks.length;i++)loadTasks[i]===task&&loadTasks.splice(i,1);data.aborted||\"scheduled\"!==task.state||oriInvoke.call(task)},loadTasks.push(task)}else task.invoke()}else data.aborted||!1!==target[XHR_SCHEDULED]||(target[XHR_ERROR_BEFORE_SCHEDULED]=!0)};return oriAddListener.call(target,\"readystatechange\",newListener),target[XHR_TASK]||(target[XHR_TASK]=task),sendNative.apply(target,data.args),target[XHR_SCHEDULED]=!0,task}function placeholderCallback(){}function clearTask(task){const data=task.data;return data.aborted=!0,abortNative.apply(data.target,data.args)}const openNative=patchMethod(XMLHttpRequestPrototype,\"open\",()=>function(self,args){return self[XHR_SYNC]=0==args[2],self[XHR_URL]=args[1],openNative.apply(self,args)}),fetchTaskAborting=zoneSymbol(\"fetchTaskAborting\"),fetchTaskScheduling=zoneSymbol(\"fetchTaskScheduling\"),sendNative=patchMethod(XMLHttpRequestPrototype,\"send\",()=>function(self,args){if(!0===Zone.current[fetchTaskScheduling])return sendNative.apply(self,args);if(self[XHR_SYNC])return sendNative.apply(self,args);{const options={target:self,url:self[XHR_URL],isPeriodic:!1,args:args,aborted:!1},task=scheduleMacroTaskWithCurrentZone(\"XMLHttpRequest.send\",placeholderCallback,options,scheduleTask,clearTask);self&&!0===self[XHR_ERROR_BEFORE_SCHEDULED]&&!options.aborted&&\"scheduled\"===task.state&&task.invoke()}}),abortNative=patchMethod(XMLHttpRequestPrototype,\"abort\",()=>function(self,args){const task=self[XHR_TASK];if(task&&\"string\"==typeof task.type){if(null==task.cancelFn||task.data&&task.data.aborted)return;task.zone.cancelTask(task)}else if(!0===Zone.current[fetchTaskAborting])return abortNative.apply(self,args)})}(global);const XHR_TASK=zoneSymbol(\"xhrTask\"),XHR_SYNC=zoneSymbol(\"xhrSync\"),XHR_LISTENER=zoneSymbol(\"xhrListener\"),XHR_SCHEDULED=zoneSymbol(\"xhrScheduled\"),XHR_URL=zoneSymbol(\"xhrURL\"),XHR_ERROR_BEFORE_SCHEDULED=zoneSymbol(\"xhrErrorBeforeScheduled\")}),Zone.__load_patch(\"geolocation\",global=>{global.navigator&&global.navigator.geolocation&&function(prototype,fnNames){const source=prototype.constructor.name;for(let i=0;i<fnNames.length;i++){const name=fnNames[i],delegate=prototype[name];if(delegate){if(!isPropertyWritable(ObjectGetOwnPropertyDescriptor(prototype,name)))continue;prototype[name]=(delegate=>{const patched=function(){return delegate.apply(this,bindArguments(arguments,source+\".\"+name))};return attachOriginToPatched(patched,delegate),patched})(delegate)}}}(global.navigator.geolocation,[\"getCurrentPosition\",\"watchPosition\"])}),Zone.__load_patch(\"PromiseRejectionEvent\",(global,Zone)=>{function findPromiseRejectionHandler(evtName){return function(e){findEventTasks(global,evtName).forEach(eventTask=>{const PromiseRejectionEvent=global.PromiseRejectionEvent;if(PromiseRejectionEvent){const evt=new PromiseRejectionEvent(evtName,{promise:e.promise,reason:e.rejection});eventTask.invoke(evt)}})}}global.PromiseRejectionEvent&&(Zone[zoneSymbol(\"unhandledPromiseRejectionHandler\")]=findPromiseRejectionHandler(\"unhandledrejection\"),Zone[zoneSymbol(\"rejectionHandledHandler\")]=findPromiseRejectionHandler(\"rejectionhandled\"))})})?__WEBPACK_AMD_DEFINE_FACTORY__.call(exports,__webpack_require__,exports,module):__WEBPACK_AMD_DEFINE_FACTORY__)||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)}},[[2,2]]]);","name":"polyfills-es2015.38498d8e891a498c2863.js","input":"(window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || []).push([[13],{\n\n/***/ 2:\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(\"hN/g\");\n\n\n/***/ }),\n\n/***/ \"N/DB\":\n/***/ (function(module, exports) {\n\n/**\r\n * @license Angular v11.0.9\r\n * (c) 2010-2020 Google LLC. https://angular.io/\r\n * License: MIT\r\n */\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst __globalThis = typeof globalThis !== 'undefined' && globalThis;\r\nconst __window = typeof window !== 'undefined' && window;\r\nconst __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\r\n    self instanceof WorkerGlobalScope && self;\r\nconst __global = typeof global !== 'undefined' && global;\r\n// Always use __globalThis if available; this is the spec-defined global variable across all\r\n// environments.\r\n// Then fallback to __global first; in Node tests both __global and __window may be defined.\r\nconst _global = __globalThis || __global || __window || __self;\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Tag a template literal string for localization.\r\n *\r\n * For example:\r\n *\r\n * ```ts\r\n * $localize `some string to localize`\r\n * ```\r\n *\r\n * **Providing meaning, description and id**\r\n *\r\n * You can optionally specify one or more of `meaning`, `description` and `id` for a localized\r\n * string by pre-pending it with a colon delimited block of the form:\r\n *\r\n * ```ts\r\n * $localize`:meaning|description@@id:source message text`;\r\n *\r\n * $localize`:meaning|:source message text`;\r\n * $localize`:description:source message text`;\r\n * $localize`:@@id:source message text`;\r\n * ```\r\n *\r\n * This format is the same as that used for `i18n` markers in Angular templates. See the\r\n * [Angular 18n guide](guide/i18n#template-translations).\r\n *\r\n * **Naming placeholders**\r\n *\r\n * If the template literal string contains expressions, then the expressions will be automatically\r\n * associated with placeholder names for you.\r\n *\r\n * For example:\r\n *\r\n * ```ts\r\n * $localize `Hi ${name}! There are ${items.length} items.`;\r\n * ```\r\n *\r\n * will generate a message-source of `Hi {$PH}! There are {$PH_1} items`.\r\n *\r\n * The recommended practice is to name the placeholder associated with each expression though.\r\n *\r\n * Do this by providing the placeholder name wrapped in `:` characters directly after the\r\n * expression. These placeholder names are stripped out of the rendered localized string.\r\n *\r\n * For example, to name the `items.length` expression placeholder `itemCount` you write:\r\n *\r\n * ```ts\r\n * $localize `There are ${items.length}:itemCount: items`;\r\n * ```\r\n *\r\n * **Escaping colon markers**\r\n *\r\n * If you need to use a `:` character directly at the start of a tagged string that has no\r\n * metadata block, or directly after a substitution expression that has no name you must escape\r\n * the `:` by preceding it with a backslash:\r\n *\r\n * For example:\r\n *\r\n * ```ts\r\n * // message has a metadata block so no need to escape colon\r\n * $localize `:some description::this message starts with a colon (:)`;\r\n * // no metadata block so the colon must be escaped\r\n * $localize `\\:this message starts with a colon (:)`;\r\n * ```\r\n *\r\n * ```ts\r\n * // named substitution so no need to escape colon\r\n * $localize `${label}:label:: ${}`\r\n * // anonymous substitution so colon must be escaped\r\n * $localize `${label}\\: ${}`\r\n * ```\r\n *\r\n * **Processing localized strings:**\r\n *\r\n * There are three scenarios:\r\n *\r\n * * **compile-time inlining**: the `$localize` tag is transformed at compile time by a\r\n * transpiler, removing the tag and replacing the template literal string with a translated\r\n * literal string from a collection of translations provided to the transpilation tool.\r\n *\r\n * * **run-time evaluation**: the `$localize` tag is a run-time function that replaces and\r\n * reorders the parts (static strings and expressions) of the template literal string with strings\r\n * from a collection of translations loaded at run-time.\r\n *\r\n * * **pass-through evaluation**: the `$localize` tag is a run-time function that simply evaluates\r\n * the original template literal string without applying any translations to the parts. This\r\n * version is used during development or where there is no need to translate the localized\r\n * template literals.\r\n * @param messageParts a collection of the static parts of the template string.\r\n * @param expressions a collection of the values of each placeholder in the template string.\r\n * @returns the translated string, with the `messageParts` and `expressions` interleaved together.\r\n */\r\nconst $localize = function (messageParts, ...expressions) {\r\n    if ($localize.translate) {\r\n        // Don't use array expansion here to avoid the compiler adding `__read()` helper unnecessarily.\r\n        const translation = $localize.translate(messageParts, expressions);\r\n        messageParts = translation[0];\r\n        expressions = translation[1];\r\n    }\r\n    let message = stripBlock(messageParts[0], messageParts.raw[0]);\r\n    for (let i = 1; i < messageParts.length; i++) {\r\n        message += expressions[i - 1] + stripBlock(messageParts[i], messageParts.raw[i]);\r\n    }\r\n    return message;\r\n};\r\nconst BLOCK_MARKER = ':';\r\n/**\r\n * Strip a delimited \"block\" from the start of the `messagePart`, if it is found.\r\n *\r\n * If a marker character (:) actually appears in the content at the start of a tagged string or\r\n * after a substitution expression, where a block has not been provided the character must be\r\n * escaped with a backslash, `\\:`. This function checks for this by looking at the `raw`\r\n * messagePart, which should still contain the backslash.\r\n *\r\n * @param messagePart The cooked message part to process.\r\n * @param rawMessagePart The raw message part to check.\r\n * @returns the message part with the placeholder name stripped, if found.\r\n * @throws an error if the block is unterminated\r\n */\r\nfunction stripBlock(messagePart, rawMessagePart) {\r\n    return rawMessagePart.charAt(0) === BLOCK_MARKER ?\r\n        messagePart.substring(findEndOfBlock(messagePart, rawMessagePart) + 1) :\r\n        messagePart;\r\n}\r\n/**\r\n * Find the end of a \"marked block\" indicated by the first non-escaped colon.\r\n *\r\n * @param cooked The cooked string (where escaped chars have been processed)\r\n * @param raw The raw string (where escape sequences are still in place)\r\n *\r\n * @returns the index of the end of block marker\r\n * @throws an error if the block is unterminated\r\n */\r\nfunction findEndOfBlock(cooked, raw) {\r\n    /***********************************************************************************************\r\n     * This function is repeated in `src/utils/messages.ts` and the two should be kept in sync.\r\n     * The reason is that this file is marked as having side-effects, and if we import `messages.ts`\r\n     * into it, the whole of `src/utils` will be included in this bundle and none of the functions\r\n     * will be tree shaken.\r\n     ***********************************************************************************************/\r\n    for (let cookedIndex = 1, rawIndex = 1; cookedIndex < cooked.length; cookedIndex++, rawIndex++) {\r\n        if (raw[rawIndex] === '\\\\') {\r\n            rawIndex++;\r\n        }\r\n        else if (cooked[cookedIndex] === BLOCK_MARKER) {\r\n            return cookedIndex;\r\n        }\r\n    }\r\n    throw new Error(`Unterminated $localize metadata block in \"${raw}\".`);\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n// Attach $localize to the global context, as a side-effect of this module.\r\n_global.$localize = $localize;\r\n//# sourceMappingURL=init.js.map\r\n\n\n/***/ }),\n\n/***/ \"hN/g\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _angular_localize_init__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"N/DB\");\n/* harmony import */ var _angular_localize_init__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_angular_localize_init__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var zone_js_dist_zone__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\"pDpN\");\n/* harmony import */ var zone_js_dist_zone__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(zone_js_dist_zone__WEBPACK_IMPORTED_MODULE_1__);\n/***************************************************************************************************\n * Load `$localize` onto the global scope - used if i18n tags appear in Angular templates.\n */\n\n/**\n * This file includes polyfills needed by Angular and is loaded before the app.\n * You can add your own extra polyfills to this file.\n *\n * This file is divided into 2 sections:\n *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.\n *   2. Application imports. Files imported after ZoneJS that should be loaded before your main\n *      file.\n *\n * The current setup is for so-called \"evergreen\" browsers; the last versions of browsers that\n * automatically update themselves. This includes Safari >= 10, Chrome >= 55 (including Opera),\n * Edge >= 13 on the desktop, and iOS 10 and Chrome on mobile.\n *\n * Learn more in https://angular.io/guide/browser-support\n */\n/***************************************************************************************************\n * BROWSER POLYFILLS\n */\n/** IE10 and IE11 requires the following for NgClass support on SVG elements */\n// import 'classlist.js';  // Run `npm install --save classlist.js`.\n/**\n * Web Animations `@angular/platform-browser/animations`\n * Only required if AnimationBuilder is used within the application and using IE/Edge or Safari.\n * Standard animation support in Angular DOES NOT require any polyfills (as of Angular 6.0).\n */\n// import 'web-animations-js';  // Run `npm install --save web-animations-js`.\n/**\n * By default, zone.js will patch all possible macroTask and DomEvents\n * user can disable parts of macroTask/DomEvents patch by setting following flags\n * because those flags need to be set before `zone.js` being loaded, and webpack\n * will put import in the top of bundle, so user need to create a separate file\n * in this directory (for example: zone-flags.ts), and put the following flags\n * into that file, and then add the following code before importing zone.js.\n * import './zone-flags';\n *\n * The flags allowed in zone-flags.ts are listed here.\n *\n * The following flags will work for all browsers.\n *\n * (window as any).__Zone_disable_requestAnimationFrame = true; // disable patch requestAnimationFrame\n * (window as any).__Zone_disable_on_property = true; // disable patch onProperty such as onclick\n * (window as any).__zone_symbol__UNPATCHED_EVENTS = ['scroll', 'mousemove']; // disable patch specified eventNames\n *\n *  in IE/Edge developer tools, the addEventListener will also be wrapped by zone.js\n *  with the following flag, it will bypass `zone.js` patch for IE/Edge\n *\n *  (window as any).__Zone_enable_cross_context_check = true;\n *\n */\n/***************************************************************************************************\n * Zone JS is required by default for Angular itself.\n */\n // Included with Angular CLI.\n/***************************************************************************************************\n * APPLICATION IMPORTS\n */\n\n\n/***/ }),\n\n/***/ \"pDpN\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\r\n* @license Angular v9.1.0-next.4+61.sha-e552591.with-local-changes\r\n* (c) 2010-2020 Google LLC. https://angular.io/\r\n* License: MIT\r\n*/\r\n(function (factory) {\r\n     true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) :\r\n    undefined;\r\n}((function () { 'use strict';\r\n\r\n    /**\r\n     * @license\r\n     * Copyright Google Inc. All Rights Reserved.\r\n     *\r\n     * Use of this source code is governed by an MIT-style license that can be\r\n     * found in the LICENSE file at https://angular.io/license\r\n     */\r\n    const Zone$1 = (function (global) {\r\n        const performance = global['performance'];\r\n        function mark(name) { performance && performance['mark'] && performance['mark'](name); }\r\n        function performanceMeasure(name, label) {\r\n            performance && performance['measure'] && performance['measure'](name, label);\r\n        }\r\n        mark('Zone');\r\n        // Initialize before it's accessed below.\r\n        // __Zone_symbol_prefix global can be used to override the default zone\r\n        // symbol prefix with a custom one if needed.\r\n        const symbolPrefix = global['__Zone_symbol_prefix'] || '__zone_symbol__';\r\n        function __symbol__(name) { return symbolPrefix + name; }\r\n        const checkDuplicate = global[__symbol__('forceDuplicateZoneCheck')] === true;\r\n        if (global['Zone']) {\r\n            // if global['Zone'] already exists (maybe zone.js was already loaded or\r\n            // some other lib also registered a global object named Zone), we may need\r\n            // to throw an error, but sometimes user may not want this error.\r\n            // For example,\r\n            // we have two web pages, page1 includes zone.js, page2 doesn't.\r\n            // and the 1st time user load page1 and page2, everything work fine,\r\n            // but when user load page2 again, error occurs because global['Zone'] already exists.\r\n            // so we add a flag to let user choose whether to throw this error or not.\r\n            // By default, if existing Zone is from zone.js, we will not throw the error.\r\n            if (checkDuplicate || typeof global['Zone'].__symbol__ !== 'function') {\r\n                throw new Error('Zone already loaded.');\r\n            }\r\n            else {\r\n                return global['Zone'];\r\n            }\r\n        }\r\n        class Zone {\r\n            constructor(parent, zoneSpec) {\r\n                this._parent = parent;\r\n                this._name = zoneSpec ? zoneSpec.name || 'unnamed' : '<root>';\r\n                this._properties = zoneSpec && zoneSpec.properties || {};\r\n                this._zoneDelegate =\r\n                    new ZoneDelegate(this, this._parent && this._parent._zoneDelegate, zoneSpec);\r\n            }\r\n            static assertZonePatched() {\r\n                if (global['Promise'] !== patches['ZoneAwarePromise']) {\r\n                    throw new Error('Zone.js has detected that ZoneAwarePromise `(window|global).Promise` ' +\r\n                        'has been overwritten.\\n' +\r\n                        'Most likely cause is that a Promise polyfill has been loaded ' +\r\n                        'after Zone.js (Polyfilling Promise api is not necessary when zone.js is loaded. ' +\r\n                        'If you must load one, do so before loading zone.js.)');\r\n                }\r\n            }\r\n            static get root() {\r\n                let zone = Zone.current;\r\n                while (zone.parent) {\r\n                    zone = zone.parent;\r\n                }\r\n                return zone;\r\n            }\r\n            static get current() { return _currentZoneFrame.zone; }\r\n            static get currentTask() { return _currentTask; }\r\n            // tslint:disable-next-line:require-internal-with-underscore\r\n            static __load_patch(name, fn) {\r\n                if (patches.hasOwnProperty(name)) {\r\n                    if (checkDuplicate) {\r\n                        throw Error('Already loaded patch: ' + name);\r\n                    }\r\n                }\r\n                else if (!global['__Zone_disable_' + name]) {\r\n                    const perfName = 'Zone:' + name;\r\n                    mark(perfName);\r\n                    patches[name] = fn(global, Zone, _api);\r\n                    performanceMeasure(perfName, perfName);\r\n                }\r\n            }\r\n            get parent() { return this._parent; }\r\n            get name() { return this._name; }\r\n            get(key) {\r\n                const zone = this.getZoneWith(key);\r\n                if (zone)\r\n                    return zone._properties[key];\r\n            }\r\n            getZoneWith(key) {\r\n                let current = this;\r\n                while (current) {\r\n                    if (current._properties.hasOwnProperty(key)) {\r\n                        return current;\r\n                    }\r\n                    current = current._parent;\r\n                }\r\n                return null;\r\n            }\r\n            fork(zoneSpec) {\r\n                if (!zoneSpec)\r\n                    throw new Error('ZoneSpec required!');\r\n                return this._zoneDelegate.fork(this, zoneSpec);\r\n            }\r\n            wrap(callback, source) {\r\n                if (typeof callback !== 'function') {\r\n                    throw new Error('Expecting function got: ' + callback);\r\n                }\r\n                const _callback = this._zoneDelegate.intercept(this, callback, source);\r\n                const zone = this;\r\n                return function () {\r\n                    return zone.runGuarded(_callback, this, arguments, source);\r\n                };\r\n            }\r\n            run(callback, applyThis, applyArgs, source) {\r\n                _currentZoneFrame = { parent: _currentZoneFrame, zone: this };\r\n                try {\r\n                    return this._zoneDelegate.invoke(this, callback, applyThis, applyArgs, source);\r\n                }\r\n                finally {\r\n                    _currentZoneFrame = _currentZoneFrame.parent;\r\n                }\r\n            }\r\n            runGuarded(callback, applyThis = null, applyArgs, source) {\r\n                _currentZoneFrame = { parent: _currentZoneFrame, zone: this };\r\n                try {\r\n                    try {\r\n                        return this._zoneDelegate.invoke(this, callback, applyThis, applyArgs, source);\r\n                    }\r\n                    catch (error) {\r\n                        if (this._zoneDelegate.handleError(this, error)) {\r\n                            throw error;\r\n                        }\r\n                    }\r\n                }\r\n                finally {\r\n                    _currentZoneFrame = _currentZoneFrame.parent;\r\n                }\r\n            }\r\n            runTask(task, applyThis, applyArgs) {\r\n                if (task.zone != this) {\r\n                    throw new Error('A task can only be run in the zone of creation! (Creation: ' +\r\n                        (task.zone || NO_ZONE).name + '; Execution: ' + this.name + ')');\r\n                }\r\n                // https://github.com/angular/zone.js/issues/778, sometimes eventTask\r\n                // will run in notScheduled(canceled) state, we should not try to\r\n                // run such kind of task but just return\r\n                if (task.state === notScheduled && (task.type === eventTask || task.type === macroTask)) {\r\n                    return;\r\n                }\r\n                const reEntryGuard = task.state != running;\r\n                reEntryGuard && task._transitionTo(running, scheduled);\r\n                task.runCount++;\r\n                const previousTask = _currentTask;\r\n                _currentTask = task;\r\n                _currentZoneFrame = { parent: _currentZoneFrame, zone: this };\r\n                try {\r\n                    if (task.type == macroTask && task.data && !task.data.isPeriodic) {\r\n                        task.cancelFn = undefined;\r\n                    }\r\n                    try {\r\n                        return this._zoneDelegate.invokeTask(this, task, applyThis, applyArgs);\r\n                    }\r\n                    catch (error) {\r\n                        if (this._zoneDelegate.handleError(this, error)) {\r\n                            throw error;\r\n                        }\r\n                    }\r\n                }\r\n                finally {\r\n                    // if the task's state is notScheduled or unknown, then it has already been cancelled\r\n                    // we should not reset the state to scheduled\r\n                    if (task.state !== notScheduled && task.state !== unknown) {\r\n                        if (task.type == eventTask || (task.data && task.data.isPeriodic)) {\r\n                            reEntryGuard && task._transitionTo(scheduled, running);\r\n                        }\r\n                        else {\r\n                            task.runCount = 0;\r\n                            this._updateTaskCount(task, -1);\r\n                            reEntryGuard &&\r\n                                task._transitionTo(notScheduled, running, notScheduled);\r\n                        }\r\n                    }\r\n                    _currentZoneFrame = _currentZoneFrame.parent;\r\n                    _currentTask = previousTask;\r\n                }\r\n            }\r\n            scheduleTask(task) {\r\n                if (task.zone && task.zone !== this) {\r\n                    // check if the task was rescheduled, the newZone\r\n                    // should not be the children of the original zone\r\n                    let newZone = this;\r\n                    while (newZone) {\r\n                        if (newZone === task.zone) {\r\n                            throw Error(`can not reschedule task to ${this.name} which is descendants of the original zone ${task.zone.name}`);\r\n                        }\r\n                        newZone = newZone.parent;\r\n                    }\r\n                }\r\n                task._transitionTo(scheduling, notScheduled);\r\n                const zoneDelegates = [];\r\n                task._zoneDelegates = zoneDelegates;\r\n                task._zone = this;\r\n                try {\r\n                    task = this._zoneDelegate.scheduleTask(this, task);\r\n                }\r\n                catch (err) {\r\n                    // should set task's state to unknown when scheduleTask throw error\r\n                    // because the err may from reschedule, so the fromState maybe notScheduled\r\n                    task._transitionTo(unknown, scheduling, notScheduled);\r\n                    // TODO: @JiaLiPassion, should we check the result from handleError?\r\n                    this._zoneDelegate.handleError(this, err);\r\n                    throw err;\r\n                }\r\n                if (task._zoneDelegates === zoneDelegates) {\r\n                    // we have to check because internally the delegate can reschedule the task.\r\n                    this._updateTaskCount(task, 1);\r\n                }\r\n                if (task.state == scheduling) {\r\n                    task._transitionTo(scheduled, scheduling);\r\n                }\r\n                return task;\r\n            }\r\n            scheduleMicroTask(source, callback, data, customSchedule) {\r\n                return this.scheduleTask(new ZoneTask(microTask, source, callback, data, customSchedule, undefined));\r\n            }\r\n            scheduleMacroTask(source, callback, data, customSchedule, customCancel) {\r\n                return this.scheduleTask(new ZoneTask(macroTask, source, callback, data, customSchedule, customCancel));\r\n            }\r\n            scheduleEventTask(source, callback, data, customSchedule, customCancel) {\r\n                return this.scheduleTask(new ZoneTask(eventTask, source, callback, data, customSchedule, customCancel));\r\n            }\r\n            cancelTask(task) {\r\n                if (task.zone != this)\r\n                    throw new Error('A task can only be cancelled in the zone of creation! (Creation: ' +\r\n                        (task.zone || NO_ZONE).name + '; Execution: ' + this.name + ')');\r\n                task._transitionTo(canceling, scheduled, running);\r\n                try {\r\n                    this._zoneDelegate.cancelTask(this, task);\r\n                }\r\n                catch (err) {\r\n                    // if error occurs when cancelTask, transit the state to unknown\r\n                    task._transitionTo(unknown, canceling);\r\n                    this._zoneDelegate.handleError(this, err);\r\n                    throw err;\r\n                }\r\n                this._updateTaskCount(task, -1);\r\n                task._transitionTo(notScheduled, canceling);\r\n                task.runCount = 0;\r\n                return task;\r\n            }\r\n            _updateTaskCount(task, count) {\r\n                const zoneDelegates = task._zoneDelegates;\r\n                if (count == -1) {\r\n                    task._zoneDelegates = null;\r\n                }\r\n                for (let i = 0; i < zoneDelegates.length; i++) {\r\n                    zoneDelegates[i]._updateTaskCount(task.type, count);\r\n                }\r\n            }\r\n        }\r\n        // tslint:disable-next-line:require-internal-with-underscore\r\n        Zone.__symbol__ = __symbol__;\r\n        const DELEGATE_ZS = {\r\n            name: '',\r\n            onHasTask: (delegate, _, target, hasTaskState) => delegate.hasTask(target, hasTaskState),\r\n            onScheduleTask: (delegate, _, target, task) => delegate.scheduleTask(target, task),\r\n            onInvokeTask: (delegate, _, target, task, applyThis, applyArgs) => delegate.invokeTask(target, task, applyThis, applyArgs),\r\n            onCancelTask: (delegate, _, target, task) => delegate.cancelTask(target, task)\r\n        };\r\n        class ZoneDelegate {\r\n            constructor(zone, parentDelegate, zoneSpec) {\r\n                this._taskCounts = { 'microTask': 0, 'macroTask': 0, 'eventTask': 0 };\r\n                this.zone = zone;\r\n                this._parentDelegate = parentDelegate;\r\n                this._forkZS =\r\n                    zoneSpec && (zoneSpec && zoneSpec.onFork ? zoneSpec : parentDelegate._forkZS);\r\n                this._forkDlgt = zoneSpec && (zoneSpec.onFork ? parentDelegate : parentDelegate._forkDlgt);\r\n                this._forkCurrZone =\r\n                    zoneSpec && (zoneSpec.onFork ? this.zone : parentDelegate._forkCurrZone);\r\n                this._interceptZS =\r\n                    zoneSpec && (zoneSpec.onIntercept ? zoneSpec : parentDelegate._interceptZS);\r\n                this._interceptDlgt =\r\n                    zoneSpec && (zoneSpec.onIntercept ? parentDelegate : parentDelegate._interceptDlgt);\r\n                this._interceptCurrZone =\r\n                    zoneSpec && (zoneSpec.onIntercept ? this.zone : parentDelegate._interceptCurrZone);\r\n                this._invokeZS = zoneSpec && (zoneSpec.onInvoke ? zoneSpec : parentDelegate._invokeZS);\r\n                this._invokeDlgt =\r\n                    zoneSpec && (zoneSpec.onInvoke ? parentDelegate : parentDelegate._invokeDlgt);\r\n                this._invokeCurrZone =\r\n                    zoneSpec && (zoneSpec.onInvoke ? this.zone : parentDelegate._invokeCurrZone);\r\n                this._handleErrorZS =\r\n                    zoneSpec && (zoneSpec.onHandleError ? zoneSpec : parentDelegate._handleErrorZS);\r\n                this._handleErrorDlgt = zoneSpec &&\r\n                    (zoneSpec.onHandleError ? parentDelegate : parentDelegate._handleErrorDlgt);\r\n                this._handleErrorCurrZone =\r\n                    zoneSpec && (zoneSpec.onHandleError ? this.zone : parentDelegate._handleErrorCurrZone);\r\n                this._scheduleTaskZS =\r\n                    zoneSpec && (zoneSpec.onScheduleTask ? zoneSpec : parentDelegate._scheduleTaskZS);\r\n                this._scheduleTaskDlgt = zoneSpec &&\r\n                    (zoneSpec.onScheduleTask ? parentDelegate : parentDelegate._scheduleTaskDlgt);\r\n                this._scheduleTaskCurrZone = zoneSpec &&\r\n                    (zoneSpec.onScheduleTask ? this.zone : parentDelegate._scheduleTaskCurrZone);\r\n                this._invokeTaskZS =\r\n                    zoneSpec && (zoneSpec.onInvokeTask ? zoneSpec : parentDelegate._invokeTaskZS);\r\n                this._invokeTaskDlgt =\r\n                    zoneSpec && (zoneSpec.onInvokeTask ? parentDelegate : parentDelegate._invokeTaskDlgt);\r\n                this._invokeTaskCurrZone =\r\n                    zoneSpec && (zoneSpec.onInvokeTask ? this.zone : parentDelegate._invokeTaskCurrZone);\r\n                this._cancelTaskZS =\r\n                    zoneSpec && (zoneSpec.onCancelTask ? zoneSpec : parentDelegate._cancelTaskZS);\r\n                this._cancelTaskDlgt =\r\n                    zoneSpec && (zoneSpec.onCancelTask ? parentDelegate : parentDelegate._cancelTaskDlgt);\r\n                this._cancelTaskCurrZone =\r\n                    zoneSpec && (zoneSpec.onCancelTask ? this.zone : parentDelegate._cancelTaskCurrZone);\r\n                this._hasTaskZS = null;\r\n                this._hasTaskDlgt = null;\r\n                this._hasTaskDlgtOwner = null;\r\n                this._hasTaskCurrZone = null;\r\n                const zoneSpecHasTask = zoneSpec && zoneSpec.onHasTask;\r\n                const parentHasTask = parentDelegate && parentDelegate._hasTaskZS;\r\n                if (zoneSpecHasTask || parentHasTask) {\r\n                    // If we need to report hasTask, than this ZS needs to do ref counting on tasks. In such\r\n                    // a case all task related interceptors must go through this ZD. We can't short circuit it.\r\n                    this._hasTaskZS = zoneSpecHasTask ? zoneSpec : DELEGATE_ZS;\r\n                    this._hasTaskDlgt = parentDelegate;\r\n                    this._hasTaskDlgtOwner = this;\r\n                    this._hasTaskCurrZone = zone;\r\n                    if (!zoneSpec.onScheduleTask) {\r\n                        this._scheduleTaskZS = DELEGATE_ZS;\r\n                        this._scheduleTaskDlgt = parentDelegate;\r\n                        this._scheduleTaskCurrZone = this.zone;\r\n                    }\r\n                    if (!zoneSpec.onInvokeTask) {\r\n                        this._invokeTaskZS = DELEGATE_ZS;\r\n                        this._invokeTaskDlgt = parentDelegate;\r\n                        this._invokeTaskCurrZone = this.zone;\r\n                    }\r\n                    if (!zoneSpec.onCancelTask) {\r\n                        this._cancelTaskZS = DELEGATE_ZS;\r\n                        this._cancelTaskDlgt = parentDelegate;\r\n                        this._cancelTaskCurrZone = this.zone;\r\n                    }\r\n                }\r\n            }\r\n            fork(targetZone, zoneSpec) {\r\n                return this._forkZS ?\r\n                    this._forkZS.onFork(this._forkDlgt, this.zone, targetZone, zoneSpec) :\r\n                    new Zone(targetZone, zoneSpec);\r\n            }\r\n            intercept(targetZone, callback, source) {\r\n                return this._interceptZS ?\r\n                    this._interceptZS.onIntercept(this._interceptDlgt, this._interceptCurrZone, targetZone, callback, source) :\r\n                    callback;\r\n            }\r\n            invoke(targetZone, callback, applyThis, applyArgs, source) {\r\n                return this._invokeZS ?\r\n                    this._invokeZS.onInvoke(this._invokeDlgt, this._invokeCurrZone, targetZone, callback, applyThis, applyArgs, source) :\r\n                    callback.apply(applyThis, applyArgs);\r\n            }\r\n            handleError(targetZone, error) {\r\n                return this._handleErrorZS ?\r\n                    this._handleErrorZS.onHandleError(this._handleErrorDlgt, this._handleErrorCurrZone, targetZone, error) :\r\n                    true;\r\n            }\r\n            scheduleTask(targetZone, task) {\r\n                let returnTask = task;\r\n                if (this._scheduleTaskZS) {\r\n                    if (this._hasTaskZS) {\r\n                        returnTask._zoneDelegates.push(this._hasTaskDlgtOwner);\r\n                    }\r\n                    // clang-format off\r\n                    returnTask = this._scheduleTaskZS.onScheduleTask(this._scheduleTaskDlgt, this._scheduleTaskCurrZone, targetZone, task);\r\n                    // clang-format on\r\n                    if (!returnTask)\r\n                        returnTask = task;\r\n                }\r\n                else {\r\n                    if (task.scheduleFn) {\r\n                        task.scheduleFn(task);\r\n                    }\r\n                    else if (task.type == microTask) {\r\n                        scheduleMicroTask(task);\r\n                    }\r\n                    else {\r\n                        throw new Error('Task is missing scheduleFn.');\r\n                    }\r\n                }\r\n                return returnTask;\r\n            }\r\n            invokeTask(targetZone, task, applyThis, applyArgs) {\r\n                return this._invokeTaskZS ?\r\n                    this._invokeTaskZS.onInvokeTask(this._invokeTaskDlgt, this._invokeTaskCurrZone, targetZone, task, applyThis, applyArgs) :\r\n                    task.callback.apply(applyThis, applyArgs);\r\n            }\r\n            cancelTask(targetZone, task) {\r\n                let value;\r\n                if (this._cancelTaskZS) {\r\n                    value = this._cancelTaskZS.onCancelTask(this._cancelTaskDlgt, this._cancelTaskCurrZone, targetZone, task);\r\n                }\r\n                else {\r\n                    if (!task.cancelFn) {\r\n                        throw Error('Task is not cancelable');\r\n                    }\r\n                    value = task.cancelFn(task);\r\n                }\r\n                return value;\r\n            }\r\n            hasTask(targetZone, isEmpty) {\r\n                // hasTask should not throw error so other ZoneDelegate\r\n                // can still trigger hasTask callback\r\n                try {\r\n                    this._hasTaskZS &&\r\n                        this._hasTaskZS.onHasTask(this._hasTaskDlgt, this._hasTaskCurrZone, targetZone, isEmpty);\r\n                }\r\n                catch (err) {\r\n                    this.handleError(targetZone, err);\r\n                }\r\n            }\r\n            // tslint:disable-next-line:require-internal-with-underscore\r\n            _updateTaskCount(type, count) {\r\n                const counts = this._taskCounts;\r\n                const prev = counts[type];\r\n                const next = counts[type] = prev + count;\r\n                if (next < 0) {\r\n                    throw new Error('More tasks executed then were scheduled.');\r\n                }\r\n                if (prev == 0 || next == 0) {\r\n                    const isEmpty = {\r\n                        microTask: counts['microTask'] > 0,\r\n                        macroTask: counts['macroTask'] > 0,\r\n                        eventTask: counts['eventTask'] > 0,\r\n                        change: type\r\n                    };\r\n                    this.hasTask(this.zone, isEmpty);\r\n                }\r\n            }\r\n        }\r\n        class ZoneTask {\r\n            constructor(type, source, callback, options, scheduleFn, cancelFn) {\r\n                // tslint:disable-next-line:require-internal-with-underscore\r\n                this._zone = null;\r\n                this.runCount = 0;\r\n                // tslint:disable-next-line:require-internal-with-underscore\r\n                this._zoneDelegates = null;\r\n                // tslint:disable-next-line:require-internal-with-underscore\r\n                this._state = 'notScheduled';\r\n                this.type = type;\r\n                this.source = source;\r\n                this.data = options;\r\n                this.scheduleFn = scheduleFn;\r\n                this.cancelFn = cancelFn;\r\n                if (!callback) {\r\n                    throw new Error('callback is not defined');\r\n                }\r\n                this.callback = callback;\r\n                const self = this;\r\n                // TODO: @JiaLiPassion options should have interface\r\n                if (type === eventTask && options && options.useG) {\r\n                    this.invoke = ZoneTask.invokeTask;\r\n                }\r\n                else {\r\n                    this.invoke = function () {\r\n                        return ZoneTask.invokeTask.call(global, self, this, arguments);\r\n                    };\r\n                }\r\n            }\r\n            static invokeTask(task, target, args) {\r\n                if (!task) {\r\n                    task = this;\r\n                }\r\n                _numberOfNestedTaskFrames++;\r\n                try {\r\n                    task.runCount++;\r\n                    return task.zone.runTask(task, target, args);\r\n                }\r\n                finally {\r\n                    if (_numberOfNestedTaskFrames == 1) {\r\n                        drainMicroTaskQueue();\r\n                    }\r\n                    _numberOfNestedTaskFrames--;\r\n                }\r\n            }\r\n            get zone() { return this._zone; }\r\n            get state() { return this._state; }\r\n            cancelScheduleRequest() { this._transitionTo(notScheduled, scheduling); }\r\n            // tslint:disable-next-line:require-internal-with-underscore\r\n            _transitionTo(toState, fromState1, fromState2) {\r\n                if (this._state === fromState1 || this._state === fromState2) {\r\n                    this._state = toState;\r\n                    if (toState == notScheduled) {\r\n                        this._zoneDelegates = null;\r\n                    }\r\n                }\r\n                else {\r\n                    throw new Error(`${this.type} '${this.source}': can not transition to '${toState}', expecting state '${fromState1}'${fromState2 ? ' or \\'' + fromState2 + '\\'' : ''}, was '${this._state}'.`);\r\n                }\r\n            }\r\n            toString() {\r\n                if (this.data && typeof this.data.handleId !== 'undefined') {\r\n                    return this.data.handleId.toString();\r\n                }\r\n                else {\r\n                    return Object.prototype.toString.call(this);\r\n                }\r\n            }\r\n            // add toJSON method to prevent cyclic error when\r\n            // call JSON.stringify(zoneTask)\r\n            toJSON() {\r\n                return {\r\n                    type: this.type,\r\n                    state: this.state,\r\n                    source: this.source,\r\n                    zone: this.zone.name,\r\n                    runCount: this.runCount\r\n                };\r\n            }\r\n        }\r\n        //////////////////////////////////////////////////////\r\n        //////////////////////////////////////////////////////\r\n        ///  MICROTASK QUEUE\r\n        //////////////////////////////////////////////////////\r\n        //////////////////////////////////////////////////////\r\n        const symbolSetTimeout = __symbol__('setTimeout');\r\n        const symbolPromise = __symbol__('Promise');\r\n        const symbolThen = __symbol__('then');\r\n        let _microTaskQueue = [];\r\n        let _isDrainingMicrotaskQueue = false;\r\n        let nativeMicroTaskQueuePromise;\r\n        function scheduleMicroTask(task) {\r\n            // if we are not running in any task, and there has not been anything scheduled\r\n            // we must bootstrap the initial task creation by manually scheduling the drain\r\n            if (_numberOfNestedTaskFrames === 0 && _microTaskQueue.length === 0) {\r\n                // We are not running in Task, so we need to kickstart the microtask queue.\r\n                if (!nativeMicroTaskQueuePromise) {\r\n                    if (global[symbolPromise]) {\r\n                        nativeMicroTaskQueuePromise = global[symbolPromise].resolve(0);\r\n                    }\r\n                }\r\n                if (nativeMicroTaskQueuePromise) {\r\n                    let nativeThen = nativeMicroTaskQueuePromise[symbolThen];\r\n                    if (!nativeThen) {\r\n                        // native Promise is not patchable, we need to use `then` directly\r\n                        // issue 1078\r\n                        nativeThen = nativeMicroTaskQueuePromise['then'];\r\n                    }\r\n                    nativeThen.call(nativeMicroTaskQueuePromise, drainMicroTaskQueue);\r\n                }\r\n                else {\r\n                    global[symbolSetTimeout](drainMicroTaskQueue, 0);\r\n                }\r\n            }\r\n            task && _microTaskQueue.push(task);\r\n        }\r\n        function drainMicroTaskQueue() {\r\n            if (!_isDrainingMicrotaskQueue) {\r\n                _isDrainingMicrotaskQueue = true;\r\n                while (_microTaskQueue.length) {\r\n                    const queue = _microTaskQueue;\r\n                    _microTaskQueue = [];\r\n                    for (let i = 0; i < queue.length; i++) {\r\n                        const task = queue[i];\r\n                        try {\r\n                            task.zone.runTask(task, null, null);\r\n                        }\r\n                        catch (error) {\r\n                            _api.onUnhandledError(error);\r\n                        }\r\n                    }\r\n                }\r\n                _api.microtaskDrainDone();\r\n                _isDrainingMicrotaskQueue = false;\r\n            }\r\n        }\r\n        //////////////////////////////////////////////////////\r\n        //////////////////////////////////////////////////////\r\n        ///  BOOTSTRAP\r\n        //////////////////////////////////////////////////////\r\n        //////////////////////////////////////////////////////\r\n        const NO_ZONE = { name: 'NO ZONE' };\r\n        const notScheduled = 'notScheduled', scheduling = 'scheduling', scheduled = 'scheduled', running = 'running', canceling = 'canceling', unknown = 'unknown';\r\n        const microTask = 'microTask', macroTask = 'macroTask', eventTask = 'eventTask';\r\n        const patches = {};\r\n        const _api = {\r\n            symbol: __symbol__,\r\n            currentZoneFrame: () => _currentZoneFrame,\r\n            onUnhandledError: noop,\r\n            microtaskDrainDone: noop,\r\n            scheduleMicroTask: scheduleMicroTask,\r\n            showUncaughtError: () => !Zone[__symbol__('ignoreConsoleErrorUncaughtError')],\r\n            patchEventTarget: () => [],\r\n            patchOnProperties: noop,\r\n            patchMethod: () => noop,\r\n            bindArguments: () => [],\r\n            patchThen: () => noop,\r\n            patchMacroTask: () => noop,\r\n            setNativePromise: (NativePromise) => {\r\n                // sometimes NativePromise.resolve static function\r\n                // is not ready yet, (such as core-js/es6.promise)\r\n                // so we need to check here.\r\n                if (NativePromise && typeof NativePromise.resolve === 'function') {\r\n                    nativeMicroTaskQueuePromise = NativePromise.resolve(0);\r\n                }\r\n            },\r\n            patchEventPrototype: () => noop,\r\n            isIEOrEdge: () => false,\r\n            getGlobalObjects: () => undefined,\r\n            ObjectDefineProperty: () => noop,\r\n            ObjectGetOwnPropertyDescriptor: () => undefined,\r\n            ObjectCreate: () => undefined,\r\n            ArraySlice: () => [],\r\n            patchClass: () => noop,\r\n            wrapWithCurrentZone: () => noop,\r\n            filterProperties: () => [],\r\n            attachOriginToPatched: () => noop,\r\n            _redefineProperty: () => noop,\r\n            patchCallbacks: () => noop\r\n        };\r\n        let _currentZoneFrame = { parent: null, zone: new Zone(null, null) };\r\n        let _currentTask = null;\r\n        let _numberOfNestedTaskFrames = 0;\r\n        function noop() { }\r\n        performanceMeasure('Zone', 'Zone');\r\n        return global['Zone'] = Zone;\r\n    })(typeof window !== 'undefined' && window || typeof self !== 'undefined' && self || global);\r\n\r\n    /**\r\n     * @license\r\n     * Copyright Google Inc. All Rights Reserved.\r\n     *\r\n     * Use of this source code is governed by an MIT-style license that can be\r\n     * found in the LICENSE file at https://angular.io/license\r\n     */\r\n    Zone.__load_patch('ZoneAwarePromise', (global, Zone, api) => {\r\n        const ObjectGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\r\n        const ObjectDefineProperty = Object.defineProperty;\r\n        function readableObjectToString(obj) {\r\n            if (obj && obj.toString === Object.prototype.toString) {\r\n                const className = obj.constructor && obj.constructor.name;\r\n                return (className ? className : '') + ': ' + JSON.stringify(obj);\r\n            }\r\n            return obj ? obj.toString() : Object.prototype.toString.call(obj);\r\n        }\r\n        const __symbol__ = api.symbol;\r\n        const _uncaughtPromiseErrors = [];\r\n        const isDisableWrappingUncaughtPromiseRejection = global[__symbol__('DISABLE_WRAPPING_UNCAUGHT_PROMISE_REJECTION')] === true;\r\n        const symbolPromise = __symbol__('Promise');\r\n        const symbolThen = __symbol__('then');\r\n        const creationTrace = '__creationTrace__';\r\n        api.onUnhandledError = (e) => {\r\n            if (api.showUncaughtError()) {\r\n                const rejection = e && e.rejection;\r\n                if (rejection) {\r\n                    console.error('Unhandled Promise rejection:', rejection instanceof Error ? rejection.message : rejection, '; Zone:', e.zone.name, '; Task:', e.task && e.task.source, '; Value:', rejection, rejection instanceof Error ? rejection.stack : undefined);\r\n                }\r\n                else {\r\n                    console.error(e);\r\n                }\r\n            }\r\n        };\r\n        api.microtaskDrainDone = () => {\r\n            while (_uncaughtPromiseErrors.length) {\r\n                const uncaughtPromiseError = _uncaughtPromiseErrors.shift();\r\n                try {\r\n                    uncaughtPromiseError.zone.runGuarded(() => { throw uncaughtPromiseError; });\r\n                }\r\n                catch (error) {\r\n                    handleUnhandledRejection(error);\r\n                }\r\n            }\r\n        };\r\n        const UNHANDLED_PROMISE_REJECTION_HANDLER_SYMBOL = __symbol__('unhandledPromiseRejectionHandler');\r\n        function handleUnhandledRejection(e) {\r\n            api.onUnhandledError(e);\r\n            try {\r\n                const handler = Zone[UNHANDLED_PROMISE_REJECTION_HANDLER_SYMBOL];\r\n                if (typeof handler === 'function') {\r\n                    handler.call(this, e);\r\n                }\r\n            }\r\n            catch (err) {\r\n            }\r\n        }\r\n        function isThenable(value) { return value && value.then; }\r\n        function forwardResolution(value) { return value; }\r\n        function forwardRejection(rejection) { return ZoneAwarePromise.reject(rejection); }\r\n        const symbolState = __symbol__('state');\r\n        const symbolValue = __symbol__('value');\r\n        const symbolFinally = __symbol__('finally');\r\n        const symbolParentPromiseValue = __symbol__('parentPromiseValue');\r\n        const symbolParentPromiseState = __symbol__('parentPromiseState');\r\n        const source = 'Promise.then';\r\n        const UNRESOLVED = null;\r\n        const RESOLVED = true;\r\n        const REJECTED = false;\r\n        const REJECTED_NO_CATCH = 0;\r\n        function makeResolver(promise, state) {\r\n            return (v) => {\r\n                try {\r\n                    resolvePromise(promise, state, v);\r\n                }\r\n                catch (err) {\r\n                    resolvePromise(promise, false, err);\r\n                }\r\n                // Do not return value or you will break the Promise spec.\r\n            };\r\n        }\r\n        const once = function () {\r\n            let wasCalled = false;\r\n            return function wrapper(wrappedFunction) {\r\n                return function () {\r\n                    if (wasCalled) {\r\n                        return;\r\n                    }\r\n                    wasCalled = true;\r\n                    wrappedFunction.apply(null, arguments);\r\n                };\r\n            };\r\n        };\r\n        const TYPE_ERROR = 'Promise resolved with itself';\r\n        const CURRENT_TASK_TRACE_SYMBOL = __symbol__('currentTaskTrace');\r\n        // Promise Resolution\r\n        function resolvePromise(promise, state, value) {\r\n            const onceWrapper = once();\r\n            if (promise === value) {\r\n                throw new TypeError(TYPE_ERROR);\r\n            }\r\n            if (promise[symbolState] === UNRESOLVED) {\r\n                // should only get value.then once based on promise spec.\r\n                let then = null;\r\n                try {\r\n                    if (typeof value === 'object' || typeof value === 'function') {\r\n                        then = value && value.then;\r\n                    }\r\n                }\r\n                catch (err) {\r\n                    onceWrapper(() => { resolvePromise(promise, false, err); })();\r\n                    return promise;\r\n                }\r\n                // if (value instanceof ZoneAwarePromise) {\r\n                if (state !== REJECTED && value instanceof ZoneAwarePromise &&\r\n                    value.hasOwnProperty(symbolState) && value.hasOwnProperty(symbolValue) &&\r\n                    value[symbolState] !== UNRESOLVED) {\r\n                    clearRejectedNoCatch(value);\r\n                    resolvePromise(promise, value[symbolState], value[symbolValue]);\r\n                }\r\n                else if (state !== REJECTED && typeof then === 'function') {\r\n                    try {\r\n                        then.call(value, onceWrapper(makeResolver(promise, state)), onceWrapper(makeResolver(promise, false)));\r\n                    }\r\n                    catch (err) {\r\n                        onceWrapper(() => { resolvePromise(promise, false, err); })();\r\n                    }\r\n                }\r\n                else {\r\n                    promise[symbolState] = state;\r\n                    const queue = promise[symbolValue];\r\n                    promise[symbolValue] = value;\r\n                    if (promise[symbolFinally] === symbolFinally) {\r\n                        // the promise is generated by Promise.prototype.finally\r\n                        if (state === RESOLVED) {\r\n                            // the state is resolved, should ignore the value\r\n                            // and use parent promise value\r\n                            promise[symbolState] = promise[symbolParentPromiseState];\r\n                            promise[symbolValue] = promise[symbolParentPromiseValue];\r\n                        }\r\n                    }\r\n                    // record task information in value when error occurs, so we can\r\n                    // do some additional work such as render longStackTrace\r\n                    if (state === REJECTED && value instanceof Error) {\r\n                        // check if longStackTraceZone is here\r\n                        const trace = Zone.currentTask && Zone.currentTask.data &&\r\n                            Zone.currentTask.data[creationTrace];\r\n                        if (trace) {\r\n                            // only keep the long stack trace into error when in longStackTraceZone\r\n                            ObjectDefineProperty(value, CURRENT_TASK_TRACE_SYMBOL, { configurable: true, enumerable: false, writable: true, value: trace });\r\n                        }\r\n                    }\r\n                    for (let i = 0; i < queue.length;) {\r\n                        scheduleResolveOrReject(promise, queue[i++], queue[i++], queue[i++], queue[i++]);\r\n                    }\r\n                    if (queue.length == 0 && state == REJECTED) {\r\n                        promise[symbolState] = REJECTED_NO_CATCH;\r\n                        let uncaughtPromiseError = value;\r\n                        if (!isDisableWrappingUncaughtPromiseRejection) {\r\n                            // If disable wrapping uncaught promise reject\r\n                            // and the rejected value is an Error object,\r\n                            // use the value instead of wrapping it.\r\n                            try {\r\n                                // Here we throws a new Error to print more readable error log\r\n                                // and if the value is not an error, zone.js builds an `Error`\r\n                                // Object here to attach the stack information.\r\n                                throw new Error('Uncaught (in promise): ' + readableObjectToString(value) +\r\n                                    (value && value.stack ? '\\n' + value.stack : ''));\r\n                            }\r\n                            catch (err) {\r\n                                uncaughtPromiseError = err;\r\n                            }\r\n                        }\r\n                        uncaughtPromiseError.rejection = value;\r\n                        uncaughtPromiseError.promise = promise;\r\n                        uncaughtPromiseError.zone = Zone.current;\r\n                        uncaughtPromiseError.task = Zone.currentTask;\r\n                        _uncaughtPromiseErrors.push(uncaughtPromiseError);\r\n                        api.scheduleMicroTask(); // to make sure that it is running\r\n                    }\r\n                }\r\n            }\r\n            // Resolving an already resolved promise is a noop.\r\n            return promise;\r\n        }\r\n        const REJECTION_HANDLED_HANDLER = __symbol__('rejectionHandledHandler');\r\n        function clearRejectedNoCatch(promise) {\r\n            if (promise[symbolState] === REJECTED_NO_CATCH) {\r\n                // if the promise is rejected no catch status\r\n                // and queue.length > 0, means there is a error handler\r\n                // here to handle the rejected promise, we should trigger\r\n                // windows.rejectionhandled eventHandler or nodejs rejectionHandled\r\n                // eventHandler\r\n                try {\r\n                    const handler = Zone[REJECTION_HANDLED_HANDLER];\r\n                    if (handler && typeof handler === 'function') {\r\n                        handler.call(this, { rejection: promise[symbolValue], promise: promise });\r\n                    }\r\n                }\r\n                catch (err) {\r\n                }\r\n                promise[symbolState] = REJECTED;\r\n                for (let i = 0; i < _uncaughtPromiseErrors.length; i++) {\r\n                    if (promise === _uncaughtPromiseErrors[i].promise) {\r\n                        _uncaughtPromiseErrors.splice(i, 1);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        function scheduleResolveOrReject(promise, zone, chainPromise, onFulfilled, onRejected) {\r\n            clearRejectedNoCatch(promise);\r\n            const promiseState = promise[symbolState];\r\n            const delegate = promiseState ?\r\n                (typeof onFulfilled === 'function') ? onFulfilled : forwardResolution :\r\n                (typeof onRejected === 'function') ? onRejected : forwardRejection;\r\n            zone.scheduleMicroTask(source, () => {\r\n                try {\r\n                    const parentPromiseValue = promise[symbolValue];\r\n                    const isFinallyPromise = !!chainPromise && symbolFinally === chainPromise[symbolFinally];\r\n                    if (isFinallyPromise) {\r\n                        // if the promise is generated from finally call, keep parent promise's state and value\r\n                        chainPromise[symbolParentPromiseValue] = parentPromiseValue;\r\n                        chainPromise[symbolParentPromiseState] = promiseState;\r\n                    }\r\n                    // should not pass value to finally callback\r\n                    const value = zone.run(delegate, undefined, isFinallyPromise && delegate !== forwardRejection && delegate !== forwardResolution ?\r\n                        [] :\r\n                        [parentPromiseValue]);\r\n                    resolvePromise(chainPromise, true, value);\r\n                }\r\n                catch (error) {\r\n                    // if error occurs, should always return this error\r\n                    resolvePromise(chainPromise, false, error);\r\n                }\r\n            }, chainPromise);\r\n        }\r\n        const ZONE_AWARE_PROMISE_TO_STRING = 'function ZoneAwarePromise() { [native code] }';\r\n        const noop = function () { };\r\n        class ZoneAwarePromise {\r\n            static toString() { return ZONE_AWARE_PROMISE_TO_STRING; }\r\n            static resolve(value) {\r\n                return resolvePromise(new this(null), RESOLVED, value);\r\n            }\r\n            static reject(error) {\r\n                return resolvePromise(new this(null), REJECTED, error);\r\n            }\r\n            static race(values) {\r\n                let resolve;\r\n                let reject;\r\n                let promise = new this((res, rej) => {\r\n                    resolve = res;\r\n                    reject = rej;\r\n                });\r\n                function onResolve(value) { resolve(value); }\r\n                function onReject(error) { reject(error); }\r\n                for (let value of values) {\r\n                    if (!isThenable(value)) {\r\n                        value = this.resolve(value);\r\n                    }\r\n                    value.then(onResolve, onReject);\r\n                }\r\n                return promise;\r\n            }\r\n            static all(values) { return ZoneAwarePromise.allWithCallback(values); }\r\n            static allSettled(values) {\r\n                const P = this && this.prototype instanceof ZoneAwarePromise ? this : ZoneAwarePromise;\r\n                return P.allWithCallback(values, {\r\n                    thenCallback: (value) => ({ status: 'fulfilled', value }),\r\n                    errorCallback: (err) => ({ status: 'rejected', reason: err })\r\n                });\r\n            }\r\n            static allWithCallback(values, callback) {\r\n                let resolve;\r\n                let reject;\r\n                let promise = new this((res, rej) => {\r\n                    resolve = res;\r\n                    reject = rej;\r\n                });\r\n                // Start at 2 to prevent prematurely resolving if .then is called immediately.\r\n                let unresolvedCount = 2;\r\n                let valueIndex = 0;\r\n                const resolvedValues = [];\r\n                for (let value of values) {\r\n                    if (!isThenable(value)) {\r\n                        value = this.resolve(value);\r\n                    }\r\n                    const curValueIndex = valueIndex;\r\n                    try {\r\n                        value.then((value) => {\r\n                            resolvedValues[curValueIndex] = callback ? callback.thenCallback(value) : value;\r\n                            unresolvedCount--;\r\n                            if (unresolvedCount === 0) {\r\n                                resolve(resolvedValues);\r\n                            }\r\n                        }, (err) => {\r\n                            if (!callback) {\r\n                                reject(err);\r\n                            }\r\n                            else {\r\n                                resolvedValues[curValueIndex] = callback.errorCallback(err);\r\n                                unresolvedCount--;\r\n                                if (unresolvedCount === 0) {\r\n                                    resolve(resolvedValues);\r\n                                }\r\n                            }\r\n                        });\r\n                    }\r\n                    catch (thenErr) {\r\n                        reject(thenErr);\r\n                    }\r\n                    unresolvedCount++;\r\n                    valueIndex++;\r\n                }\r\n                // Make the unresolvedCount zero-based again.\r\n                unresolvedCount -= 2;\r\n                if (unresolvedCount === 0) {\r\n                    resolve(resolvedValues);\r\n                }\r\n                return promise;\r\n            }\r\n            constructor(executor) {\r\n                const promise = this;\r\n                if (!(promise instanceof ZoneAwarePromise)) {\r\n                    throw new Error('Must be an instanceof Promise.');\r\n                }\r\n                promise[symbolState] = UNRESOLVED;\r\n                promise[symbolValue] = []; // queue;\r\n                try {\r\n                    executor && executor(makeResolver(promise, RESOLVED), makeResolver(promise, REJECTED));\r\n                }\r\n                catch (error) {\r\n                    resolvePromise(promise, false, error);\r\n                }\r\n            }\r\n            get [Symbol.toStringTag]() { return 'Promise'; }\r\n            get [Symbol.species]() { return ZoneAwarePromise; }\r\n            then(onFulfilled, onRejected) {\r\n                let C = this.constructor[Symbol.species];\r\n                if (!C || typeof C !== 'function') {\r\n                    C = this.constructor || ZoneAwarePromise;\r\n                }\r\n                const chainPromise = new C(noop);\r\n                const zone = Zone.current;\r\n                if (this[symbolState] == UNRESOLVED) {\r\n                    this[symbolValue].push(zone, chainPromise, onFulfilled, onRejected);\r\n                }\r\n                else {\r\n                    scheduleResolveOrReject(this, zone, chainPromise, onFulfilled, onRejected);\r\n                }\r\n                return chainPromise;\r\n            }\r\n            catch(onRejected) {\r\n                return this.then(null, onRejected);\r\n            }\r\n            finally(onFinally) {\r\n                let C = this.constructor[Symbol.species];\r\n                if (!C || typeof C !== 'function') {\r\n                    C = ZoneAwarePromise;\r\n                }\r\n                const chainPromise = new C(noop);\r\n                chainPromise[symbolFinally] = symbolFinally;\r\n                const zone = Zone.current;\r\n                if (this[symbolState] == UNRESOLVED) {\r\n                    this[symbolValue].push(zone, chainPromise, onFinally, onFinally);\r\n                }\r\n                else {\r\n                    scheduleResolveOrReject(this, zone, chainPromise, onFinally, onFinally);\r\n                }\r\n                return chainPromise;\r\n            }\r\n        }\r\n        // Protect against aggressive optimizers dropping seemingly unused properties.\r\n        // E.g. Closure Compiler in advanced mode.\r\n        ZoneAwarePromise['resolve'] = ZoneAwarePromise.resolve;\r\n        ZoneAwarePromise['reject'] = ZoneAwarePromise.reject;\r\n        ZoneAwarePromise['race'] = ZoneAwarePromise.race;\r\n        ZoneAwarePromise['all'] = ZoneAwarePromise.all;\r\n        const NativePromise = global[symbolPromise] = global['Promise'];\r\n        const ZONE_AWARE_PROMISE = Zone.__symbol__('ZoneAwarePromise');\r\n        let desc = ObjectGetOwnPropertyDescriptor(global, 'Promise');\r\n        if (!desc || desc.configurable) {\r\n            desc && delete desc.writable;\r\n            desc && delete desc.value;\r\n            if (!desc) {\r\n                desc = { configurable: true, enumerable: true };\r\n            }\r\n            desc.get = function () {\r\n                // if we already set ZoneAwarePromise, use patched one\r\n                // otherwise return native one.\r\n                return global[ZONE_AWARE_PROMISE] ? global[ZONE_AWARE_PROMISE] : global[symbolPromise];\r\n            };\r\n            desc.set = function (NewNativePromise) {\r\n                if (NewNativePromise === ZoneAwarePromise) {\r\n                    // if the NewNativePromise is ZoneAwarePromise\r\n                    // save to global\r\n                    global[ZONE_AWARE_PROMISE] = NewNativePromise;\r\n                }\r\n                else {\r\n                    // if the NewNativePromise is not ZoneAwarePromise\r\n                    // for example: after load zone.js, some library just\r\n                    // set es6-promise to global, if we set it to global\r\n                    // directly, assertZonePatched will fail and angular\r\n                    // will not loaded, so we just set the NewNativePromise\r\n                    // to global[symbolPromise], so the result is just like\r\n                    // we load ES6 Promise before zone.js\r\n                    global[symbolPromise] = NewNativePromise;\r\n                    if (!NewNativePromise.prototype[symbolThen]) {\r\n                        patchThen(NewNativePromise);\r\n                    }\r\n                    api.setNativePromise(NewNativePromise);\r\n                }\r\n            };\r\n            ObjectDefineProperty(global, 'Promise', desc);\r\n        }\r\n        global['Promise'] = ZoneAwarePromise;\r\n        const symbolThenPatched = __symbol__('thenPatched');\r\n        function patchThen(Ctor) {\r\n            const proto = Ctor.prototype;\r\n            const prop = ObjectGetOwnPropertyDescriptor(proto, 'then');\r\n            if (prop && (prop.writable === false || !prop.configurable)) {\r\n                // check Ctor.prototype.then propertyDescriptor is writable or not\r\n                // in meteor env, writable is false, we should ignore such case\r\n                return;\r\n            }\r\n            const originalThen = proto.then;\r\n            // Keep a reference to the original method.\r\n            proto[symbolThen] = originalThen;\r\n            Ctor.prototype.then = function (onResolve, onReject) {\r\n                const wrapped = new ZoneAwarePromise((resolve, reject) => { originalThen.call(this, resolve, reject); });\r\n                return wrapped.then(onResolve, onReject);\r\n            };\r\n            Ctor[symbolThenPatched] = true;\r\n        }\r\n        api.patchThen = patchThen;\r\n        function zoneify(fn) {\r\n            return function () {\r\n                let resultPromise = fn.apply(this, arguments);\r\n                if (resultPromise instanceof ZoneAwarePromise) {\r\n                    return resultPromise;\r\n                }\r\n                let ctor = resultPromise.constructor;\r\n                if (!ctor[symbolThenPatched]) {\r\n                    patchThen(ctor);\r\n                }\r\n                return resultPromise;\r\n            };\r\n        }\r\n        if (NativePromise) {\r\n            patchThen(NativePromise);\r\n            const fetch = global['fetch'];\r\n            if (typeof fetch == 'function') {\r\n                global[api.symbol('fetch')] = fetch;\r\n                global['fetch'] = zoneify(fetch);\r\n            }\r\n        }\r\n        // This is not part of public API, but it is useful for tests, so we expose it.\r\n        Promise[Zone.__symbol__('uncaughtPromiseErrors')] = _uncaughtPromiseErrors;\r\n        return ZoneAwarePromise;\r\n    });\r\n\r\n    /**\r\n     * @license\r\n     * Copyright Google Inc. All Rights Reserved.\r\n     *\r\n     * Use of this source code is governed by an MIT-style license that can be\r\n     * found in the LICENSE file at https://angular.io/license\r\n     */\r\n    /**\r\n     * Suppress closure compiler errors about unknown 'Zone' variable\r\n     * @fileoverview\r\n     * @suppress {undefinedVars,globalThis,missingRequire}\r\n     */\r\n    /// <reference types=\"node\"/>\r\n    // issue #989, to reduce bundle size, use short name\r\n    /** Object.getOwnPropertyDescriptor */\r\n    const ObjectGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\r\n    /** Object.defineProperty */\r\n    const ObjectDefineProperty = Object.defineProperty;\r\n    /** Object.getPrototypeOf */\r\n    const ObjectGetPrototypeOf = Object.getPrototypeOf;\r\n    /** Object.create */\r\n    const ObjectCreate = Object.create;\r\n    /** Array.prototype.slice */\r\n    const ArraySlice = Array.prototype.slice;\r\n    /** addEventListener string const */\r\n    const ADD_EVENT_LISTENER_STR = 'addEventListener';\r\n    /** removeEventListener string const */\r\n    const REMOVE_EVENT_LISTENER_STR = 'removeEventListener';\r\n    /** zoneSymbol addEventListener */\r\n    const ZONE_SYMBOL_ADD_EVENT_LISTENER = Zone.__symbol__(ADD_EVENT_LISTENER_STR);\r\n    /** zoneSymbol removeEventListener */\r\n    const ZONE_SYMBOL_REMOVE_EVENT_LISTENER = Zone.__symbol__(REMOVE_EVENT_LISTENER_STR);\r\n    /** true string const */\r\n    const TRUE_STR = 'true';\r\n    /** false string const */\r\n    const FALSE_STR = 'false';\r\n    /** Zone symbol prefix string const. */\r\n    const ZONE_SYMBOL_PREFIX = Zone.__symbol__('');\r\n    function wrapWithCurrentZone(callback, source) {\r\n        return Zone.current.wrap(callback, source);\r\n    }\r\n    function scheduleMacroTaskWithCurrentZone(source, callback, data, customSchedule, customCancel) {\r\n        return Zone.current.scheduleMacroTask(source, callback, data, customSchedule, customCancel);\r\n    }\r\n    const zoneSymbol = Zone.__symbol__;\r\n    const isWindowExists = typeof window !== 'undefined';\r\n    const internalWindow = isWindowExists ? window : undefined;\r\n    const _global = isWindowExists && internalWindow || typeof self === 'object' && self || global;\r\n    const REMOVE_ATTRIBUTE = 'removeAttribute';\r\n    const NULL_ON_PROP_VALUE = [null];\r\n    function bindArguments(args, source) {\r\n        for (let i = args.length - 1; i >= 0; i--) {\r\n            if (typeof args[i] === 'function') {\r\n                args[i] = wrapWithCurrentZone(args[i], source + '_' + i);\r\n            }\r\n        }\r\n        return args;\r\n    }\r\n    function patchPrototype(prototype, fnNames) {\r\n        const source = prototype.constructor['name'];\r\n        for (let i = 0; i < fnNames.length; i++) {\r\n            const name = fnNames[i];\r\n            const delegate = prototype[name];\r\n            if (delegate) {\r\n                const prototypeDesc = ObjectGetOwnPropertyDescriptor(prototype, name);\r\n                if (!isPropertyWritable(prototypeDesc)) {\r\n                    continue;\r\n                }\r\n                prototype[name] = ((delegate) => {\r\n                    const patched = function () {\r\n                        return delegate.apply(this, bindArguments(arguments, source + '.' + name));\r\n                    };\r\n                    attachOriginToPatched(patched, delegate);\r\n                    return patched;\r\n                })(delegate);\r\n            }\r\n        }\r\n    }\r\n    function isPropertyWritable(propertyDesc) {\r\n        if (!propertyDesc) {\r\n            return true;\r\n        }\r\n        if (propertyDesc.writable === false) {\r\n            return false;\r\n        }\r\n        return !(typeof propertyDesc.get === 'function' && typeof propertyDesc.set === 'undefined');\r\n    }\r\n    const isWebWorker = (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope);\r\n    // Make sure to access `process` through `_global` so that WebPack does not accidentally browserify\r\n    // this code.\r\n    const isNode = (!('nw' in _global) && typeof _global.process !== 'undefined' &&\r\n        {}.toString.call(_global.process) === '[object process]');\r\n    const isBrowser = !isNode && !isWebWorker && !!(isWindowExists && internalWindow['HTMLElement']);\r\n    // we are in electron of nw, so we are both browser and nodejs\r\n    // Make sure to access `process` through `_global` so that WebPack does not accidentally browserify\r\n    // this code.\r\n    const isMix = typeof _global.process !== 'undefined' &&\r\n        {}.toString.call(_global.process) === '[object process]' && !isWebWorker &&\r\n        !!(isWindowExists && internalWindow['HTMLElement']);\r\n    const zoneSymbolEventNames = {};\r\n    const wrapFn = function (event) {\r\n        // https://github.com/angular/zone.js/issues/911, in IE, sometimes\r\n        // event will be undefined, so we need to use window.event\r\n        event = event || _global.event;\r\n        if (!event) {\r\n            return;\r\n        }\r\n        let eventNameSymbol = zoneSymbolEventNames[event.type];\r\n        if (!eventNameSymbol) {\r\n            eventNameSymbol = zoneSymbolEventNames[event.type] = zoneSymbol('ON_PROPERTY' + event.type);\r\n        }\r\n        const target = this || event.target || _global;\r\n        const listener = target[eventNameSymbol];\r\n        let result;\r\n        if (isBrowser && target === internalWindow && event.type === 'error') {\r\n            // window.onerror have different signiture\r\n            // https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onerror#window.onerror\r\n            // and onerror callback will prevent default when callback return true\r\n            const errorEvent = event;\r\n            result = listener &&\r\n                listener.call(this, errorEvent.message, errorEvent.filename, errorEvent.lineno, errorEvent.colno, errorEvent.error);\r\n            if (result === true) {\r\n                event.preventDefault();\r\n            }\r\n        }\r\n        else {\r\n            result = listener && listener.apply(this, arguments);\r\n            if (result != undefined && !result) {\r\n                event.preventDefault();\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n    function patchProperty(obj, prop, prototype) {\r\n        let desc = ObjectGetOwnPropertyDescriptor(obj, prop);\r\n        if (!desc && prototype) {\r\n            // when patch window object, use prototype to check prop exist or not\r\n            const prototypeDesc = ObjectGetOwnPropertyDescriptor(prototype, prop);\r\n            if (prototypeDesc) {\r\n                desc = { enumerable: true, configurable: true };\r\n            }\r\n        }\r\n        // if the descriptor not exists or is not configurable\r\n        // just return\r\n        if (!desc || !desc.configurable) {\r\n            return;\r\n        }\r\n        const onPropPatchedSymbol = zoneSymbol('on' + prop + 'patched');\r\n        if (obj.hasOwnProperty(onPropPatchedSymbol) && obj[onPropPatchedSymbol]) {\r\n            return;\r\n        }\r\n        // A property descriptor cannot have getter/setter and be writable\r\n        // deleting the writable and value properties avoids this error:\r\n        //\r\n        // TypeError: property descriptors must not specify a value or be writable when a\r\n        // getter or setter has been specified\r\n        delete desc.writable;\r\n        delete desc.value;\r\n        const originalDescGet = desc.get;\r\n        const originalDescSet = desc.set;\r\n        // substr(2) cuz 'onclick' -> 'click', etc\r\n        const eventName = prop.substr(2);\r\n        let eventNameSymbol = zoneSymbolEventNames[eventName];\r\n        if (!eventNameSymbol) {\r\n            eventNameSymbol = zoneSymbolEventNames[eventName] = zoneSymbol('ON_PROPERTY' + eventName);\r\n        }\r\n        desc.set = function (newValue) {\r\n            // in some of windows's onproperty callback, this is undefined\r\n            // so we need to check it\r\n            let target = this;\r\n            if (!target && obj === _global) {\r\n                target = _global;\r\n            }\r\n            if (!target) {\r\n                return;\r\n            }\r\n            let previousValue = target[eventNameSymbol];\r\n            if (previousValue) {\r\n                target.removeEventListener(eventName, wrapFn);\r\n            }\r\n            // issue #978, when onload handler was added before loading zone.js\r\n            // we should remove it with originalDescSet\r\n            if (originalDescSet) {\r\n                originalDescSet.apply(target, NULL_ON_PROP_VALUE);\r\n            }\r\n            if (typeof newValue === 'function') {\r\n                target[eventNameSymbol] = newValue;\r\n                target.addEventListener(eventName, wrapFn, false);\r\n            }\r\n            else {\r\n                target[eventNameSymbol] = null;\r\n            }\r\n        };\r\n        // The getter would return undefined for unassigned properties but the default value of an\r\n        // unassigned property is null\r\n        desc.get = function () {\r\n            // in some of windows's onproperty callback, this is undefined\r\n            // so we need to check it\r\n            let target = this;\r\n            if (!target && obj === _global) {\r\n                target = _global;\r\n            }\r\n            if (!target) {\r\n                return null;\r\n            }\r\n            const listener = target[eventNameSymbol];\r\n            if (listener) {\r\n                return listener;\r\n            }\r\n            else if (originalDescGet) {\r\n                // result will be null when use inline event attribute,\r\n                // such as <button onclick=\"func();\">OK</button>\r\n                // because the onclick function is internal raw uncompiled handler\r\n                // the onclick will be evaluated when first time event was triggered or\r\n                // the property is accessed, https://github.com/angular/zone.js/issues/525\r\n                // so we should use original native get to retrieve the handler\r\n                let value = originalDescGet && originalDescGet.call(this);\r\n                if (value) {\r\n                    desc.set.call(this, value);\r\n                    if (typeof target[REMOVE_ATTRIBUTE] === 'function') {\r\n                        target.removeAttribute(prop);\r\n                    }\r\n                    return value;\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n        ObjectDefineProperty(obj, prop, desc);\r\n        obj[onPropPatchedSymbol] = true;\r\n    }\r\n    function patchOnProperties(obj, properties, prototype) {\r\n        if (properties) {\r\n            for (let i = 0; i < properties.length; i++) {\r\n                patchProperty(obj, 'on' + properties[i], prototype);\r\n            }\r\n        }\r\n        else {\r\n            const onProperties = [];\r\n            for (const prop in obj) {\r\n                if (prop.substr(0, 2) == 'on') {\r\n                    onProperties.push(prop);\r\n                }\r\n            }\r\n            for (let j = 0; j < onProperties.length; j++) {\r\n                patchProperty(obj, onProperties[j], prototype);\r\n            }\r\n        }\r\n    }\r\n    const originalInstanceKey = zoneSymbol('originalInstance');\r\n    // wrap some native API on `window`\r\n    function patchClass(className) {\r\n        const OriginalClass = _global[className];\r\n        if (!OriginalClass)\r\n            return;\r\n        // keep original class in global\r\n        _global[zoneSymbol(className)] = OriginalClass;\r\n        _global[className] = function () {\r\n            const a = bindArguments(arguments, className);\r\n            switch (a.length) {\r\n                case 0:\r\n                    this[originalInstanceKey] = new OriginalClass();\r\n                    break;\r\n                case 1:\r\n                    this[originalInstanceKey] = new OriginalClass(a[0]);\r\n                    break;\r\n                case 2:\r\n                    this[originalInstanceKey] = new OriginalClass(a[0], a[1]);\r\n                    break;\r\n                case 3:\r\n                    this[originalInstanceKey] = new OriginalClass(a[0], a[1], a[2]);\r\n                    break;\r\n                case 4:\r\n                    this[originalInstanceKey] = new OriginalClass(a[0], a[1], a[2], a[3]);\r\n                    break;\r\n                default:\r\n                    throw new Error('Arg list too long.');\r\n            }\r\n        };\r\n        // attach original delegate to patched function\r\n        attachOriginToPatched(_global[className], OriginalClass);\r\n        const instance = new OriginalClass(function () { });\r\n        let prop;\r\n        for (prop in instance) {\r\n            // https://bugs.webkit.org/show_bug.cgi?id=44721\r\n            if (className === 'XMLHttpRequest' && prop === 'responseBlob')\r\n                continue;\r\n            (function (prop) {\r\n                if (typeof instance[prop] === 'function') {\r\n                    _global[className].prototype[prop] = function () {\r\n                        return this[originalInstanceKey][prop].apply(this[originalInstanceKey], arguments);\r\n                    };\r\n                }\r\n                else {\r\n                    ObjectDefineProperty(_global[className].prototype, prop, {\r\n                        set: function (fn) {\r\n                            if (typeof fn === 'function') {\r\n                                this[originalInstanceKey][prop] = wrapWithCurrentZone(fn, className + '.' + prop);\r\n                                // keep callback in wrapped function so we can\r\n                                // use it in Function.prototype.toString to return\r\n                                // the native one.\r\n                                attachOriginToPatched(this[originalInstanceKey][prop], fn);\r\n                            }\r\n                            else {\r\n                                this[originalInstanceKey][prop] = fn;\r\n                            }\r\n                        },\r\n                        get: function () { return this[originalInstanceKey][prop]; }\r\n                    });\r\n                }\r\n            }(prop));\r\n        }\r\n        for (prop in OriginalClass) {\r\n            if (prop !== 'prototype' && OriginalClass.hasOwnProperty(prop)) {\r\n                _global[className][prop] = OriginalClass[prop];\r\n            }\r\n        }\r\n    }\r\n    function copySymbolProperties(src, dest) {\r\n        if (typeof Object.getOwnPropertySymbols !== 'function') {\r\n            return;\r\n        }\r\n        const symbols = Object.getOwnPropertySymbols(src);\r\n        symbols.forEach((symbol) => {\r\n            const desc = Object.getOwnPropertyDescriptor(src, symbol);\r\n            Object.defineProperty(dest, symbol, {\r\n                get: function () { return src[symbol]; },\r\n                set: function (value) {\r\n                    if (desc && (!desc.writable || typeof desc.set !== 'function')) {\r\n                        // if src[symbol] is not writable or not have a setter, just return\r\n                        return;\r\n                    }\r\n                    src[symbol] = value;\r\n                },\r\n                enumerable: desc ? desc.enumerable : true,\r\n                configurable: desc ? desc.configurable : true\r\n            });\r\n        });\r\n    }\r\n    let shouldCopySymbolProperties = false;\r\n    function patchMethod(target, name, patchFn) {\r\n        let proto = target;\r\n        while (proto && !proto.hasOwnProperty(name)) {\r\n            proto = ObjectGetPrototypeOf(proto);\r\n        }\r\n        if (!proto && target[name]) {\r\n            // somehow we did not find it, but we can see it. This happens on IE for Window properties.\r\n            proto = target;\r\n        }\r\n        const delegateName = zoneSymbol(name);\r\n        let delegate = null;\r\n        if (proto && !(delegate = proto[delegateName])) {\r\n            delegate = proto[delegateName] = proto[name];\r\n            // check whether proto[name] is writable\r\n            // some property is readonly in safari, such as HtmlCanvasElement.prototype.toBlob\r\n            const desc = proto && ObjectGetOwnPropertyDescriptor(proto, name);\r\n            if (isPropertyWritable(desc)) {\r\n                const patchDelegate = patchFn(delegate, delegateName, name);\r\n                proto[name] = function () { return patchDelegate(this, arguments); };\r\n                attachOriginToPatched(proto[name], delegate);\r\n                if (shouldCopySymbolProperties) {\r\n                    copySymbolProperties(delegate, proto[name]);\r\n                }\r\n            }\r\n        }\r\n        return delegate;\r\n    }\r\n    // TODO: @JiaLiPassion, support cancel task later if necessary\r\n    function patchMacroTask(obj, funcName, metaCreator) {\r\n        let setNative = null;\r\n        function scheduleTask(task) {\r\n            const data = task.data;\r\n            data.args[data.cbIdx] = function () { task.invoke.apply(this, arguments); };\r\n            setNative.apply(data.target, data.args);\r\n            return task;\r\n        }\r\n        setNative = patchMethod(obj, funcName, (delegate) => function (self, args) {\r\n            const meta = metaCreator(self, args);\r\n            if (meta.cbIdx >= 0 && typeof args[meta.cbIdx] === 'function') {\r\n                return scheduleMacroTaskWithCurrentZone(meta.name, args[meta.cbIdx], meta, scheduleTask);\r\n            }\r\n            else {\r\n                // cause an error by calling it directly.\r\n                return delegate.apply(self, args);\r\n            }\r\n        });\r\n    }\r\n    function attachOriginToPatched(patched, original) {\r\n        patched[zoneSymbol('OriginalDelegate')] = original;\r\n    }\r\n    let isDetectedIEOrEdge = false;\r\n    let ieOrEdge = false;\r\n    function isIE() {\r\n        try {\r\n            const ua = internalWindow.navigator.userAgent;\r\n            if (ua.indexOf('MSIE ') !== -1 || ua.indexOf('Trident/') !== -1) {\r\n                return true;\r\n            }\r\n        }\r\n        catch (error) {\r\n        }\r\n        return false;\r\n    }\r\n    function isIEOrEdge() {\r\n        if (isDetectedIEOrEdge) {\r\n            return ieOrEdge;\r\n        }\r\n        isDetectedIEOrEdge = true;\r\n        try {\r\n            const ua = internalWindow.navigator.userAgent;\r\n            if (ua.indexOf('MSIE ') !== -1 || ua.indexOf('Trident/') !== -1 || ua.indexOf('Edge/') !== -1) {\r\n                ieOrEdge = true;\r\n            }\r\n        }\r\n        catch (error) {\r\n        }\r\n        return ieOrEdge;\r\n    }\r\n\r\n    /**\r\n     * @license\r\n     * Copyright Google Inc. All Rights Reserved.\r\n     *\r\n     * Use of this source code is governed by an MIT-style license that can be\r\n     * found in the LICENSE file at https://angular.io/license\r\n     */\r\n    // override Function.prototype.toString to make zone.js patched function\r\n    // look like native function\r\n    Zone.__load_patch('toString', (global) => {\r\n        // patch Func.prototype.toString to let them look like native\r\n        const originalFunctionToString = Function.prototype.toString;\r\n        const ORIGINAL_DELEGATE_SYMBOL = zoneSymbol('OriginalDelegate');\r\n        const PROMISE_SYMBOL = zoneSymbol('Promise');\r\n        const ERROR_SYMBOL = zoneSymbol('Error');\r\n        const newFunctionToString = function toString() {\r\n            if (typeof this === 'function') {\r\n                const originalDelegate = this[ORIGINAL_DELEGATE_SYMBOL];\r\n                if (originalDelegate) {\r\n                    if (typeof originalDelegate === 'function') {\r\n                        return originalFunctionToString.call(originalDelegate);\r\n                    }\r\n                    else {\r\n                        return Object.prototype.toString.call(originalDelegate);\r\n                    }\r\n                }\r\n                if (this === Promise) {\r\n                    const nativePromise = global[PROMISE_SYMBOL];\r\n                    if (nativePromise) {\r\n                        return originalFunctionToString.call(nativePromise);\r\n                    }\r\n                }\r\n                if (this === Error) {\r\n                    const nativeError = global[ERROR_SYMBOL];\r\n                    if (nativeError) {\r\n                        return originalFunctionToString.call(nativeError);\r\n                    }\r\n                }\r\n            }\r\n            return originalFunctionToString.call(this);\r\n        };\r\n        newFunctionToString[ORIGINAL_DELEGATE_SYMBOL] = originalFunctionToString;\r\n        Function.prototype.toString = newFunctionToString;\r\n        // patch Object.prototype.toString to let them look like native\r\n        const originalObjectToString = Object.prototype.toString;\r\n        const PROMISE_OBJECT_TO_STRING = '[object Promise]';\r\n        Object.prototype.toString = function () {\r\n            if (this instanceof Promise) {\r\n                return PROMISE_OBJECT_TO_STRING;\r\n            }\r\n            return originalObjectToString.call(this);\r\n        };\r\n    });\r\n\r\n    /**\r\n     * @license\r\n     * Copyright Google Inc. All Rights Reserved.\r\n     *\r\n     * Use of this source code is governed by an MIT-style license that can be\r\n     * found in the LICENSE file at https://angular.io/license\r\n     */\r\n    let passiveSupported = false;\r\n    if (typeof window !== 'undefined') {\r\n        try {\r\n            const options = Object.defineProperty({}, 'passive', { get: function () { passiveSupported = true; } });\r\n            window.addEventListener('test', options, options);\r\n            window.removeEventListener('test', options, options);\r\n        }\r\n        catch (err) {\r\n            passiveSupported = false;\r\n        }\r\n    }\r\n    // an identifier to tell ZoneTask do not create a new invoke closure\r\n    const OPTIMIZED_ZONE_EVENT_TASK_DATA = {\r\n        useG: true\r\n    };\r\n    const zoneSymbolEventNames$1 = {};\r\n    const globalSources = {};\r\n    const EVENT_NAME_SYMBOL_REGX = new RegExp('^' + ZONE_SYMBOL_PREFIX + '(\\\\w+)(true|false)$');\r\n    const IMMEDIATE_PROPAGATION_SYMBOL = zoneSymbol('propagationStopped');\r\n    function prepareEventNames(eventName, eventNameToString) {\r\n        const falseEventName = (eventNameToString ? eventNameToString(eventName) : eventName) + FALSE_STR;\r\n        const trueEventName = (eventNameToString ? eventNameToString(eventName) : eventName) + TRUE_STR;\r\n        const symbol = ZONE_SYMBOL_PREFIX + falseEventName;\r\n        const symbolCapture = ZONE_SYMBOL_PREFIX + trueEventName;\r\n        zoneSymbolEventNames$1[eventName] = {};\r\n        zoneSymbolEventNames$1[eventName][FALSE_STR] = symbol;\r\n        zoneSymbolEventNames$1[eventName][TRUE_STR] = symbolCapture;\r\n    }\r\n    function patchEventTarget(_global, apis, patchOptions) {\r\n        const ADD_EVENT_LISTENER = (patchOptions && patchOptions.add) || ADD_EVENT_LISTENER_STR;\r\n        const REMOVE_EVENT_LISTENER = (patchOptions && patchOptions.rm) || REMOVE_EVENT_LISTENER_STR;\r\n        const LISTENERS_EVENT_LISTENER = (patchOptions && patchOptions.listeners) || 'eventListeners';\r\n        const REMOVE_ALL_LISTENERS_EVENT_LISTENER = (patchOptions && patchOptions.rmAll) || 'removeAllListeners';\r\n        const zoneSymbolAddEventListener = zoneSymbol(ADD_EVENT_LISTENER);\r\n        const ADD_EVENT_LISTENER_SOURCE = '.' + ADD_EVENT_LISTENER + ':';\r\n        const PREPEND_EVENT_LISTENER = 'prependListener';\r\n        const PREPEND_EVENT_LISTENER_SOURCE = '.' + PREPEND_EVENT_LISTENER + ':';\r\n        const invokeTask = function (task, target, event) {\r\n            // for better performance, check isRemoved which is set\r\n            // by removeEventListener\r\n            if (task.isRemoved) {\r\n                return;\r\n            }\r\n            const delegate = task.callback;\r\n            if (typeof delegate === 'object' && delegate.handleEvent) {\r\n                // create the bind version of handleEvent when invoke\r\n                task.callback = (event) => delegate.handleEvent(event);\r\n                task.originalDelegate = delegate;\r\n            }\r\n            // invoke static task.invoke\r\n            task.invoke(task, target, [event]);\r\n            const options = task.options;\r\n            if (options && typeof options === 'object' && options.once) {\r\n                // if options.once is true, after invoke once remove listener here\r\n                // only browser need to do this, nodejs eventEmitter will cal removeListener\r\n                // inside EventEmitter.once\r\n                const delegate = task.originalDelegate ? task.originalDelegate : task.callback;\r\n                target[REMOVE_EVENT_LISTENER].call(target, event.type, delegate, options);\r\n            }\r\n        };\r\n        // global shared zoneAwareCallback to handle all event callback with capture = false\r\n        const globalZoneAwareCallback = function (event) {\r\n            // https://github.com/angular/zone.js/issues/911, in IE, sometimes\r\n            // event will be undefined, so we need to use window.event\r\n            event = event || _global.event;\r\n            if (!event) {\r\n                return;\r\n            }\r\n            // event.target is needed for Samsung TV and SourceBuffer\r\n            // || global is needed https://github.com/angular/zone.js/issues/190\r\n            const target = this || event.target || _global;\r\n            const tasks = target[zoneSymbolEventNames$1[event.type][FALSE_STR]];\r\n            if (tasks) {\r\n                // invoke all tasks which attached to current target with given event.type and capture = false\r\n                // for performance concern, if task.length === 1, just invoke\r\n                if (tasks.length === 1) {\r\n                    invokeTask(tasks[0], target, event);\r\n                }\r\n                else {\r\n                    // https://github.com/angular/zone.js/issues/836\r\n                    // copy the tasks array before invoke, to avoid\r\n                    // the callback will remove itself or other listener\r\n                    const copyTasks = tasks.slice();\r\n                    for (let i = 0; i < copyTasks.length; i++) {\r\n                        if (event && event[IMMEDIATE_PROPAGATION_SYMBOL] === true) {\r\n                            break;\r\n                        }\r\n                        invokeTask(copyTasks[i], target, event);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        // global shared zoneAwareCallback to handle all event callback with capture = true\r\n        const globalZoneAwareCaptureCallback = function (event) {\r\n            // https://github.com/angular/zone.js/issues/911, in IE, sometimes\r\n            // event will be undefined, so we need to use window.event\r\n            event = event || _global.event;\r\n            if (!event) {\r\n                return;\r\n            }\r\n            // event.target is needed for Samsung TV and SourceBuffer\r\n            // || global is needed https://github.com/angular/zone.js/issues/190\r\n            const target = this || event.target || _global;\r\n            const tasks = target[zoneSymbolEventNames$1[event.type][TRUE_STR]];\r\n            if (tasks) {\r\n                // invoke all tasks which attached to current target with given event.type and capture = false\r\n                // for performance concern, if task.length === 1, just invoke\r\n                if (tasks.length === 1) {\r\n                    invokeTask(tasks[0], target, event);\r\n                }\r\n                else {\r\n                    // https://github.com/angular/zone.js/issues/836\r\n                    // copy the tasks array before invoke, to avoid\r\n                    // the callback will remove itself or other listener\r\n                    const copyTasks = tasks.slice();\r\n                    for (let i = 0; i < copyTasks.length; i++) {\r\n                        if (event && event[IMMEDIATE_PROPAGATION_SYMBOL] === true) {\r\n                            break;\r\n                        }\r\n                        invokeTask(copyTasks[i], target, event);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        function patchEventTargetMethods(obj, patchOptions) {\r\n            if (!obj) {\r\n                return false;\r\n            }\r\n            let useGlobalCallback = true;\r\n            if (patchOptions && patchOptions.useG !== undefined) {\r\n                useGlobalCallback = patchOptions.useG;\r\n            }\r\n            const validateHandler = patchOptions && patchOptions.vh;\r\n            let checkDuplicate = true;\r\n            if (patchOptions && patchOptions.chkDup !== undefined) {\r\n                checkDuplicate = patchOptions.chkDup;\r\n            }\r\n            let returnTarget = false;\r\n            if (patchOptions && patchOptions.rt !== undefined) {\r\n                returnTarget = patchOptions.rt;\r\n            }\r\n            let proto = obj;\r\n            while (proto && !proto.hasOwnProperty(ADD_EVENT_LISTENER)) {\r\n                proto = ObjectGetPrototypeOf(proto);\r\n            }\r\n            if (!proto && obj[ADD_EVENT_LISTENER]) {\r\n                // somehow we did not find it, but we can see it. This happens on IE for Window properties.\r\n                proto = obj;\r\n            }\r\n            if (!proto) {\r\n                return false;\r\n            }\r\n            if (proto[zoneSymbolAddEventListener]) {\r\n                return false;\r\n            }\r\n            const eventNameToString = patchOptions && patchOptions.eventNameToString;\r\n            // a shared global taskData to pass data for scheduleEventTask\r\n            // so we do not need to create a new object just for pass some data\r\n            const taskData = {};\r\n            const nativeAddEventListener = proto[zoneSymbolAddEventListener] = proto[ADD_EVENT_LISTENER];\r\n            const nativeRemoveEventListener = proto[zoneSymbol(REMOVE_EVENT_LISTENER)] =\r\n                proto[REMOVE_EVENT_LISTENER];\r\n            const nativeListeners = proto[zoneSymbol(LISTENERS_EVENT_LISTENER)] =\r\n                proto[LISTENERS_EVENT_LISTENER];\r\n            const nativeRemoveAllListeners = proto[zoneSymbol(REMOVE_ALL_LISTENERS_EVENT_LISTENER)] =\r\n                proto[REMOVE_ALL_LISTENERS_EVENT_LISTENER];\r\n            let nativePrependEventListener;\r\n            if (patchOptions && patchOptions.prepend) {\r\n                nativePrependEventListener = proto[zoneSymbol(patchOptions.prepend)] =\r\n                    proto[patchOptions.prepend];\r\n            }\r\n            /**\r\n             * This util function will build an option object with passive option\r\n             * to handle all possible input from the user.\r\n             */\r\n            function buildEventListenerOptions(options, passive) {\r\n                if (!passiveSupported && typeof options === 'object' && options) {\r\n                    // doesn't support passive but user want to pass an object as options.\r\n                    // this will not work on some old browser, so we just pass a boolean\r\n                    // as useCapture parameter\r\n                    return !!options.capture;\r\n                }\r\n                if (!passiveSupported || !passive) {\r\n                    return options;\r\n                }\r\n                if (typeof options === 'boolean') {\r\n                    return { capture: options, passive: true };\r\n                }\r\n                if (!options) {\r\n                    return { passive: true };\r\n                }\r\n                if (typeof options === 'object' && options.passive !== false) {\r\n                    return Object.assign(Object.assign({}, options), { passive: true });\r\n                }\r\n                return options;\r\n            }\r\n            const customScheduleGlobal = function (task) {\r\n                // if there is already a task for the eventName + capture,\r\n                // just return, because we use the shared globalZoneAwareCallback here.\r\n                if (taskData.isExisting) {\r\n                    return;\r\n                }\r\n                return nativeAddEventListener.call(taskData.target, taskData.eventName, taskData.capture ? globalZoneAwareCaptureCallback : globalZoneAwareCallback, taskData.options);\r\n            };\r\n            const customCancelGlobal = function (task) {\r\n                // if task is not marked as isRemoved, this call is directly\r\n                // from Zone.prototype.cancelTask, we should remove the task\r\n                // from tasksList of target first\r\n                if (!task.isRemoved) {\r\n                    const symbolEventNames = zoneSymbolEventNames$1[task.eventName];\r\n                    let symbolEventName;\r\n                    if (symbolEventNames) {\r\n                        symbolEventName = symbolEventNames[task.capture ? TRUE_STR : FALSE_STR];\r\n                    }\r\n                    const existingTasks = symbolEventName && task.target[symbolEventName];\r\n                    if (existingTasks) {\r\n                        for (let i = 0; i < existingTasks.length; i++) {\r\n                            const existingTask = existingTasks[i];\r\n                            if (existingTask === task) {\r\n                                existingTasks.splice(i, 1);\r\n                                // set isRemoved to data for faster invokeTask check\r\n                                task.isRemoved = true;\r\n                                if (existingTasks.length === 0) {\r\n                                    // all tasks for the eventName + capture have gone,\r\n                                    // remove globalZoneAwareCallback and remove the task cache from target\r\n                                    task.allRemoved = true;\r\n                                    task.target[symbolEventName] = null;\r\n                                }\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                // if all tasks for the eventName + capture have gone,\r\n                // we will really remove the global event callback,\r\n                // if not, return\r\n                if (!task.allRemoved) {\r\n                    return;\r\n                }\r\n                return nativeRemoveEventListener.call(task.target, task.eventName, task.capture ? globalZoneAwareCaptureCallback : globalZoneAwareCallback, task.options);\r\n            };\r\n            const customScheduleNonGlobal = function (task) {\r\n                return nativeAddEventListener.call(taskData.target, taskData.eventName, task.invoke, taskData.options);\r\n            };\r\n            const customSchedulePrepend = function (task) {\r\n                return nativePrependEventListener.call(taskData.target, taskData.eventName, task.invoke, taskData.options);\r\n            };\r\n            const customCancelNonGlobal = function (task) {\r\n                return nativeRemoveEventListener.call(task.target, task.eventName, task.invoke, task.options);\r\n            };\r\n            const customSchedule = useGlobalCallback ? customScheduleGlobal : customScheduleNonGlobal;\r\n            const customCancel = useGlobalCallback ? customCancelGlobal : customCancelNonGlobal;\r\n            const compareTaskCallbackVsDelegate = function (task, delegate) {\r\n                const typeOfDelegate = typeof delegate;\r\n                return (typeOfDelegate === 'function' && task.callback === delegate) ||\r\n                    (typeOfDelegate === 'object' && task.originalDelegate === delegate);\r\n            };\r\n            const compare = (patchOptions && patchOptions.diff) ? patchOptions.diff : compareTaskCallbackVsDelegate;\r\n            const blackListedEvents = Zone[zoneSymbol('BLACK_LISTED_EVENTS')];\r\n            const passiveEvents = _global[zoneSymbol('PASSIVE_EVENTS')];\r\n            const makeAddListener = function (nativeListener, addSource, customScheduleFn, customCancelFn, returnTarget = false, prepend = false) {\r\n                return function () {\r\n                    const target = this || _global;\r\n                    let eventName = arguments[0];\r\n                    if (patchOptions && patchOptions.transferEventName) {\r\n                        eventName = patchOptions.transferEventName(eventName);\r\n                    }\r\n                    let delegate = arguments[1];\r\n                    if (!delegate) {\r\n                        return nativeListener.apply(this, arguments);\r\n                    }\r\n                    if (isNode && eventName === 'uncaughtException') {\r\n                        // don't patch uncaughtException of nodejs to prevent endless loop\r\n                        return nativeListener.apply(this, arguments);\r\n                    }\r\n                    // don't create the bind delegate function for handleEvent\r\n                    // case here to improve addEventListener performance\r\n                    // we will create the bind delegate when invoke\r\n                    let isHandleEvent = false;\r\n                    if (typeof delegate !== 'function') {\r\n                        if (!delegate.handleEvent) {\r\n                            return nativeListener.apply(this, arguments);\r\n                        }\r\n                        isHandleEvent = true;\r\n                    }\r\n                    if (validateHandler && !validateHandler(nativeListener, delegate, target, arguments)) {\r\n                        return;\r\n                    }\r\n                    const passive = passiveSupported && !!passiveEvents && passiveEvents.indexOf(eventName) !== -1;\r\n                    const options = buildEventListenerOptions(arguments[2], passive);\r\n                    if (blackListedEvents) {\r\n                        // check black list\r\n                        for (let i = 0; i < blackListedEvents.length; i++) {\r\n                            if (eventName === blackListedEvents[i]) {\r\n                                if (passive) {\r\n                                    return nativeListener.call(target, eventName, delegate, options);\r\n                                }\r\n                                else {\r\n                                    return nativeListener.apply(this, arguments);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    const capture = !options ? false : typeof options === 'boolean' ? true : options.capture;\r\n                    const once = options && typeof options === 'object' ? options.once : false;\r\n                    const zone = Zone.current;\r\n                    let symbolEventNames = zoneSymbolEventNames$1[eventName];\r\n                    if (!symbolEventNames) {\r\n                        prepareEventNames(eventName, eventNameToString);\r\n                        symbolEventNames = zoneSymbolEventNames$1[eventName];\r\n                    }\r\n                    const symbolEventName = symbolEventNames[capture ? TRUE_STR : FALSE_STR];\r\n                    let existingTasks = target[symbolEventName];\r\n                    let isExisting = false;\r\n                    if (existingTasks) {\r\n                        // already have task registered\r\n                        isExisting = true;\r\n                        if (checkDuplicate) {\r\n                            for (let i = 0; i < existingTasks.length; i++) {\r\n                                if (compare(existingTasks[i], delegate)) {\r\n                                    // same callback, same capture, same event name, just return\r\n                                    return;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        existingTasks = target[symbolEventName] = [];\r\n                    }\r\n                    let source;\r\n                    const constructorName = target.constructor['name'];\r\n                    const targetSource = globalSources[constructorName];\r\n                    if (targetSource) {\r\n                        source = targetSource[eventName];\r\n                    }\r\n                    if (!source) {\r\n                        source = constructorName + addSource +\r\n                            (eventNameToString ? eventNameToString(eventName) : eventName);\r\n                    }\r\n                    // do not create a new object as task.data to pass those things\r\n                    // just use the global shared one\r\n                    taskData.options = options;\r\n                    if (once) {\r\n                        // if addEventListener with once options, we don't pass it to\r\n                        // native addEventListener, instead we keep the once setting\r\n                        // and handle ourselves.\r\n                        taskData.options.once = false;\r\n                    }\r\n                    taskData.target = target;\r\n                    taskData.capture = capture;\r\n                    taskData.eventName = eventName;\r\n                    taskData.isExisting = isExisting;\r\n                    const data = useGlobalCallback ? OPTIMIZED_ZONE_EVENT_TASK_DATA : undefined;\r\n                    // keep taskData into data to allow onScheduleEventTask to access the task information\r\n                    if (data) {\r\n                        data.taskData = taskData;\r\n                    }\r\n                    const task = zone.scheduleEventTask(source, delegate, data, customScheduleFn, customCancelFn);\r\n                    // should clear taskData.target to avoid memory leak\r\n                    // issue, https://github.com/angular/angular/issues/20442\r\n                    taskData.target = null;\r\n                    // need to clear up taskData because it is a global object\r\n                    if (data) {\r\n                        data.taskData = null;\r\n                    }\r\n                    // have to save those information to task in case\r\n                    // application may call task.zone.cancelTask() directly\r\n                    if (once) {\r\n                        options.once = true;\r\n                    }\r\n                    if (!(!passiveSupported && typeof task.options === 'boolean')) {\r\n                        // if not support passive, and we pass an option object\r\n                        // to addEventListener, we should save the options to task\r\n                        task.options = options;\r\n                    }\r\n                    task.target = target;\r\n                    task.capture = capture;\r\n                    task.eventName = eventName;\r\n                    if (isHandleEvent) {\r\n                        // save original delegate for compare to check duplicate\r\n                        task.originalDelegate = delegate;\r\n                    }\r\n                    if (!prepend) {\r\n                        existingTasks.push(task);\r\n                    }\r\n                    else {\r\n                        existingTasks.unshift(task);\r\n                    }\r\n                    if (returnTarget) {\r\n                        return target;\r\n                    }\r\n                };\r\n            };\r\n            proto[ADD_EVENT_LISTENER] = makeAddListener(nativeAddEventListener, ADD_EVENT_LISTENER_SOURCE, customSchedule, customCancel, returnTarget);\r\n            if (nativePrependEventListener) {\r\n                proto[PREPEND_EVENT_LISTENER] = makeAddListener(nativePrependEventListener, PREPEND_EVENT_LISTENER_SOURCE, customSchedulePrepend, customCancel, returnTarget, true);\r\n            }\r\n            proto[REMOVE_EVENT_LISTENER] = function () {\r\n                const target = this || _global;\r\n                let eventName = arguments[0];\r\n                if (patchOptions && patchOptions.transferEventName) {\r\n                    eventName = patchOptions.transferEventName(eventName);\r\n                }\r\n                const options = arguments[2];\r\n                const capture = !options ? false : typeof options === 'boolean' ? true : options.capture;\r\n                const delegate = arguments[1];\r\n                if (!delegate) {\r\n                    return nativeRemoveEventListener.apply(this, arguments);\r\n                }\r\n                if (validateHandler &&\r\n                    !validateHandler(nativeRemoveEventListener, delegate, target, arguments)) {\r\n                    return;\r\n                }\r\n                const symbolEventNames = zoneSymbolEventNames$1[eventName];\r\n                let symbolEventName;\r\n                if (symbolEventNames) {\r\n                    symbolEventName = symbolEventNames[capture ? TRUE_STR : FALSE_STR];\r\n                }\r\n                const existingTasks = symbolEventName && target[symbolEventName];\r\n                if (existingTasks) {\r\n                    for (let i = 0; i < existingTasks.length; i++) {\r\n                        const existingTask = existingTasks[i];\r\n                        if (compare(existingTask, delegate)) {\r\n                            existingTasks.splice(i, 1);\r\n                            // set isRemoved to data for faster invokeTask check\r\n                            existingTask.isRemoved = true;\r\n                            if (existingTasks.length === 0) {\r\n                                // all tasks for the eventName + capture have gone,\r\n                                // remove globalZoneAwareCallback and remove the task cache from target\r\n                                existingTask.allRemoved = true;\r\n                                target[symbolEventName] = null;\r\n                                // in the target, we have an event listener which is added by on_property\r\n                                // such as target.onclick = function() {}, so we need to clear this internal\r\n                                // property too if all delegates all removed\r\n                                if (typeof eventName === 'string') {\r\n                                    const onPropertySymbol = ZONE_SYMBOL_PREFIX + 'ON_PROPERTY' + eventName;\r\n                                    target[onPropertySymbol] = null;\r\n                                }\r\n                            }\r\n                            existingTask.zone.cancelTask(existingTask);\r\n                            if (returnTarget) {\r\n                                return target;\r\n                            }\r\n                            return;\r\n                        }\r\n                    }\r\n                }\r\n                // issue 930, didn't find the event name or callback\r\n                // from zone kept existingTasks, the callback maybe\r\n                // added outside of zone, we need to call native removeEventListener\r\n                // to try to remove it.\r\n                return nativeRemoveEventListener.apply(this, arguments);\r\n            };\r\n            proto[LISTENERS_EVENT_LISTENER] = function () {\r\n                const target = this || _global;\r\n                let eventName = arguments[0];\r\n                if (patchOptions && patchOptions.transferEventName) {\r\n                    eventName = patchOptions.transferEventName(eventName);\r\n                }\r\n                const listeners = [];\r\n                const tasks = findEventTasks(target, eventNameToString ? eventNameToString(eventName) : eventName);\r\n                for (let i = 0; i < tasks.length; i++) {\r\n                    const task = tasks[i];\r\n                    let delegate = task.originalDelegate ? task.originalDelegate : task.callback;\r\n                    listeners.push(delegate);\r\n                }\r\n                return listeners;\r\n            };\r\n            proto[REMOVE_ALL_LISTENERS_EVENT_LISTENER] = function () {\r\n                const target = this || _global;\r\n                let eventName = arguments[0];\r\n                if (!eventName) {\r\n                    const keys = Object.keys(target);\r\n                    for (let i = 0; i < keys.length; i++) {\r\n                        const prop = keys[i];\r\n                        const match = EVENT_NAME_SYMBOL_REGX.exec(prop);\r\n                        let evtName = match && match[1];\r\n                        // in nodejs EventEmitter, removeListener event is\r\n                        // used for monitoring the removeListener call,\r\n                        // so just keep removeListener eventListener until\r\n                        // all other eventListeners are removed\r\n                        if (evtName && evtName !== 'removeListener') {\r\n                            this[REMOVE_ALL_LISTENERS_EVENT_LISTENER].call(this, evtName);\r\n                        }\r\n                    }\r\n                    // remove removeListener listener finally\r\n                    this[REMOVE_ALL_LISTENERS_EVENT_LISTENER].call(this, 'removeListener');\r\n                }\r\n                else {\r\n                    if (patchOptions && patchOptions.transferEventName) {\r\n                        eventName = patchOptions.transferEventName(eventName);\r\n                    }\r\n                    const symbolEventNames = zoneSymbolEventNames$1[eventName];\r\n                    if (symbolEventNames) {\r\n                        const symbolEventName = symbolEventNames[FALSE_STR];\r\n                        const symbolCaptureEventName = symbolEventNames[TRUE_STR];\r\n                        const tasks = target[symbolEventName];\r\n                        const captureTasks = target[symbolCaptureEventName];\r\n                        if (tasks) {\r\n                            const removeTasks = tasks.slice();\r\n                            for (let i = 0; i < removeTasks.length; i++) {\r\n                                const task = removeTasks[i];\r\n                                let delegate = task.originalDelegate ? task.originalDelegate : task.callback;\r\n                                this[REMOVE_EVENT_LISTENER].call(this, eventName, delegate, task.options);\r\n                            }\r\n                        }\r\n                        if (captureTasks) {\r\n                            const removeTasks = captureTasks.slice();\r\n                            for (let i = 0; i < removeTasks.length; i++) {\r\n                                const task = removeTasks[i];\r\n                                let delegate = task.originalDelegate ? task.originalDelegate : task.callback;\r\n                                this[REMOVE_EVENT_LISTENER].call(this, eventName, delegate, task.options);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                if (returnTarget) {\r\n                    return this;\r\n                }\r\n            };\r\n            // for native toString patch\r\n            attachOriginToPatched(proto[ADD_EVENT_LISTENER], nativeAddEventListener);\r\n            attachOriginToPatched(proto[REMOVE_EVENT_LISTENER], nativeRemoveEventListener);\r\n            if (nativeRemoveAllListeners) {\r\n                attachOriginToPatched(proto[REMOVE_ALL_LISTENERS_EVENT_LISTENER], nativeRemoveAllListeners);\r\n            }\r\n            if (nativeListeners) {\r\n                attachOriginToPatched(proto[LISTENERS_EVENT_LISTENER], nativeListeners);\r\n            }\r\n            return true;\r\n        }\r\n        let results = [];\r\n        for (let i = 0; i < apis.length; i++) {\r\n            results[i] = patchEventTargetMethods(apis[i], patchOptions);\r\n        }\r\n        return results;\r\n    }\r\n    function findEventTasks(target, eventName) {\r\n        if (!eventName) {\r\n            const foundTasks = [];\r\n            for (let prop in target) {\r\n                const match = EVENT_NAME_SYMBOL_REGX.exec(prop);\r\n                let evtName = match && match[1];\r\n                if (evtName && (!eventName || evtName === eventName)) {\r\n                    const tasks = target[prop];\r\n                    if (tasks) {\r\n                        for (let i = 0; i < tasks.length; i++) {\r\n                            foundTasks.push(tasks[i]);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return foundTasks;\r\n        }\r\n        let symbolEventName = zoneSymbolEventNames$1[eventName];\r\n        if (!symbolEventName) {\r\n            prepareEventNames(eventName);\r\n            symbolEventName = zoneSymbolEventNames$1[eventName];\r\n        }\r\n        const captureFalseTasks = target[symbolEventName[FALSE_STR]];\r\n        const captureTrueTasks = target[symbolEventName[TRUE_STR]];\r\n        if (!captureFalseTasks) {\r\n            return captureTrueTasks ? captureTrueTasks.slice() : [];\r\n        }\r\n        else {\r\n            return captureTrueTasks ? captureFalseTasks.concat(captureTrueTasks) :\r\n                captureFalseTasks.slice();\r\n        }\r\n    }\r\n    function patchEventPrototype(global, api) {\r\n        const Event = global['Event'];\r\n        if (Event && Event.prototype) {\r\n            api.patchMethod(Event.prototype, 'stopImmediatePropagation', (delegate) => function (self, args) {\r\n                self[IMMEDIATE_PROPAGATION_SYMBOL] = true;\r\n                // we need to call the native stopImmediatePropagation\r\n                // in case in some hybrid application, some part of\r\n                // application will be controlled by zone, some are not\r\n                delegate && delegate.apply(self, args);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @license\r\n     * Copyright Google Inc. All Rights Reserved.\r\n     *\r\n     * Use of this source code is governed by an MIT-style license that can be\r\n     * found in the LICENSE file at https://angular.io/license\r\n     */\r\n    function patchCallbacks(api, target, targetName, method, callbacks) {\r\n        const symbol = Zone.__symbol__(method);\r\n        if (target[symbol]) {\r\n            return;\r\n        }\r\n        const nativeDelegate = target[symbol] = target[method];\r\n        target[method] = function (name, opts, options) {\r\n            if (opts && opts.prototype) {\r\n                callbacks.forEach(function (callback) {\r\n                    const source = `${targetName}.${method}::` + callback;\r\n                    const prototype = opts.prototype;\r\n                    if (prototype.hasOwnProperty(callback)) {\r\n                        const descriptor = api.ObjectGetOwnPropertyDescriptor(prototype, callback);\r\n                        if (descriptor && descriptor.value) {\r\n                            descriptor.value = api.wrapWithCurrentZone(descriptor.value, source);\r\n                            api._redefineProperty(opts.prototype, callback, descriptor);\r\n                        }\r\n                        else if (prototype[callback]) {\r\n                            prototype[callback] = api.wrapWithCurrentZone(prototype[callback], source);\r\n                        }\r\n                    }\r\n                    else if (prototype[callback]) {\r\n                        prototype[callback] = api.wrapWithCurrentZone(prototype[callback], source);\r\n                    }\r\n                });\r\n            }\r\n            return nativeDelegate.call(target, name, opts, options);\r\n        };\r\n        api.attachOriginToPatched(target[method], nativeDelegate);\r\n    }\r\n\r\n    /**\r\n     * @license\r\n     * Copyright Google Inc. All Rights Reserved.\r\n     *\r\n     * Use of this source code is governed by an MIT-style license that can be\r\n     * found in the LICENSE file at https://angular.io/license\r\n     */\r\n    const globalEventHandlersEventNames = [\r\n        'abort',\r\n        'animationcancel',\r\n        'animationend',\r\n        'animationiteration',\r\n        'auxclick',\r\n        'beforeinput',\r\n        'blur',\r\n        'cancel',\r\n        'canplay',\r\n        'canplaythrough',\r\n        'change',\r\n        'compositionstart',\r\n        'compositionupdate',\r\n        'compositionend',\r\n        'cuechange',\r\n        'click',\r\n        'close',\r\n        'contextmenu',\r\n        'curechange',\r\n        'dblclick',\r\n        'drag',\r\n        'dragend',\r\n        'dragenter',\r\n        'dragexit',\r\n        'dragleave',\r\n        'dragover',\r\n        'drop',\r\n        'durationchange',\r\n        'emptied',\r\n        'ended',\r\n        'error',\r\n        'focus',\r\n        'focusin',\r\n        'focusout',\r\n        'gotpointercapture',\r\n        'input',\r\n        'invalid',\r\n        'keydown',\r\n        'keypress',\r\n        'keyup',\r\n        'load',\r\n        'loadstart',\r\n        'loadeddata',\r\n        'loadedmetadata',\r\n        'lostpointercapture',\r\n        'mousedown',\r\n        'mouseenter',\r\n        'mouseleave',\r\n        'mousemove',\r\n        'mouseout',\r\n        'mouseover',\r\n        'mouseup',\r\n        'mousewheel',\r\n        'orientationchange',\r\n        'pause',\r\n        'play',\r\n        'playing',\r\n        'pointercancel',\r\n        'pointerdown',\r\n        'pointerenter',\r\n        'pointerleave',\r\n        'pointerlockchange',\r\n        'mozpointerlockchange',\r\n        'webkitpointerlockerchange',\r\n        'pointerlockerror',\r\n        'mozpointerlockerror',\r\n        'webkitpointerlockerror',\r\n        'pointermove',\r\n        'pointout',\r\n        'pointerover',\r\n        'pointerup',\r\n        'progress',\r\n        'ratechange',\r\n        'reset',\r\n        'resize',\r\n        'scroll',\r\n        'seeked',\r\n        'seeking',\r\n        'select',\r\n        'selectionchange',\r\n        'selectstart',\r\n        'show',\r\n        'sort',\r\n        'stalled',\r\n        'submit',\r\n        'suspend',\r\n        'timeupdate',\r\n        'volumechange',\r\n        'touchcancel',\r\n        'touchmove',\r\n        'touchstart',\r\n        'touchend',\r\n        'transitioncancel',\r\n        'transitionend',\r\n        'waiting',\r\n        'wheel'\r\n    ];\r\n    const documentEventNames = [\r\n        'afterscriptexecute', 'beforescriptexecute', 'DOMContentLoaded', 'freeze', 'fullscreenchange',\r\n        'mozfullscreenchange', 'webkitfullscreenchange', 'msfullscreenchange', 'fullscreenerror',\r\n        'mozfullscreenerror', 'webkitfullscreenerror', 'msfullscreenerror', 'readystatechange',\r\n        'visibilitychange', 'resume'\r\n    ];\r\n    const windowEventNames = [\r\n        'absolutedeviceorientation',\r\n        'afterinput',\r\n        'afterprint',\r\n        'appinstalled',\r\n        'beforeinstallprompt',\r\n        'beforeprint',\r\n        'beforeunload',\r\n        'devicelight',\r\n        'devicemotion',\r\n        'deviceorientation',\r\n        'deviceorientationabsolute',\r\n        'deviceproximity',\r\n        'hashchange',\r\n        'languagechange',\r\n        'message',\r\n        'mozbeforepaint',\r\n        'offline',\r\n        'online',\r\n        'paint',\r\n        'pageshow',\r\n        'pagehide',\r\n        'popstate',\r\n        'rejectionhandled',\r\n        'storage',\r\n        'unhandledrejection',\r\n        'unload',\r\n        'userproximity',\r\n        'vrdisplayconnected',\r\n        'vrdisplaydisconnected',\r\n        'vrdisplaypresentchange'\r\n    ];\r\n    const htmlElementEventNames = [\r\n        'beforecopy', 'beforecut', 'beforepaste', 'copy', 'cut', 'paste', 'dragstart', 'loadend',\r\n        'animationstart', 'search', 'transitionrun', 'transitionstart', 'webkitanimationend',\r\n        'webkitanimationiteration', 'webkitanimationstart', 'webkittransitionend'\r\n    ];\r\n    const mediaElementEventNames = ['encrypted', 'waitingforkey', 'msneedkey', 'mozinterruptbegin', 'mozinterruptend'];\r\n    const ieElementEventNames = [\r\n        'activate',\r\n        'afterupdate',\r\n        'ariarequest',\r\n        'beforeactivate',\r\n        'beforedeactivate',\r\n        'beforeeditfocus',\r\n        'beforeupdate',\r\n        'cellchange',\r\n        'controlselect',\r\n        'dataavailable',\r\n        'datasetchanged',\r\n        'datasetcomplete',\r\n        'errorupdate',\r\n        'filterchange',\r\n        'layoutcomplete',\r\n        'losecapture',\r\n        'move',\r\n        'moveend',\r\n        'movestart',\r\n        'propertychange',\r\n        'resizeend',\r\n        'resizestart',\r\n        'rowenter',\r\n        'rowexit',\r\n        'rowsdelete',\r\n        'rowsinserted',\r\n        'command',\r\n        'compassneedscalibration',\r\n        'deactivate',\r\n        'help',\r\n        'mscontentzoom',\r\n        'msmanipulationstatechanged',\r\n        'msgesturechange',\r\n        'msgesturedoubletap',\r\n        'msgestureend',\r\n        'msgesturehold',\r\n        'msgesturestart',\r\n        'msgesturetap',\r\n        'msgotpointercapture',\r\n        'msinertiastart',\r\n        'mslostpointercapture',\r\n        'mspointercancel',\r\n        'mspointerdown',\r\n        'mspointerenter',\r\n        'mspointerhover',\r\n        'mspointerleave',\r\n        'mspointermove',\r\n        'mspointerout',\r\n        'mspointerover',\r\n        'mspointerup',\r\n        'pointerout',\r\n        'mssitemodejumplistitemremoved',\r\n        'msthumbnailclick',\r\n        'stop',\r\n        'storagecommit'\r\n    ];\r\n    const webglEventNames = ['webglcontextrestored', 'webglcontextlost', 'webglcontextcreationerror'];\r\n    const formEventNames = ['autocomplete', 'autocompleteerror'];\r\n    const detailEventNames = ['toggle'];\r\n    const frameEventNames = ['load'];\r\n    const frameSetEventNames = ['blur', 'error', 'focus', 'load', 'resize', 'scroll', 'messageerror'];\r\n    const marqueeEventNames = ['bounce', 'finish', 'start'];\r\n    const XMLHttpRequestEventNames = [\r\n        'loadstart', 'progress', 'abort', 'error', 'load', 'progress', 'timeout', 'loadend',\r\n        'readystatechange'\r\n    ];\r\n    const IDBIndexEventNames = ['upgradeneeded', 'complete', 'abort', 'success', 'error', 'blocked', 'versionchange', 'close'];\r\n    const websocketEventNames = ['close', 'error', 'open', 'message'];\r\n    const workerEventNames = ['error', 'message'];\r\n    const eventNames = globalEventHandlersEventNames.concat(webglEventNames, formEventNames, detailEventNames, documentEventNames, windowEventNames, htmlElementEventNames, ieElementEventNames);\r\n    function filterProperties(target, onProperties, ignoreProperties) {\r\n        if (!ignoreProperties || ignoreProperties.length === 0) {\r\n            return onProperties;\r\n        }\r\n        const tip = ignoreProperties.filter(ip => ip.target === target);\r\n        if (!tip || tip.length === 0) {\r\n            return onProperties;\r\n        }\r\n        const targetIgnoreProperties = tip[0].ignoreProperties;\r\n        return onProperties.filter(op => targetIgnoreProperties.indexOf(op) === -1);\r\n    }\r\n    function patchFilteredProperties(target, onProperties, ignoreProperties, prototype) {\r\n        // check whether target is available, sometimes target will be undefined\r\n        // because different browser or some 3rd party plugin.\r\n        if (!target) {\r\n            return;\r\n        }\r\n        const filteredProperties = filterProperties(target, onProperties, ignoreProperties);\r\n        patchOnProperties(target, filteredProperties, prototype);\r\n    }\r\n    function propertyDescriptorPatch(api, _global) {\r\n        if (isNode && !isMix) {\r\n            return;\r\n        }\r\n        if (Zone[api.symbol('patchEvents')]) {\r\n            // events are already been patched by legacy patch.\r\n            return;\r\n        }\r\n        const supportsWebSocket = typeof WebSocket !== 'undefined';\r\n        const ignoreProperties = _global['__Zone_ignore_on_properties'];\r\n        // for browsers that we can patch the descriptor:  Chrome & Firefox\r\n        if (isBrowser) {\r\n            const internalWindow = window;\r\n            const ignoreErrorProperties = isIE ? [{ target: internalWindow, ignoreProperties: ['error'] }] : [];\r\n            // in IE/Edge, onProp not exist in window object, but in WindowPrototype\r\n            // so we need to pass WindowPrototype to check onProp exist or not\r\n            patchFilteredProperties(internalWindow, eventNames.concat(['messageerror']), ignoreProperties ? ignoreProperties.concat(ignoreErrorProperties) : ignoreProperties, ObjectGetPrototypeOf(internalWindow));\r\n            patchFilteredProperties(Document.prototype, eventNames, ignoreProperties);\r\n            if (typeof internalWindow['SVGElement'] !== 'undefined') {\r\n                patchFilteredProperties(internalWindow['SVGElement'].prototype, eventNames, ignoreProperties);\r\n            }\r\n            patchFilteredProperties(Element.prototype, eventNames, ignoreProperties);\r\n            patchFilteredProperties(HTMLElement.prototype, eventNames, ignoreProperties);\r\n            patchFilteredProperties(HTMLMediaElement.prototype, mediaElementEventNames, ignoreProperties);\r\n            patchFilteredProperties(HTMLFrameSetElement.prototype, windowEventNames.concat(frameSetEventNames), ignoreProperties);\r\n            patchFilteredProperties(HTMLBodyElement.prototype, windowEventNames.concat(frameSetEventNames), ignoreProperties);\r\n            patchFilteredProperties(HTMLFrameElement.prototype, frameEventNames, ignoreProperties);\r\n            patchFilteredProperties(HTMLIFrameElement.prototype, frameEventNames, ignoreProperties);\r\n            const HTMLMarqueeElement = internalWindow['HTMLMarqueeElement'];\r\n            if (HTMLMarqueeElement) {\r\n                patchFilteredProperties(HTMLMarqueeElement.prototype, marqueeEventNames, ignoreProperties);\r\n            }\r\n            const Worker = internalWindow['Worker'];\r\n            if (Worker) {\r\n                patchFilteredProperties(Worker.prototype, workerEventNames, ignoreProperties);\r\n            }\r\n        }\r\n        const XMLHttpRequest = _global['XMLHttpRequest'];\r\n        if (XMLHttpRequest) {\r\n            // XMLHttpRequest is not available in ServiceWorker, so we need to check here\r\n            patchFilteredProperties(XMLHttpRequest.prototype, XMLHttpRequestEventNames, ignoreProperties);\r\n        }\r\n        const XMLHttpRequestEventTarget = _global['XMLHttpRequestEventTarget'];\r\n        if (XMLHttpRequestEventTarget) {\r\n            patchFilteredProperties(XMLHttpRequestEventTarget && XMLHttpRequestEventTarget.prototype, XMLHttpRequestEventNames, ignoreProperties);\r\n        }\r\n        if (typeof IDBIndex !== 'undefined') {\r\n            patchFilteredProperties(IDBIndex.prototype, IDBIndexEventNames, ignoreProperties);\r\n            patchFilteredProperties(IDBRequest.prototype, IDBIndexEventNames, ignoreProperties);\r\n            patchFilteredProperties(IDBOpenDBRequest.prototype, IDBIndexEventNames, ignoreProperties);\r\n            patchFilteredProperties(IDBDatabase.prototype, IDBIndexEventNames, ignoreProperties);\r\n            patchFilteredProperties(IDBTransaction.prototype, IDBIndexEventNames, ignoreProperties);\r\n            patchFilteredProperties(IDBCursor.prototype, IDBIndexEventNames, ignoreProperties);\r\n        }\r\n        if (supportsWebSocket) {\r\n            patchFilteredProperties(WebSocket.prototype, websocketEventNames, ignoreProperties);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @license\r\n     * Copyright Google Inc. All Rights Reserved.\r\n     *\r\n     * Use of this source code is governed by an MIT-style license that can be\r\n     * found in the LICENSE file at https://angular.io/license\r\n     */\r\n    Zone.__load_patch('util', (global, Zone, api) => {\r\n        api.patchOnProperties = patchOnProperties;\r\n        api.patchMethod = patchMethod;\r\n        api.bindArguments = bindArguments;\r\n        api.patchMacroTask = patchMacroTask;\r\n        // In earlier version of zone.js (<0.9.0), we use env name `__zone_symbol__BLACK_LISTED_EVENTS` to\r\n        // define which events will not be patched by `Zone.js`.\r\n        // In newer version (>=0.9.0), we change the env name to `__zone_symbol__UNPATCHED_EVENTS` to keep\r\n        // the name consistent with angular repo.\r\n        // The  `__zone_symbol__BLACK_LISTED_EVENTS` is deprecated, but it is still be supported for\r\n        // backwards compatibility.\r\n        const SYMBOL_BLACK_LISTED_EVENTS = Zone.__symbol__('BLACK_LISTED_EVENTS');\r\n        const SYMBOL_UNPATCHED_EVENTS = Zone.__symbol__('UNPATCHED_EVENTS');\r\n        if (global[SYMBOL_UNPATCHED_EVENTS]) {\r\n            global[SYMBOL_BLACK_LISTED_EVENTS] = global[SYMBOL_UNPATCHED_EVENTS];\r\n        }\r\n        if (global[SYMBOL_BLACK_LISTED_EVENTS]) {\r\n            Zone[SYMBOL_BLACK_LISTED_EVENTS] = Zone[SYMBOL_UNPATCHED_EVENTS] =\r\n                global[SYMBOL_BLACK_LISTED_EVENTS];\r\n        }\r\n        api.patchEventPrototype = patchEventPrototype;\r\n        api.patchEventTarget = patchEventTarget;\r\n        api.isIEOrEdge = isIEOrEdge;\r\n        api.ObjectDefineProperty = ObjectDefineProperty;\r\n        api.ObjectGetOwnPropertyDescriptor = ObjectGetOwnPropertyDescriptor;\r\n        api.ObjectCreate = ObjectCreate;\r\n        api.ArraySlice = ArraySlice;\r\n        api.patchClass = patchClass;\r\n        api.wrapWithCurrentZone = wrapWithCurrentZone;\r\n        api.filterProperties = filterProperties;\r\n        api.attachOriginToPatched = attachOriginToPatched;\r\n        api._redefineProperty = Object.defineProperty;\r\n        api.patchCallbacks = patchCallbacks;\r\n        api.getGlobalObjects = () => ({ globalSources, zoneSymbolEventNames: zoneSymbolEventNames$1, eventNames, isBrowser, isMix, isNode, TRUE_STR,\r\n            FALSE_STR, ZONE_SYMBOL_PREFIX, ADD_EVENT_LISTENER_STR, REMOVE_EVENT_LISTENER_STR });\r\n    });\r\n\r\n    /**\r\n     * @license\r\n     * Copyright Google Inc. All Rights Reserved.\r\n     *\r\n     * Use of this source code is governed by an MIT-style license that can be\r\n     * found in the LICENSE file at https://angular.io/license\r\n     */\r\n    const taskSymbol = zoneSymbol('zoneTask');\r\n    function patchTimer(window, setName, cancelName, nameSuffix) {\r\n        let setNative = null;\r\n        let clearNative = null;\r\n        setName += nameSuffix;\r\n        cancelName += nameSuffix;\r\n        const tasksByHandleId = {};\r\n        function scheduleTask(task) {\r\n            const data = task.data;\r\n            function timer() {\r\n                try {\r\n                    task.invoke.apply(this, arguments);\r\n                }\r\n                finally {\r\n                    // issue-934, task will be cancelled\r\n                    // even it is a periodic task such as\r\n                    // setInterval\r\n                    if (!(task.data && task.data.isPeriodic)) {\r\n                        if (typeof data.handleId === 'number') {\r\n                            // in non-nodejs env, we remove timerId\r\n                            // from local cache\r\n                            delete tasksByHandleId[data.handleId];\r\n                        }\r\n                        else if (data.handleId) {\r\n                            // Node returns complex objects as handleIds\r\n                            // we remove task reference from timer object\r\n                            data.handleId[taskSymbol] = null;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            data.args[0] = timer;\r\n            data.handleId = setNative.apply(window, data.args);\r\n            return task;\r\n        }\r\n        function clearTask(task) { return clearNative(task.data.handleId); }\r\n        setNative =\r\n            patchMethod(window, setName, (delegate) => function (self, args) {\r\n                if (typeof args[0] === 'function') {\r\n                    const options = {\r\n                        isPeriodic: nameSuffix === 'Interval',\r\n                        delay: (nameSuffix === 'Timeout' || nameSuffix === 'Interval') ? args[1] || 0 :\r\n                            undefined,\r\n                        args: args\r\n                    };\r\n                    const task = scheduleMacroTaskWithCurrentZone(setName, args[0], options, scheduleTask, clearTask);\r\n                    if (!task) {\r\n                        return task;\r\n                    }\r\n                    // Node.js must additionally support the ref and unref functions.\r\n                    const handle = task.data.handleId;\r\n                    if (typeof handle === 'number') {\r\n                        // for non nodejs env, we save handleId: task\r\n                        // mapping in local cache for clearTimeout\r\n                        tasksByHandleId[handle] = task;\r\n                    }\r\n                    else if (handle) {\r\n                        // for nodejs env, we save task\r\n                        // reference in timerId Object for clearTimeout\r\n                        handle[taskSymbol] = task;\r\n                    }\r\n                    // check whether handle is null, because some polyfill or browser\r\n                    // may return undefined from setTimeout/setInterval/setImmediate/requestAnimationFrame\r\n                    if (handle && handle.ref && handle.unref && typeof handle.ref === 'function' &&\r\n                        typeof handle.unref === 'function') {\r\n                        task.ref = handle.ref.bind(handle);\r\n                        task.unref = handle.unref.bind(handle);\r\n                    }\r\n                    if (typeof handle === 'number' || handle) {\r\n                        return handle;\r\n                    }\r\n                    return task;\r\n                }\r\n                else {\r\n                    // cause an error by calling it directly.\r\n                    return delegate.apply(window, args);\r\n                }\r\n            });\r\n        clearNative =\r\n            patchMethod(window, cancelName, (delegate) => function (self, args) {\r\n                const id = args[0];\r\n                let task;\r\n                if (typeof id === 'number') {\r\n                    // non nodejs env.\r\n                    task = tasksByHandleId[id];\r\n                }\r\n                else {\r\n                    // nodejs env.\r\n                    task = id && id[taskSymbol];\r\n                    // other environments.\r\n                    if (!task) {\r\n                        task = id;\r\n                    }\r\n                }\r\n                if (task && typeof task.type === 'string') {\r\n                    if (task.state !== 'notScheduled' &&\r\n                        (task.cancelFn && task.data.isPeriodic || task.runCount === 0)) {\r\n                        if (typeof id === 'number') {\r\n                            delete tasksByHandleId[id];\r\n                        }\r\n                        else if (id) {\r\n                            id[taskSymbol] = null;\r\n                        }\r\n                        // Do not cancel already canceled functions\r\n                        task.zone.cancelTask(task);\r\n                    }\r\n                }\r\n                else {\r\n                    // cause an error by calling it directly.\r\n                    delegate.apply(window, args);\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * @license\r\n     * Copyright Google Inc. All Rights Reserved.\r\n     *\r\n     * Use of this source code is governed by an MIT-style license that can be\r\n     * found in the LICENSE file at https://angular.io/license\r\n     */\r\n    function patchCustomElements(_global, api) {\r\n        const { isBrowser, isMix } = api.getGlobalObjects();\r\n        if ((!isBrowser && !isMix) || !_global['customElements'] || !('customElements' in _global)) {\r\n            return;\r\n        }\r\n        const callbacks = ['connectedCallback', 'disconnectedCallback', 'adoptedCallback', 'attributeChangedCallback'];\r\n        api.patchCallbacks(api, _global.customElements, 'customElements', 'define', callbacks);\r\n    }\r\n\r\n    /**\r\n     * @license\r\n     * Copyright Google Inc. All Rights Reserved.\r\n     *\r\n     * Use of this source code is governed by an MIT-style license that can be\r\n     * found in the LICENSE file at https://angular.io/license\r\n     */\r\n    function eventTargetPatch(_global, api) {\r\n        if (Zone[api.symbol('patchEventTarget')]) {\r\n            // EventTarget is already patched.\r\n            return;\r\n        }\r\n        const { eventNames, zoneSymbolEventNames, TRUE_STR, FALSE_STR, ZONE_SYMBOL_PREFIX } = api.getGlobalObjects();\r\n        //  predefine all __zone_symbol__ + eventName + true/false string\r\n        for (let i = 0; i < eventNames.length; i++) {\r\n            const eventName = eventNames[i];\r\n            const falseEventName = eventName + FALSE_STR;\r\n            const trueEventName = eventName + TRUE_STR;\r\n            const symbol = ZONE_SYMBOL_PREFIX + falseEventName;\r\n            const symbolCapture = ZONE_SYMBOL_PREFIX + trueEventName;\r\n            zoneSymbolEventNames[eventName] = {};\r\n            zoneSymbolEventNames[eventName][FALSE_STR] = symbol;\r\n            zoneSymbolEventNames[eventName][TRUE_STR] = symbolCapture;\r\n        }\r\n        const EVENT_TARGET = _global['EventTarget'];\r\n        if (!EVENT_TARGET || !EVENT_TARGET.prototype) {\r\n            return;\r\n        }\r\n        api.patchEventTarget(_global, [EVENT_TARGET && EVENT_TARGET.prototype]);\r\n        return true;\r\n    }\r\n    function patchEvent(global, api) {\r\n        api.patchEventPrototype(global, api);\r\n    }\r\n\r\n    /**\r\n     * @license\r\n     * Copyright Google Inc. All Rights Reserved.\r\n     *\r\n     * Use of this source code is governed by an MIT-style license that can be\r\n     * found in the LICENSE file at https://angular.io/license\r\n     */\r\n    Zone.__load_patch('legacy', (global) => {\r\n        const legacyPatch = global[Zone.__symbol__('legacyPatch')];\r\n        if (legacyPatch) {\r\n            legacyPatch();\r\n        }\r\n    });\r\n    Zone.__load_patch('timers', (global) => {\r\n        const set = 'set';\r\n        const clear = 'clear';\r\n        patchTimer(global, set, clear, 'Timeout');\r\n        patchTimer(global, set, clear, 'Interval');\r\n        patchTimer(global, set, clear, 'Immediate');\r\n    });\r\n    Zone.__load_patch('requestAnimationFrame', (global) => {\r\n        patchTimer(global, 'request', 'cancel', 'AnimationFrame');\r\n        patchTimer(global, 'mozRequest', 'mozCancel', 'AnimationFrame');\r\n        patchTimer(global, 'webkitRequest', 'webkitCancel', 'AnimationFrame');\r\n    });\r\n    Zone.__load_patch('blocking', (global, Zone) => {\r\n        const blockingMethods = ['alert', 'prompt', 'confirm'];\r\n        for (let i = 0; i < blockingMethods.length; i++) {\r\n            const name = blockingMethods[i];\r\n            patchMethod(global, name, (delegate, symbol, name) => {\r\n                return function (s, args) {\r\n                    return Zone.current.run(delegate, global, args, name);\r\n                };\r\n            });\r\n        }\r\n    });\r\n    Zone.__load_patch('EventTarget', (global, Zone, api) => {\r\n        patchEvent(global, api);\r\n        eventTargetPatch(global, api);\r\n        // patch XMLHttpRequestEventTarget's addEventListener/removeEventListener\r\n        const XMLHttpRequestEventTarget = global['XMLHttpRequestEventTarget'];\r\n        if (XMLHttpRequestEventTarget && XMLHttpRequestEventTarget.prototype) {\r\n            api.patchEventTarget(global, [XMLHttpRequestEventTarget.prototype]);\r\n        }\r\n        patchClass('MutationObserver');\r\n        patchClass('WebKitMutationObserver');\r\n        patchClass('IntersectionObserver');\r\n        patchClass('FileReader');\r\n    });\r\n    Zone.__load_patch('on_property', (global, Zone, api) => {\r\n        propertyDescriptorPatch(api, global);\r\n    });\r\n    Zone.__load_patch('customElements', (global, Zone, api) => {\r\n        patchCustomElements(global, api);\r\n    });\r\n    Zone.__load_patch('XHR', (global, Zone) => {\r\n        // Treat XMLHttpRequest as a macrotask.\r\n        patchXHR(global);\r\n        const XHR_TASK = zoneSymbol('xhrTask');\r\n        const XHR_SYNC = zoneSymbol('xhrSync');\r\n        const XHR_LISTENER = zoneSymbol('xhrListener');\r\n        const XHR_SCHEDULED = zoneSymbol('xhrScheduled');\r\n        const XHR_URL = zoneSymbol('xhrURL');\r\n        const XHR_ERROR_BEFORE_SCHEDULED = zoneSymbol('xhrErrorBeforeScheduled');\r\n        function patchXHR(window) {\r\n            const XMLHttpRequest = window['XMLHttpRequest'];\r\n            if (!XMLHttpRequest) {\r\n                // XMLHttpRequest is not available in service worker\r\n                return;\r\n            }\r\n            const XMLHttpRequestPrototype = XMLHttpRequest.prototype;\r\n            function findPendingTask(target) { return target[XHR_TASK]; }\r\n            let oriAddListener = XMLHttpRequestPrototype[ZONE_SYMBOL_ADD_EVENT_LISTENER];\r\n            let oriRemoveListener = XMLHttpRequestPrototype[ZONE_SYMBOL_REMOVE_EVENT_LISTENER];\r\n            if (!oriAddListener) {\r\n                const XMLHttpRequestEventTarget = window['XMLHttpRequestEventTarget'];\r\n                if (XMLHttpRequestEventTarget) {\r\n                    const XMLHttpRequestEventTargetPrototype = XMLHttpRequestEventTarget.prototype;\r\n                    oriAddListener = XMLHttpRequestEventTargetPrototype[ZONE_SYMBOL_ADD_EVENT_LISTENER];\r\n                    oriRemoveListener = XMLHttpRequestEventTargetPrototype[ZONE_SYMBOL_REMOVE_EVENT_LISTENER];\r\n                }\r\n            }\r\n            const READY_STATE_CHANGE = 'readystatechange';\r\n            const SCHEDULED = 'scheduled';\r\n            function scheduleTask(task) {\r\n                const data = task.data;\r\n                const target = data.target;\r\n                target[XHR_SCHEDULED] = false;\r\n                target[XHR_ERROR_BEFORE_SCHEDULED] = false;\r\n                // remove existing event listener\r\n                const listener = target[XHR_LISTENER];\r\n                if (!oriAddListener) {\r\n                    oriAddListener = target[ZONE_SYMBOL_ADD_EVENT_LISTENER];\r\n                    oriRemoveListener = target[ZONE_SYMBOL_REMOVE_EVENT_LISTENER];\r\n                }\r\n                if (listener) {\r\n                    oriRemoveListener.call(target, READY_STATE_CHANGE, listener);\r\n                }\r\n                const newListener = target[XHR_LISTENER] = () => {\r\n                    if (target.readyState === target.DONE) {\r\n                        // sometimes on some browsers XMLHttpRequest will fire onreadystatechange with\r\n                        // readyState=4 multiple times, so we need to check task state here\r\n                        if (!data.aborted && target[XHR_SCHEDULED] && task.state === SCHEDULED) {\r\n                            // check whether the xhr has registered onload listener\r\n                            // if that is the case, the task should invoke after all\r\n                            // onload listeners finish.\r\n                            const loadTasks = target[Zone.__symbol__('loadfalse')];\r\n                            if (loadTasks && loadTasks.length > 0) {\r\n                                const oriInvoke = task.invoke;\r\n                                task.invoke = function () {\r\n                                    // need to load the tasks again, because in other\r\n                                    // load listener, they may remove themselves\r\n                                    const loadTasks = target[Zone.__symbol__('loadfalse')];\r\n                                    for (let i = 0; i < loadTasks.length; i++) {\r\n                                        if (loadTasks[i] === task) {\r\n                                            loadTasks.splice(i, 1);\r\n                                        }\r\n                                    }\r\n                                    if (!data.aborted && task.state === SCHEDULED) {\r\n                                        oriInvoke.call(task);\r\n                                    }\r\n                                };\r\n                                loadTasks.push(task);\r\n                            }\r\n                            else {\r\n                                task.invoke();\r\n                            }\r\n                        }\r\n                        else if (!data.aborted && target[XHR_SCHEDULED] === false) {\r\n                            // error occurs when xhr.send()\r\n                            target[XHR_ERROR_BEFORE_SCHEDULED] = true;\r\n                        }\r\n                    }\r\n                };\r\n                oriAddListener.call(target, READY_STATE_CHANGE, newListener);\r\n                const storedTask = target[XHR_TASK];\r\n                if (!storedTask) {\r\n                    target[XHR_TASK] = task;\r\n                }\r\n                sendNative.apply(target, data.args);\r\n                target[XHR_SCHEDULED] = true;\r\n                return task;\r\n            }\r\n            function placeholderCallback() { }\r\n            function clearTask(task) {\r\n                const data = task.data;\r\n                // Note - ideally, we would call data.target.removeEventListener here, but it's too late\r\n                // to prevent it from firing. So instead, we store info for the event listener.\r\n                data.aborted = true;\r\n                return abortNative.apply(data.target, data.args);\r\n            }\r\n            const openNative = patchMethod(XMLHttpRequestPrototype, 'open', () => function (self, args) {\r\n                self[XHR_SYNC] = args[2] == false;\r\n                self[XHR_URL] = args[1];\r\n                return openNative.apply(self, args);\r\n            });\r\n            const XMLHTTPREQUEST_SOURCE = 'XMLHttpRequest.send';\r\n            const fetchTaskAborting = zoneSymbol('fetchTaskAborting');\r\n            const fetchTaskScheduling = zoneSymbol('fetchTaskScheduling');\r\n            const sendNative = patchMethod(XMLHttpRequestPrototype, 'send', () => function (self, args) {\r\n                if (Zone.current[fetchTaskScheduling] === true) {\r\n                    // a fetch is scheduling, so we are using xhr to polyfill fetch\r\n                    // and because we already schedule macroTask for fetch, we should\r\n                    // not schedule a macroTask for xhr again\r\n                    return sendNative.apply(self, args);\r\n                }\r\n                if (self[XHR_SYNC]) {\r\n                    // if the XHR is sync there is no task to schedule, just execute the code.\r\n                    return sendNative.apply(self, args);\r\n                }\r\n                else {\r\n                    const options = { target: self, url: self[XHR_URL], isPeriodic: false, args: args, aborted: false };\r\n                    const task = scheduleMacroTaskWithCurrentZone(XMLHTTPREQUEST_SOURCE, placeholderCallback, options, scheduleTask, clearTask);\r\n                    if (self && self[XHR_ERROR_BEFORE_SCHEDULED] === true && !options.aborted &&\r\n                        task.state === SCHEDULED) {\r\n                        // xhr request throw error when send\r\n                        // we should invoke task instead of leaving a scheduled\r\n                        // pending macroTask\r\n                        task.invoke();\r\n                    }\r\n                }\r\n            });\r\n            const abortNative = patchMethod(XMLHttpRequestPrototype, 'abort', () => function (self, args) {\r\n                const task = findPendingTask(self);\r\n                if (task && typeof task.type == 'string') {\r\n                    // If the XHR has already completed, do nothing.\r\n                    // If the XHR has already been aborted, do nothing.\r\n                    // Fix #569, call abort multiple times before done will cause\r\n                    // macroTask task count be negative number\r\n                    if (task.cancelFn == null || (task.data && task.data.aborted)) {\r\n                        return;\r\n                    }\r\n                    task.zone.cancelTask(task);\r\n                }\r\n                else if (Zone.current[fetchTaskAborting] === true) {\r\n                    // the abort is called from fetch polyfill, we need to call native abort of XHR.\r\n                    return abortNative.apply(self, args);\r\n                }\r\n                // Otherwise, we are trying to abort an XHR which has not yet been sent, so there is no\r\n                // task\r\n                // to cancel. Do nothing.\r\n            });\r\n        }\r\n    });\r\n    Zone.__load_patch('geolocation', (global) => {\r\n        /// GEO_LOCATION\r\n        if (global['navigator'] && global['navigator'].geolocation) {\r\n            patchPrototype(global['navigator'].geolocation, ['getCurrentPosition', 'watchPosition']);\r\n        }\r\n    });\r\n    Zone.__load_patch('PromiseRejectionEvent', (global, Zone) => {\r\n        // handle unhandled promise rejection\r\n        function findPromiseRejectionHandler(evtName) {\r\n            return function (e) {\r\n                const eventTasks = findEventTasks(global, evtName);\r\n                eventTasks.forEach(eventTask => {\r\n                    // windows has added unhandledrejection event listener\r\n                    // trigger the event listener\r\n                    const PromiseRejectionEvent = global['PromiseRejectionEvent'];\r\n                    if (PromiseRejectionEvent) {\r\n                        const evt = new PromiseRejectionEvent(evtName, { promise: e.promise, reason: e.rejection });\r\n                        eventTask.invoke(evt);\r\n                    }\r\n                });\r\n            };\r\n        }\r\n        if (global['PromiseRejectionEvent']) {\r\n            Zone[zoneSymbol('unhandledPromiseRejectionHandler')] =\r\n                findPromiseRejectionHandler('unhandledrejection');\r\n            Zone[zoneSymbol('rejectionHandledHandler')] =\r\n                findPromiseRejectionHandler('rejectionhandled');\r\n        }\r\n    });\r\n\r\n})));\r\n\n\n/***/ })\n\n},[[2,2]]]);","inputSourceMap":null}