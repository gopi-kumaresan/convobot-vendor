{"version":3,"file":"colorpicker.d.ts","sources":["colorpicker.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;;;AACA","sourcesContent":["import { ElementRef, OnDestroy, EventEmitter, Renderer2, ChangeDetectorRef } from '@angular/core';\r\nimport { AnimationEvent } from '@angular/animations';\r\nimport { ControlValueAccessor } from '@angular/forms';\r\nexport declare const COLORPICKER_VALUE_ACCESSOR: any;\r\nexport declare class ColorPicker implements ControlValueAccessor, OnDestroy {\r\n    el: ElementRef;\r\n    renderer: Renderer2;\r\n    cd: ChangeDetectorRef;\r\n    style: any;\r\n    styleClass: string;\r\n    inline: boolean;\r\n    format: string;\r\n    appendTo: any;\r\n    disabled: boolean;\r\n    tabindex: string;\r\n    inputId: string;\r\n    autoZIndex: boolean;\r\n    baseZIndex: number;\r\n    showTransitionOptions: string;\r\n    hideTransitionOptions: string;\r\n    onChange: EventEmitter<any>;\r\n    onShow: EventEmitter<any>;\r\n    onHide: EventEmitter<any>;\r\n    inputViewChild: ElementRef;\r\n    value: any;\r\n    inputBgColor: string;\r\n    shown: boolean;\r\n    overlayVisible: boolean;\r\n    defaultColor: string;\r\n    onModelChange: Function;\r\n    onModelTouched: Function;\r\n    documentClickListener: Function;\r\n    documentMousemoveListener: Function;\r\n    documentMouseupListener: Function;\r\n    documentHueMoveListener: Function;\r\n    selfClick: boolean;\r\n    colorDragging: boolean;\r\n    hueDragging: boolean;\r\n    overlay: HTMLDivElement;\r\n    colorSelectorViewChild: ElementRef;\r\n    colorHandleViewChild: ElementRef;\r\n    hueViewChild: ElementRef;\r\n    hueHandleViewChild: ElementRef;\r\n    constructor(el: ElementRef, renderer: Renderer2, cd: ChangeDetectorRef);\r\n    colorSelector: ElementRef;\r\n    colorHandle: ElementRef;\r\n    hue: ElementRef;\r\n    hueHandle: ElementRef;\r\n    onHueMousedown(event: MouseEvent): void;\r\n    pickHue(event: MouseEvent): void;\r\n    onColorMousedown(event: MouseEvent): void;\r\n    pickColor(event: MouseEvent): void;\r\n    getValueToUpdate(): any;\r\n    updateModel(): void;\r\n    writeValue(value: any): void;\r\n    updateColorSelector(): void;\r\n    updateUI(): void;\r\n    onInputFocus(): void;\r\n    show(): void;\r\n    onOverlayAnimationStart(event: AnimationEvent): void;\r\n    onOverlayAnimationEnd(event: AnimationEvent): void;\r\n    appendOverlay(): void;\r\n    restoreOverlayAppend(): void;\r\n    alignOverlay(): void;\r\n    hide(): void;\r\n    onInputClick(): void;\r\n    togglePanel(): void;\r\n    onInputKeydown(event: KeyboardEvent): void;\r\n    onPanelClick(): void;\r\n    registerOnChange(fn: Function): void;\r\n    registerOnTouched(fn: Function): void;\r\n    setDisabledState(val: boolean): void;\r\n    bindDocumentClickListener(): void;\r\n    unbindDocumentClickListener(): void;\r\n    bindDocumentMousemoveListener(): void;\r\n    unbindDocumentMousemoveListener(): void;\r\n    bindDocumentMouseupListener(): void;\r\n    unbindDocumentMouseupListener(): void;\r\n    validateHSB(hsb: any): {\r\n        h: number;\r\n        s: number;\r\n        b: number;\r\n    };\r\n    validateRGB(rgb: any): {\r\n        r: number;\r\n        g: number;\r\n        b: number;\r\n    };\r\n    validateHEX(hex: any): any;\r\n    HEXtoRGB(hex: any): {\r\n        r: number;\r\n        g: number;\r\n        b: number;\r\n    };\r\n    HEXtoHSB(hex: any): {\r\n        h: number;\r\n        s: number;\r\n        b: number;\r\n    };\r\n    RGBtoHSB(rgb: any): {\r\n        h: number;\r\n        s: number;\r\n        b: number;\r\n    };\r\n    HSBtoRGB(hsb: any): {\r\n        r: number;\r\n        g: number;\r\n        b: number;\r\n    };\r\n    RGBtoHEX(rgb: any): string;\r\n    HSBtoHEX(hsb: any): string;\r\n    onOverlayHide(): void;\r\n    ngOnDestroy(): void;\r\n}\r\nexport declare class ColorPickerModule {\r\n}\r\n"]}