{"version":3,"file":"primeng-lts-terminal.js","sources":["primeng-lts/terminal/terminalservice.ts","primeng-lts/terminal/terminal.ts","primeng-lts/terminal/primeng-lts-terminal.ts"],"names":["__decorate"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n@Injectable()\nexport class TerminalService {\n    \n    private commandSource = new Subject<string>();\n    private responseSource = new Subject<string>();\n    \n    commandHandler = this.commandSource.asObservable();\n    responseHandler = this.responseSource.asObservable();\n    \n    sendCommand(command: string) {\n        if (command) {\n            this.commandSource.next(command);\n        }\n    }\n    \n    sendResponse(response: string) {\n        if (response) {\n            this.responseSource.next(response);\n        }\n    }\n}","import {NgModule,Component,AfterViewInit,AfterViewChecked,OnDestroy,Input,ElementRef,ChangeDetectionStrategy} from '@angular/core';\nimport {FormsModule} from '@angular/forms';\nimport {CommonModule} from '@angular/common';\nimport {DomHandler} from 'primeng-lts/dom';\nimport {TerminalService} from './terminalservice';\nimport {Subscription}   from 'rxjs';\n\n@Component({\n    selector: 'p-terminal',\n    template: `\n        <div [ngClass]=\"'ui-terminal ui-widget ui-widget-content ui-corner-all'\" [ngStyle]=\"style\" [class]=\"styleClass\" (click)=\"focus(in)\">\n            <div *ngIf=\"welcomeMessage\">{{welcomeMessage}}</div>\n            <div class=\"ui-terminal-content\">\n                <div *ngFor=\"let command of commands\">\n                    <span>{{prompt}}</span>\n                    <span class=\"ui-terminal-command\">{{command.text}}</span>\n                    <div>{{command.response}}</div>\n                </div>\n            </div>\n            <div>\n                <span class=\"ui-terminal-content-prompt\">{{prompt}}</span>\n                <input #in type=\"text\" [(ngModel)]=\"command\" class=\"ui-terminal-input\" autocomplete=\"off\" (keydown)=\"handleCommand($event)\" autofocus>\n            </div>\n        </div>\n    `,\n    changeDetection: ChangeDetectionStrategy.Default\n})\nexport class Terminal implements AfterViewInit,AfterViewChecked,OnDestroy {\n\n    @Input() welcomeMessage: string;\n\n    @Input() prompt: string;\n        \n    @Input() style: any;\n        \n    @Input() styleClass: string;\n            \n    commands: any[] = [];\n    \n    command: string;\n    \n    container: Element;\n    \n    commandProcessed: boolean;\n    \n    subscription: Subscription;\n    \n    constructor(public el: ElementRef, public terminalService: TerminalService) {\n        this.subscription = terminalService.responseHandler.subscribe(response => {\n            this.commands[this.commands.length - 1].response = response;\n            this.commandProcessed = true;\n        });\n    }\n    \n    ngAfterViewInit() {\n        this.container = DomHandler.find(this.el.nativeElement, '.ui-terminal')[0];\n    }\n    \n    ngAfterViewChecked() {\n        if (this.commandProcessed) {\n            this.container.scrollTop = this.container.scrollHeight;\n            this.commandProcessed = false;\n        }\n    }\n                \n    @Input()\n    set response(value: string) {\n        if (value) {\n            this.commands[this.commands.length - 1].response = value;\n            this.commandProcessed = true;\n        }\n    }\n    \n    handleCommand(event: KeyboardEvent) {\n        if (event.keyCode == 13) {\n            this.commands.push({text: this.command});\n            this.terminalService.sendCommand(this.command);\n            this.command = '';\n        }\n    }\n    \n    focus(element: HTMLElement) {\n        element.focus();\n    }\n    \n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n    \n}\n\n@NgModule({\n    imports: [CommonModule,FormsModule],\n    exports: [Terminal],\n    declarations: [Terminal]\n})\nexport class TerminalModule { }","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"]}