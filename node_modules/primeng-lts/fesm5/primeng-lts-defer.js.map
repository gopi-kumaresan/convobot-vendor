{"version":3,"file":"primeng-lts-defer.js","sources":["ng://primeng-lts/defer/defer.ts","ng://primeng-lts/defer/primeng-lts-defer.ts"],"sourcesContent":["import {NgModule,Directive,ElementRef,AfterViewInit,OnDestroy,TemplateRef,EmbeddedViewRef,\n        ViewContainerRef,Renderer2,EventEmitter,Output,ContentChild, ChangeDetectorRef} from '@angular/core';\nimport {CommonModule} from '@angular/common';\n\n@Directive({\n    selector: '[pDefer]'\n})\nexport class DeferredLoader implements AfterViewInit,OnDestroy {\n        \n    @Output() onLoad: EventEmitter<any> = new EventEmitter();\n    \n    @ContentChild(TemplateRef) template: TemplateRef<any>;\n        \n    documentScrollListener: Function;\n    \n    view: EmbeddedViewRef<any>;\n            \n    constructor(public el: ElementRef, public renderer: Renderer2, public viewContainer: ViewContainerRef, private cd: ChangeDetectorRef) {}\n    \n    ngAfterViewInit() {\n        if (this.shouldLoad()) {\n            this.load();\n        }\n        \n        if (!this.isLoaded()) {\n            this.documentScrollListener = this.renderer.listen('window', 'scroll', () => {\n                if (this.shouldLoad()) {\n                    this.load();\n                    this.documentScrollListener();\n                    this.documentScrollListener = null;\n                }\n            });\n        }\n    }\n    \n    shouldLoad(): boolean {\n        if (this.isLoaded()) {\n            return false;\n        }\n        else {\n            let rect = this.el.nativeElement.getBoundingClientRect();\n            let docElement = document.documentElement;\n            let winHeight = docElement.clientHeight;\n            \n            return (winHeight >= rect.top);\n        }\n    }\n    \n    load(): void { \n        this.view = this.viewContainer.createEmbeddedView(this.template);\n        this.onLoad.emit();\n        this.cd.detectChanges();\n    }\n    \n    isLoaded() {\n        return this.view != null;\n    }\n            \n    ngOnDestroy() {\n        this.view = null;\n        \n        if (this.documentScrollListener) {\n            this.documentScrollListener();\n        }\n    }\n}\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [DeferredLoader],\n    declarations: [DeferredLoader]\n})\nexport class DeferModule { }","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":[],"mappings":";;;;;;;;;AAAA;IAiBI,wBAAmB,EAAc,EAAS,QAAmB,EAAS,aAA+B,EAAU,EAAqB;QAAjH,OAAE,GAAF,EAAE,CAAY;QAAS,aAAQ,GAAR,QAAQ,CAAW;QAAS,kBAAa,GAAb,aAAa,CAAkB;QAAU,OAAE,GAAF,EAAE,CAAmB;QAR1H,WAAM,GAAsB,IAAI,YAAY,EAAE,CAAC;KAQ+E;IAExI,wCAAe,GAAf;QAAA,iBAcC;QAbG,IAAI,IAAI,CAAC,UAAU,EAAE,EAAE;YACnB,IAAI,CAAC,IAAI,EAAE,CAAC;SACf;QAED,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE;YAClB,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,QAAQ,EAAE,QAAQ,EAAE;gBACnE,IAAI,KAAI,CAAC,UAAU,EAAE,EAAE;oBACnB,KAAI,CAAC,IAAI,EAAE,CAAC;oBACZ,KAAI,CAAC,sBAAsB,EAAE,CAAC;oBAC9B,KAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC;iBACtC;aACJ,CAAC,CAAC;SACN;KACJ;IAED,mCAAU,GAAV;QACI,IAAI,IAAI,CAAC,QAAQ,EAAE,EAAE;YACjB,OAAO,KAAK,CAAC;SAChB;aACI;YACD,IAAI,IAAI,GAAG,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,qBAAqB,EAAE,CAAC;YACzD,IAAI,UAAU,GAAG,QAAQ,CAAC,eAAe,CAAC;YAC1C,IAAI,SAAS,GAAG,UAAU,CAAC,YAAY,CAAC;YAExC,QAAQ,SAAS,IAAI,IAAI,CAAC,GAAG,EAAE;SAClC;KACJ;IAED,6BAAI,GAAJ;QACI,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACjE,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;QACnB,IAAI,CAAC,EAAE,CAAC,aAAa,EAAE,CAAC;KAC3B;IAED,iCAAQ,GAAR;QACI,OAAO,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC;KAC5B;IAED,oCAAW,GAAX;QACI,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QAEjB,IAAI,IAAI,CAAC,sBAAsB,EAAE;YAC7B,IAAI,CAAC,sBAAsB,EAAE,CAAC;SACjC;KACJ;;gBA/CsB,UAAU;gBAAmB,SAAS;gBAAwB,gBAAgB;gBAAc,iBAAiB;;IAR1H;QAAT,MAAM,EAAE;kDAAgD;IAE9B;QAA1B,YAAY,CAAC,WAAW,CAAC;oDAA4B;IAJ7C,cAAc;QAH1B,SAAS,CAAC;YACP,QAAQ,EAAE,UAAU;SACvB,CAAC;OACW,cAAc,CA0D1B;IAAD,qBAAC;CA1DD,IA0DC;;IAOD;KAA4B;IAAf,WAAW;QALvB,QAAQ,CAAC;YACN,OAAO,EAAE,CAAC,YAAY,CAAC;YACvB,OAAO,EAAE,CAAC,cAAc,CAAC;YACzB,YAAY,EAAE,CAAC,cAAc,CAAC;SACjC,CAAC;OACW,WAAW,CAAI;IAAD,kBAAC;CAA5B;;ACxEA;;GAEG;;;;"}