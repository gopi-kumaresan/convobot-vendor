{"version":3,"file":"picklist.d.ts","sources":["picklist.d.ts"],"names":[],"mappingssourcesContent":["import { ElementRef, AfterContentInit, AfterViewChecked, QueryList, TemplateRef, EventEmitter } from '@angular/core';\r\nexport declare class PickList implements AfterViewChecked, AfterContentInit {\r\n    el: ElementRef;\r\n    source: any[];\r\n    target: any[];\r\n    sourceHeader: string;\r\n    targetHeader: string;\r\n    responsive: boolean;\r\n    filterBy: string;\r\n    filterLocale: string;\r\n    trackBy: Function;\r\n    sourceTrackBy: Function;\r\n    targetTrackBy: Function;\r\n    showSourceFilter: boolean;\r\n    showTargetFilter: boolean;\r\n    metaKeySelection: boolean;\r\n    dragdrop: boolean;\r\n    style: any;\r\n    styleClass: string;\r\n    sourceStyle: any;\r\n    targetStyle: any;\r\n    showSourceControls: boolean;\r\n    showTargetControls: boolean;\r\n    sourceFilterPlaceholder: string;\r\n    targetFilterPlaceholder: string;\r\n    disabled: boolean;\r\n    ariaSourceFilterLabel: string;\r\n    ariaTargetFilterLabel: string;\r\n    filterMatchMode: string;\r\n    onMoveToSource: EventEmitter<any>;\r\n    onMoveAllToSource: EventEmitter<any>;\r\n    onMoveAllToTarget: EventEmitter<any>;\r\n    onMoveToTarget: EventEmitter<any>;\r\n    onSourceReorder: EventEmitter<any>;\r\n    onTargetReorder: EventEmitter<any>;\r\n    onSourceSelect: EventEmitter<any>;\r\n    onTargetSelect: EventEmitter<any>;\r\n    onSourceFilter: EventEmitter<any>;\r\n    onTargetFilter: EventEmitter<any>;\r\n    listViewSourceChild: ElementRef;\r\n    listViewTargetChild: ElementRef;\r\n    sourceFilterViewChild: ElementRef;\r\n    targetFilterViewChild: ElementRef;\r\n    templates: QueryList<any>;\r\n    itemTemplate: TemplateRef<any>;\r\n    visibleOptionsSource: any[];\r\n    visibleOptionsTarget: any[];\r\n    selectedItemsSource: any[];\r\n    selectedItemsTarget: any[];\r\n    reorderedListElement: any;\r\n    draggedItemIndexSource: number;\r\n    draggedItemIndexTarget: number;\r\n    dragOverItemIndexSource: number;\r\n    dragOverItemIndexTarget: number;\r\n    dragging: boolean;\r\n    movedUp: boolean;\r\n    movedDown: boolean;\r\n    itemTouched: boolean;\r\n    filterValueSource: string;\r\n    filterValueTarget: string;\r\n    fromListType: number;\r\n    toListType: number;\r\n    onListItemDroppoint: boolean;\r\n    listHighlightTarget: boolean;\r\n    listHighlightSource: boolean;\r\n    emptyMessageSourceTemplate: TemplateRef<any>;\r\n    emptyMessageTargetTemplate: TemplateRef<any>;\r\n    readonly SOURCE_LIST = -1;\r\n    readonly TARGET_LIST = 1;\r\n    constructor(el: ElementRef);\r\n    ngAfterContentInit(): void;\r\n    ngAfterViewChecked(): void;\r\n    onItemClick(event: any, item: any, selectedItems: any[], callback: EventEmitter<any>): void;\r\n    onSourceItemDblClick(): void;\r\n    onTargetItemDblClick(): void;\r\n    onFilter(event: KeyboardEvent, data: any[], listType: number): void;\r\n    filter(query: string, data: any[], listType: number): void;\r\n    isItemVisible(item: any, listType: number): boolean;\r\n    isVisibleInList(data: any[], item: any, filterValue: string): boolean;\r\n    onItemTouchEnd(event: any): void;\r\n    private sortByIndexInList;\r\n    moveUp(listElement: any, list: any, selectedItems: any, callback: any): void;\r\n    moveTop(listElement: any, list: any, selectedItems: any, callback: any): void;\r\n    moveDown(listElement: any, list: any, selectedItems: any, callback: any): void;\r\n    moveBottom(listElement: any, list: any, selectedItems: any, callback: any): void;\r\n    moveRight(): void;\r\n    moveAllRight(): void;\r\n    moveLeft(): void;\r\n    moveAllLeft(): void;\r\n    isSelected(item: any, selectedItems: any[]): boolean;\r\n    findIndexInSelection(item: any, selectedItems: any[]): number;\r\n    findIndexInList(item: any, list: any): number;\r\n    onDragStart(event: DragEvent, index: number, listType: number): void;\r\n    onDragOver(event: DragEvent, index: number, listType: number): void;\r\n    onDragLeave(event: DragEvent, listType: number): void;\r\n    onDrop(event: DragEvent, index: number, listType: number): void;\r\n    onDragEnd(event: DragEvent): void;\r\n    onListDrop(event: DragEvent, listType: number): void;\r\n    insert(fromIndex: any, fromList: any, toIndex: any, toList: any, callback: any): void;\r\n    onListMouseMove(event: MouseEvent, listType: number): void;\r\n    onListDragLeave(): void;\r\n    resetFilter(): void;\r\n    onItemKeydown(event: KeyboardEvent, item: any, selectedItems: any[], callback: EventEmitter<any>): void;\r\n    findNextItem(item: any): any;\r\n    findPrevItem(item: any): any;\r\n}\r\nexport declare class PickListModule {\r\n}\r\n"]}