import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { NgModule, Component, ElementRef, OnDestroy, Input, OnInit, AfterViewChecked, ChangeDetectionStrategy } from '@angular/core';
import { CommonModule } from '@angular/common';
import { Calendar } from '@fullcalendar/core';
let FullCalendar = class FullCalendar {
    constructor(el) {
        this.el = el;
    }
    ngOnInit() {
        this.config = {
            theme: true
        };
        if (this.options) {
            for (let prop in this.options) {
                this.config[prop] = this.options[prop];
            }
        }
    }
    ngAfterViewChecked() {
        if (!this.initialized && this.el.nativeElement.offsetParent) {
            this.initialize();
        }
    }
    get events() {
        return this._events;
    }
    set events(value) {
        this._events = value;
        if (this._events && this.calendar) {
            this.calendar.removeAllEventSources();
            this.calendar.addEventSource(this._events);
        }
    }
    get options() {
        return this._options;
    }
    set options(value) {
        this._options = value;
        if (this._options && this.calendar) {
            for (let prop in this._options) {
                let optionValue = this._options[prop];
                this.config[prop] = optionValue;
                this.calendar.setOption(prop, optionValue);
            }
        }
    }
    initialize() {
        this.calendar = new Calendar(this.el.nativeElement.children[0], this.config);
        this.calendar.render();
        this.initialized = true;
        if (this.events) {
            this.calendar.removeAllEventSources();
            this.calendar.addEventSource(this.events);
        }
    }
    getCalendar() {
        return this.calendar;
    }
    ngOnDestroy() {
        if (this.calendar) {
            this.calendar.destroy();
            this.initialized = false;
            this.calendar = null;
        }
    }
};
FullCalendar.ɵfac = function FullCalendar_Factory(t) { return new (t || FullCalendar)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
FullCalendar.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: FullCalendar, selectors: [["p-fullCalendar"]], inputs: { events: "events", options: "options", style: "style", styleClass: "styleClass" }, decls: 1, vars: 3, consts: [[3, "ngStyle"]], template: function FullCalendar_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelement(0, "div", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵclassMap(ctx.styleClass);
        ɵngcc0.ɵɵproperty("ngStyle", ctx.style);
    } }, directives: [ɵngcc1.NgStyle], encapsulation: 2 });
FullCalendar.ctorParameters = () => [
    { type: ElementRef }
];
__decorate([
    Input()
], FullCalendar.prototype, "style", void 0);
__decorate([
    Input()
], FullCalendar.prototype, "styleClass", void 0);
__decorate([
    Input()
], FullCalendar.prototype, "events", null);
__decorate([
    Input()
], FullCalendar.prototype, "options", null);
export { FullCalendar };
let FullCalendarModule = class FullCalendarModule {
};
FullCalendarModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: FullCalendarModule });
FullCalendarModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function FullCalendarModule_Factory(t) { return new (t || FullCalendarModule)(); }, imports: [[CommonModule]] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FullCalendar, [{
        type: Component,
        args: [{
                selector: 'p-fullCalendar',
                template: '<div [ngStyle]="style" [class]="styleClass"></div>',
                changeDetection: ChangeDetectionStrategy.Default
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { events: [{
            type: Input
        }], options: [{
            type: Input
        }], style: [{
            type: Input
        }], styleClass: [{
            type: Input
        }] }); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(FullCalendarModule, { declarations: function () { return [FullCalendar]; }, imports: function () { return [CommonModule]; }, exports: function () { return [FullCalendar]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FullCalendarModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule],
                exports: [FullCalendar],
                declarations: [FullCalendar]
            }]
    }], null, null); })();
export { FullCalendarModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,