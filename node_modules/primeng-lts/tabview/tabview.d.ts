import { ElementRef, OnDestroy, EventEmitter, AfterContentInit, QueryList, TemplateRef, EmbeddedViewRef, ViewContainerRef, ChangeDetectorRef } from '@angular/core';
import { BlockableUI } from 'primeng-lts/api';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from 'primeng-lts/api';
import * as ɵngcc3 from 'primeng-lts/tooltip';
export declare class TabViewNav {
    tabs: TabPanel[];
    orientation: string;
    onTabClick: EventEmitter<any>;
    onTabCloseClick: EventEmitter<any>;
    getDefaultHeaderClass(tab: TabPanel): string;
    clickTab(event: any, tab: TabPanel): void;
    clickClose(event: any, tab: TabPanel): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TabViewNav, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<TabViewNav, "[p-tabViewNav]", never, { "orientation": "orientation"; "tabs": "tabs"; }, { "onTabClick": "onTabClick"; "onTabCloseClick": "onTabCloseClick"; }, never, never>;
}
export declare class TabPanel implements AfterContentInit, OnDestroy {
    viewContainer: ViewContainerRef;
    private cd;
    header: string;
    disabled: boolean;
    closable: boolean;
    headerStyle: any;
    headerStyleClass: string;
    cache: boolean;
    tooltip: any;
    tooltipPosition: string;
    tooltipPositionStyle: string;
    tooltipStyleClass: string;
    templates: QueryList<any>;
    constructor(viewContainer: ViewContainerRef, cd: ChangeDetectorRef);
    closed: boolean;
    view: EmbeddedViewRef<any>;
    _selected: boolean;
    _leftIcon: string;
    _rightIcon: string;
    loaded: boolean;
    id: string;
    contentTemplate: TemplateRef<any>;
    headerTemplate: TemplateRef<any>;
    ngAfterContentInit(): void;
    selected: boolean;
    leftIcon: string;
    rightIcon: string;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TabPanel, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<TabPanel, "p-tabPanel", never, { "cache": "cache"; "tooltipPosition": "tooltipPosition"; "tooltipPositionStyle": "tooltipPositionStyle"; "selected": "selected"; "leftIcon": "leftIcon"; "rightIcon": "rightIcon"; "header": "header"; "disabled": "disabled"; "closable": "closable"; "headerStyle": "headerStyle"; "headerStyleClass": "headerStyleClass"; "tooltip": "tooltip"; "tooltipStyleClass": "tooltipStyleClass"; }, {}, ["templates"], ["*"]>;
}
export declare class TabView implements AfterContentInit, BlockableUI {
    el: ElementRef;
    orientation: string;
    style: any;
    styleClass: string;
    controlClose: boolean;
    tabPanels: QueryList<TabPanel>;
    onChange: EventEmitter<any>;
    onClose: EventEmitter<any>;
    activeIndexChange: EventEmitter<number>;
    initialized: boolean;
    tabs: TabPanel[];
    _activeIndex: number;
    preventActiveIndexPropagation: boolean;
    constructor(el: ElementRef);
    ngAfterContentInit(): void;
    initTabs(): void;
    open(event: Event, tab: TabPanel): void;
    close(event: Event, tab: TabPanel): void;
    closeTab(tab: TabPanel): void;
    findSelectedTab(): TabPanel;
    findTabIndex(tab: TabPanel): number;
    getBlockableElement(): HTMLElement;
    activeIndex: number;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TabView, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<TabView, "p-tabView", never, { "orientation": "orientation"; "activeIndex": "activeIndex"; "style": "style"; "styleClass": "styleClass"; "controlClose": "controlClose"; }, { "onChange": "onChange"; "onClose": "onClose"; "activeIndexChange": "activeIndexChange"; }, ["tabPanels"], ["*"]>;
}
export declare class TabViewModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<TabViewModule, [typeof TabView, typeof TabPanel, typeof TabViewNav], [typeof ɵngcc1.CommonModule, typeof ɵngcc2.SharedModule, typeof ɵngcc3.TooltipModule], [typeof TabView, typeof TabPanel, typeof TabViewNav, typeof ɵngcc2.SharedModule]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<TabViewModule>;
}

//# sourceMappingURL=tabview.d.ts.map