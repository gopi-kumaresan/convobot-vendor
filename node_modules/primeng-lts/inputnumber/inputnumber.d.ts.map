{"version":3,"file":"inputnumber.d.ts","sources":["inputnumber.d.ts"],"names":[],"mappings":"AAAA;AACA;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;;;AACA","sourcesContent":["import { ElementRef, OnInit, EventEmitter, ChangeDetectorRef } from '@angular/core';\r\nimport { ControlValueAccessor } from '@angular/forms';\r\nexport declare const INPUTNUMBER_VALUE_ACCESSOR: any;\r\nexport declare class InputNumber implements OnInit, ControlValueAccessor {\r\n    el: ElementRef;\r\n    private cd;\r\n    showButtons: boolean;\r\n    format: boolean;\r\n    buttonLayout: string;\r\n    inputId: string;\r\n    styleClass: string;\r\n    style: any;\r\n    placeholder: string;\r\n    size: number;\r\n    maxlength: number;\r\n    tabindex: string;\r\n    title: string;\r\n    ariaLabel: string;\r\n    ariaRequired: boolean;\r\n    name: string;\r\n    required: boolean;\r\n    autocomplete: string;\r\n    min: number;\r\n    max: number;\r\n    incrementButtonClass: string;\r\n    decrementButtonClass: string;\r\n    incrementButtonIcon: string;\r\n    decrementButtonIcon: string;\r\n    step: number;\r\n    inputStyle: any;\r\n    inputStyleClass: string;\r\n    input: ElementRef;\r\n    onInput: EventEmitter<any>;\r\n    onFocus: EventEmitter<any>;\r\n    onBlur: EventEmitter<any>;\r\n    value: number;\r\n    onModelChange: Function;\r\n    onModelTouched: Function;\r\n    focused: boolean;\r\n    initialized: boolean;\r\n    groupChar: string;\r\n    prefixChar: string;\r\n    suffixChar: string;\r\n    isSpecialChar: boolean;\r\n    timer: any;\r\n    lastValue: string;\r\n    _numeral: any;\r\n    numberFormat: any;\r\n    _decimal: any;\r\n    _group: any;\r\n    _minusSign: any;\r\n    _currency: any;\r\n    _prefix: any;\r\n    _suffix: any;\r\n    _index: any;\r\n    _localeOption: string;\r\n    _localeMatcherOption: string;\r\n    _modeOption: string;\r\n    _currencyOption: string;\r\n    _currencyDisplayOption: string;\r\n    _useGroupingOption: boolean;\r\n    _minFractionDigitsOption: number;\r\n    _maxFractionDigitsOption: number;\r\n    _prefixOption: string;\r\n    _suffixOption: string;\r\n    _disabled: boolean;\r\n    locale: string;\r\n    disabled: boolean;\r\n    localeMatcher: string;\r\n    mode: string;\r\n    currency: string;\r\n    currencyDisplay: string;\r\n    useGrouping: boolean;\r\n    minFractionDigits: number;\r\n    maxFractionDigits: number;\r\n    prefix: string;\r\n    suffix: string;\r\n    constructor(el: ElementRef, cd: ChangeDetectorRef);\r\n    ngOnInit(): void;\r\n    getOptions(): {\r\n        localeMatcher: string;\r\n        style: string;\r\n        currency: string;\r\n        currencyDisplay: string;\r\n        useGrouping: boolean;\r\n        minimumFractionDigits: number;\r\n        maximumFractionDigits: number;\r\n    };\r\n    constructParser(): void;\r\n    updateConstructParser(): void;\r\n    escapeRegExp(text: any): any;\r\n    getDecimalExpression(): RegExp;\r\n    getGroupingExpression(): RegExp;\r\n    getMinusSignExpression(): RegExp;\r\n    getCurrencyExpression(): RegExp;\r\n    getPrefixExpression(): RegExp;\r\n    getSuffixExpression(): RegExp;\r\n    formatValue(value: any): any;\r\n    parseValue(text: any): any;\r\n    repeat(event: any, interval: any, dir: any): void;\r\n    spin(event: any, dir: any): void;\r\n    onUpButtonMouseDown(event: any): void;\r\n    onUpButtonMouseUp(): void;\r\n    onUpButtonMouseLeave(): void;\r\n    onUpButtonKeyDown(event: any): void;\r\n    onUpButtonKeyUp(): void;\r\n    onDownButtonMouseDown(event: any): void;\r\n    onDownButtonMouseUp(): void;\r\n    onDownButtonMouseLeave(): void;\r\n    onDownButtonKeyUp(): void;\r\n    onDownButtonKeyDown(event: any): void;\r\n    onUserInput(event: any): void;\r\n    onInputKeyDown(event: any): void;\r\n    onInputKeyPress(event: any): void;\r\n    onPaste(event: any): void;\r\n    isMinusSign(char: any): boolean;\r\n    isDecimalSign(char: any): boolean;\r\n    insert(event: any, text: any, sign?: {\r\n        isDecimalSign: boolean;\r\n        isMinusSign: boolean;\r\n    }): void;\r\n    insertText(value: any, text: any, start: any, end: any): any;\r\n    deleteRange(value: any, start: any, end: any): any;\r\n    initCursor(): void;\r\n    onInputClick(): void;\r\n    isNumeralChar(char: any): boolean;\r\n    resetRegex(): void;\r\n    updateValue(event: any, valueStr: any, insertedValueStr: any, operation: any): void;\r\n    handleOnInput(event: any, currentValue: any, newValue: any): void;\r\n    isValueChanged(currentValue: any, newValue: any): boolean;\r\n    validateValue(value: any): any;\r\n    updateInput(value: any, insertedValueStr: any, operation: any): void;\r\n    onInputFocus(event: any): void;\r\n    onInputBlur(event: any): void;\r\n    formattedValue(): any;\r\n    updateModel(event: any, value: any): void;\r\n    writeValue(value: any): void;\r\n    registerOnChange(fn: Function): void;\r\n    registerOnTouched(fn: Function): void;\r\n    setDisabledState(val: boolean): void;\r\n    readonly filled: boolean;\r\n    clearTimer(): void;\r\n}\r\nexport declare class InputNumberModule {\r\n}\r\n"]}