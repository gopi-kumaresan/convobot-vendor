{"version":3,"file":"primeng-lts-inputtextarea.umd.js","sources":["primeng-lts/inputtextarea/inputtextarea.ts"],"names":["EventEmitter","ElementRef","NgModel","Optional","NgControl","ChangeDetectorRef","Input","Output","HostListener","Directive","NgModule","CommonModule"],"mappings":"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","sourcesContent":["import {NgModule,Directive,ElementRef,HostListener,Input,Output,EventEmitter,Optional, OnInit, OnDestroy, AfterViewInit, ChangeDetectorRef} from '@angular/core';\nimport {NgModel, NgControl} from '@angular/forms';\nimport {CommonModule} from '@angular/common';\nimport { Subscription } from 'rxjs';\n\n@Directive({\n    selector: '[pInputTextarea]',\n    host: {\n        '[class.ui-inputtext]': 'true',\n        '[class.ui-corner-all]': 'true',\n        '[class.ui-inputtextarea-resizable]': 'autoResize',\n        '[class.ui-state-default]': 'true',\n        '[class.ui-widget]': 'true',\n        '[class.ui-state-filled]': 'filled'\n    }\n})\nexport class InputTextarea implements OnInit, AfterViewInit, OnDestroy {\n    \n    @Input() autoResize: boolean;\n    \n    @Output() onResize: EventEmitter<any> = new EventEmitter();\n        \n    filled: boolean;\n\n    cachedScrollHeight:number;\n\n    ngModelSubscription: Subscription;\n\n    ngControlSubscription: Subscription;\n\n    constructor(public el: ElementRef, @Optional() public ngModel: NgModel, @Optional() public control : NgControl, private cd: ChangeDetectorRef) {}\n        \n    ngOnInit() {\n        if (this.ngModel) {\n            this.ngModelSubscription = this.ngModel.valueChanges.subscribe(() =>{\n                this.updateState();\n            })\n        }\n\n        if (this.control) {\n            this.ngControlSubscription = this.control.valueChanges.subscribe(() => {\n                this.updateState();\n            });\n        }\n    }\n\n    ngAfterViewInit() {\n        if (this.autoResize)\n            this.resize();\n\n        this.updateFilledState();\n        this.cd.detectChanges();\n    }\n\n    @HostListener('input', ['$event'])\n    onInput(e) {\n        this.updateState();\n    }\n    \n    updateFilledState() {\n        this.filled = this.el.nativeElement.value && this.el.nativeElement.value.length\n    }\n    \n    @HostListener('focus', ['$event'])\n    onFocus(e) {\n        if (this.autoResize) {\n            this.resize(e);\n        }\n    }\n    \n    @HostListener('blur', ['$event'])\n    onBlur(e) {\n        if (this.autoResize) {\n            this.resize(e);\n        }\n    }\n    \n    resize(event?: Event) {\n        this.el.nativeElement.style.height = 'auto';\n        this.el.nativeElement.style.height = this.el.nativeElement.scrollHeight + 'px';\n\n        if (parseFloat(this.el.nativeElement.style.height) >= parseFloat(this.el.nativeElement.style.maxHeight)) {\n            this.el.nativeElement.style.overflowY = \"scroll\";\n            this.el.nativeElement.style.height = this.el.nativeElement.style.maxHeight;\n        }\n        else {\n            this.el.nativeElement.style.overflow = \"hidden\";\n        }\n\n        this.onResize.emit(event||{});\n    }\n\n    updateState() {\n        this.updateFilledState();\n            \n        if (this.autoResize) {\n            this.resize();\n        }\n    }\n\n    ngOnDestroy() {\n        if (this.ngModelSubscription) {\n            this.ngModelSubscription.unsubscribe();\n        }\n\n        if (this.ngControlSubscription) {\n            this.ngControlSubscription.unsubscribe();\n        }\n    }\n}\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [InputTextarea],\n    declarations: [InputTextarea]\n})\nexport class InputTextareaModule { }\n"]}