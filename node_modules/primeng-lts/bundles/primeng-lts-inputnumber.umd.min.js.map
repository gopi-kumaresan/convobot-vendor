{"version":3,"sources":["ng://primeng-lts/inputnumber/inputnumber.ts"],"names":["INPUTNUMBER_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","InputNumber","multi","el","cd","this","showButtons","format","buttonLayout","incrementButtonIcon","decrementButtonIcon","step","onInput","EventEmitter","onFocus","onBlur","onModelChange","onModelTouched","groupChar","prefixChar","suffixChar","_modeOption","_useGroupingOption","Object","defineProperty","prototype","_localeOption","localeOption","updateConstructParser","_disabled","disabled","focused","timer","clearTimer","_localeMatcherOption","localeMatcherOption","modeOption","_currencyOption","currencyOption","_currencyDisplayOption","currencyDisplayOption","useGroupingOption","_minFractionDigitsOption","minFractionDigitsOption","_maxFractionDigitsOption","maxFractionDigitsOption","_prefixOption","prefixOption","_suffixOption","suffixOption","ngOnInit","constructParser","initialized","getOptions","localeMatcher","style","mode","currency","currencyDisplay","useGrouping","minimumFractionDigits","minFractionDigits","maximumFractionDigits","maxFractionDigits","numberFormat","Intl","NumberFormat","locale","numerals","__spread","reverse","index","Map","map","d","i","_numeral","RegExp","join","_decimal","getDecimalExpression","_group","getGroupingExpression","_minusSign","getMinusSignExpression","_currency","getCurrencyExpression","_suffix","getSuffixExpression","_prefix","getPrefixExpression","_index","get","escapeRegExp","text","replace","formatter","trim","charAt","prefix","split","suffix","formatValue","value","formattedValue","toString","parseValue","filteredText","parsedValue","isNaN","repeat","event","interval","dir","_this","setTimeout","spin","currentValue","input","nativeElement","newValue","validateValue","maxlength","length","updateInput","updateModel","handleOnInput","onUpButtonMouseDown","focus","preventDefault","onUpButtonMouseUp","onUpButtonMouseLeave","onUpButtonKeyDown","keyCode","onUpButtonKeyUp","onDownButtonMouseDown","onDownButtonMouseUp","onDownButtonMouseLeave","onDownButtonKeyUp","onDownButtonKeyDown","onUserInput","isSpecialChar","target","lastValue","onInputKeyDown","shiftKey","altKey","selectionStart","selectionEnd","inputValue","newValueStr","which","isNumeralChar","deleteChar","decimalCharIndex","search","lastIndex","test","slice","setSelectionRange","updateValue","deleteRange","onInputKeyPress","code","char","String","fromCharCode","isDecimalSign","isMinusSign","insert","onPaste","data","clipboardData","window","getData","filteredData","sign","minusCharIndex","insertText","resolvedOptions","operation","start","end","initCursor","valueLength","onInputClick","resetRegex","valueStr","insertedValueStr","isValueChanged","emit","originalEvent","min","max","currentLength","newLength","startValue","startExpr","sRegex","tExpr","tRegex","prevChar","nextChar","diff","isGroupChar","setAttribute","onInputFocus","onInputBlur","writeValue","markForCheck","registerOnChange","fn","registerOnTouched","setDisabledState","val","clearInterval","ElementRef","ChangeDetectorRef","__decorate","Input","ViewChild","Output","Component","selector","template","changeDetection","ChangeDetectionStrategy","Default","providers","host","[class.ui-inputwrapper-filled]","[class.ui-inputwrapper-focus]","InputNumberModule","NgModule","imports","CommonModule","InputTextModule","ButtonModule","exports","declarations"],"mappings":"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","sourcesContent":["\nimport {NgModule,Component,ChangeDetectionStrategy, Input, ElementRef, ViewChild, OnInit, EventEmitter, Output, forwardRef, ChangeDetectorRef} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {InputTextModule} from 'primeng-lts/inputtext';\nimport { ButtonModule } from 'primeng-lts/button';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\n\nexport const INPUTNUMBER_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => InputNumber),\n    multi: true\n};\n@Component({\n    selector: 'p-inputNumber',\n    template: `\n        <span [ngClass]=\"{'ui-inputnumber ui-widget': true,'ui-inputnumber-buttons-stacked': this.showButtons && this.buttonLayout === 'stacked', \n                'ui-inputnumber-buttons-horizontal': this.showButtons && this.buttonLayout === 'horizontal',\n                'ui-inputnumber-buttons-vertical': this.showButtons && this.buttonLayout === 'vertical'}\" [ngStyle]=\"style\" [class]=\"styleClass\">\n            <input #input [ngClass]=\"'ui-inputnumber-input'\" [ngStyle]=\"inputStyle\" [class]=\"inputStyleClass\" pInputText [value]=\"formattedValue()\" [attr.placeholder]=\"placeholder\" [attr.title]=\"title\" [attr.id]=\"inputId\"\n                [attr.size]=\"size\" [attr.name]=\"name\" [attr.autocomplete]=\"autocomplete\" [attr.maxlength]=\"maxlength\" [attr.tabindex]=\"tabindex\" [attr.aria-label]=\"ariaLabel\"\n                [attr.aria-required]=\"ariaRequired\" [disabled]=\"disabled\" [attr.required]=\"required\" [attr.aria-valuemin]=\"min\" [attr.aria-valuemax]=\"max\"\n                (input)=\"onUserInput($event)\" (keydown)=\"onInputKeyDown($event)\" (keypress)=\"onInputKeyPress($event)\" (paste)=\"onPaste($event)\" (click)=\"onInputClick()\"\n                (focus)=\"onInputFocus($event)\" (blur)=\"onInputBlur($event)\">\n            <span class=\"ui-inputnumber-button-group\" *ngIf=\"showButtons && buttonLayout === 'stacked'\">\n                <button type=\"button\" pButton [ngClass]=\"{'ui-inputnumber-button ui-inputnumber-button-up': true}\" [class]=\"incrementButtonClass\" [icon]=\"incrementButtonIcon\" [disabled]=\"disabled\"\n                    (mousedown)=\"this.onUpButtonMouseDown($event)\" (mouseup)=\"onUpButtonMouseUp()\" (mouseleave)=\"onUpButtonMouseLeave()\" (keydown)=\"onUpButtonKeyDown($event)\" (keyup)=\"onUpButtonKeyUp()\"></button>\n                <button type=\"button\" pButton [ngClass]=\"{'ui-inputnumber-button ui-inputnumber-button-down': true}\" [class]=\"decrementButtonClass\" [icon]=\"decrementButtonIcon\" [disabled]=\"disabled\"\n                    (mousedown)=\"this.onDownButtonMouseDown($event)\" (mouseup)=\"onDownButtonMouseUp()\" (mouseleave)=\"onDownButtonMouseLeave()\" (keydown)=\"onDownButtonKeyDown($event)\" (keyup)=\"onDownButtonKeyUp()\"></button>\n            </span>\n            <button type=\"button\" pButton [ngClass]=\"{'ui-inputnumber-button ui-inputnumber-button-up': true}\" [class]=\"incrementButtonClass\" [icon]=\"incrementButtonIcon\" *ngIf=\"showButtons && buttonLayout !== 'stacked'\" [disabled]=\"disabled\"\n                (mousedown)=\"this.onUpButtonMouseDown($event)\" (mouseup)=\"onUpButtonMouseUp()\" (mouseleave)=\"onUpButtonMouseLeave()\" (keydown)=\"onUpButtonKeyDown($event)\" (keyup)=\"onUpButtonKeyUp()\"></button>\n            <button type=\"button\" pButton [ngClass]=\"{'ui-inputnumber-button ui-inputnumber-button-down': true}\" [class]=\"decrementButtonClass\" [icon]=\"decrementButtonIcon\" *ngIf=\"showButtons && buttonLayout !== 'stacked'\" [disabled]=\"disabled\"\n                (mousedown)=\"this.onDownButtonMouseDown($event)\" (mouseup)=\"onDownButtonMouseUp()\" (mouseleave)=\"onDownButtonMouseLeave()\" (keydown)=\"onDownButtonKeyDown($event)\" (keyup)=\"onDownButtonKeyUp()\"></button>\n        </span>\n    `,\n    changeDetection: ChangeDetectionStrategy.Default,\n    providers: [INPUTNUMBER_VALUE_ACCESSOR],\n    host: {\n        '[class.ui-inputwrapper-filled]': 'filled',\n        '[class.ui-inputwrapper-focus]': 'focused'\n    }\n})\nexport class InputNumber implements OnInit,ControlValueAccessor {\n    @Input() showButtons: boolean = false;\n\n    @Input() format: boolean = true;\n\n    @Input() buttonLayout: string = \"stacked\";\n\n    @Input() inputId: string;\n\n    @Input() styleClass: string;\n\n    @Input() style: any;\n\n    @Input() placeholder: string;\n\n    @Input() size: number;\n\n    @Input() maxlength: number;\n\n    @Input() tabindex: string;\n\n    @Input() title: string;\n\n    @Input() ariaLabel: string;\n\n    @Input() ariaRequired: boolean;\n\n    @Input() name: string;\n\n    @Input() required: boolean;\n\n    @Input() autocomplete: string;\n\n    @Input() min: number;\n\n    @Input() max: number;\n\n    @Input() incrementButtonClass: string;\n\n    @Input() decrementButtonClass: string;\n\n    @Input() incrementButtonIcon: string = 'pi pi-angle-up';\n\n    @Input() decrementButtonIcon: string = 'pi pi-angle-down';\n\n    @Input() step: number = 1;\n\n    @Input() inputStyle: any;\n\n    @Input() inputStyleClass: string;\n\n    @ViewChild('input') input: ElementRef;\n\n    @Output() onInput: EventEmitter<any> = new EventEmitter();\n\n    @Output() onFocus: EventEmitter<any> = new EventEmitter();\n\n    @Output() onBlur: EventEmitter<any> = new EventEmitter();\n\n    value: number;\n\n    onModelChange: Function = () => {};\n\n    onModelTouched: Function = () => {};\n\n    focused: boolean;\n\n    initialized: boolean;\n\n    groupChar: string = '';\n\n    prefixChar: string = '';\n\n    suffixChar: string = '';\n\n    isSpecialChar: boolean;\n\n    timer: any;\n\n    lastValue: string;\n\n    _numeral: any;\n\n    numberFormat: any;\n\n    _decimal: any;\n\n    _group: any;\n\n    _minusSign: any;\n\n    _currency: any;\n\n    _prefix: any;\n\n    _suffix: any;\n\n    _index: any;\n\n    _localeOption: string;\n\n    _localeMatcherOption: string;\n\n    _modeOption: string = \"decimal\";\n\n    _currencyOption: string;\n\n    _currencyDisplayOption: string;\n\n    _useGroupingOption: boolean = true;\n\n    _minFractionDigitsOption: number;\n\n    _maxFractionDigitsOption: number;\n\n    _prefixOption: string;\n\n    _suffixOption: string;\n\n    _disabled: boolean;\n\n    @Input() get locale(): string {\n        return this._localeOption;\n    }\n\n    set locale(localeOption: string) {\n        this._localeOption = localeOption;\n        this.updateConstructParser();\n    }\n\n    @Input() get disabled(): boolean {\n        return this._disabled;\n    }\n\n    set disabled(disabled: boolean) {\n        if (disabled)\n            this.focused = false;\n\n        this._disabled = disabled;\n\n        if (this.timer)\n            this.clearTimer();\n    }\n\n    @Input() get localeMatcher(): string {\n        return this._localeMatcherOption;\n    }\n\n    set localeMatcher(localeMatcherOption: string) {\n        this._localeMatcherOption = localeMatcherOption;\n        this.updateConstructParser();\n    }\n\n    @Input() get mode(): string {\n        return this._modeOption;\n    }\n\n    set mode(modeOption: string) {\n        this._modeOption = modeOption;\n        this.updateConstructParser();\n    }\n\n    @Input() get currency(): string {\n        return this._currencyOption;\n    }\n\n    set currency(currencyOption: string) {\n        this._currencyOption = currencyOption;\n        this.updateConstructParser();\n    }\n\n    @Input() get currencyDisplay(): string {\n        return this._currencyDisplayOption;\n    }\n\n    set currencyDisplay(currencyDisplayOption: string) {\n        this._currencyDisplayOption = currencyDisplayOption;\n        this.updateConstructParser();\n    }\n\n    @Input() get useGrouping(): boolean {\n        return this._useGroupingOption;\n    }\n\n    set useGrouping(useGroupingOption: boolean) {\n        this._useGroupingOption = useGroupingOption;\n        this.updateConstructParser();\n    }\n\n    @Input() get minFractionDigits(): number {\n        return this._minFractionDigitsOption;\n    }\n\n    set minFractionDigits(minFractionDigitsOption: number) {\n        this._minFractionDigitsOption = minFractionDigitsOption;\n        this.updateConstructParser();\n    }\n\n    @Input() get maxFractionDigits(): number {\n        return this._maxFractionDigitsOption;\n    }\n\n    set maxFractionDigits(maxFractionDigitsOption: number) {\n        this._maxFractionDigitsOption = maxFractionDigitsOption;\n        this.updateConstructParser();\n    }\n\n    @Input() get prefix(): string {\n        return this._prefixOption;\n    }\n\n    set prefix(prefixOption: string) {\n        this._prefixOption = prefixOption;\n        this.updateConstructParser();\n    }\n\n    @Input() get suffix(): string {\n        return this._suffixOption;\n    }\n\n    set suffix(suffixOption: string) {\n        this._suffixOption = suffixOption;\n        this.updateConstructParser();\n    }\n\n    constructor(public el: ElementRef, private cd: ChangeDetectorRef) { }\n\n    ngOnInit() {\n        this.constructParser();\n\n        this.initialized = true;\n    }\n\n    getOptions() {\n        return {\n            localeMatcher: this.localeMatcher,\n            style: this.mode,\n            currency: this.currency,\n            currencyDisplay: this.currencyDisplay,\n            useGrouping: this.useGrouping,\n            minimumFractionDigits: this.minFractionDigits,\n            maximumFractionDigits: this.maxFractionDigits\n        };\n    }\n\n    constructParser() {\n        this.numberFormat = new Intl.NumberFormat(this.locale, this.getOptions());\n        const numerals = [...new Intl.NumberFormat(this.locale, {useGrouping: false}).format(9876543210)].reverse();\n        const index = new Map(numerals.map((d, i) => [d, i]));\n        this._numeral = new RegExp(`[${numerals.join('')}]`, 'g');\n        this._decimal = this.getDecimalExpression();\n        this._group = this.getGroupingExpression();\n        this._minusSign = this.getMinusSignExpression();\n        this._currency = this.getCurrencyExpression();\n        this._suffix = this.getSuffixExpression();\n        this._prefix = this.getPrefixExpression();\n        this._index = d => index.get(d);\n    }\n\n    updateConstructParser() {\n        if (this.initialized) {\n            this.constructParser();\n        }\n    }\n\n    escapeRegExp(text) {\n        return text.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n    }\n\n    getDecimalExpression() {\n        const formatter = new Intl.NumberFormat(this.locale, {useGrouping: false});\n        return new RegExp(`[${formatter.format(1.1).trim().replace(this._numeral, '')}]`, 'g');\n    }\n\n    getGroupingExpression() {\n        const formatter = new Intl.NumberFormat(this.locale, {useGrouping: true});\n        this.groupChar = formatter.format(1000000).trim().replace(this._numeral, '').charAt(0);\n        return new RegExp(`[${this.groupChar}]`, 'g');\n    }\n\n    getMinusSignExpression() {\n        const formatter = new Intl.NumberFormat(this.locale, {useGrouping: false});\n        return new RegExp(`[${formatter.format(-1).trim().replace(this._numeral, '')}]`, 'g');\n    }\n\n    getCurrencyExpression() {\n        if (this.currency) {\n            const formatter = new Intl.NumberFormat(this.locale, {style: 'currency', currency: this.currency, currencyDisplay: this.currencyDisplay});\n            return new RegExp(`[${formatter.format(1).replace(/\\s/g, '').replace(this._numeral, '').replace(this._decimal, '').replace(this._group, '')}]`, 'g');\n        }\n\n        return new RegExp(`[]`,'g');\n    }\n\n    getPrefixExpression() {\n        if (this.prefix) {\n            this.prefixChar = this.prefix;\n        }\n        else {\n            const formatter = new Intl.NumberFormat(this.locale, {style: this.mode, currency: this.currency, currencyDisplay: this.currencyDisplay});\n            this.prefixChar = formatter.format(1).split('1')[0];\n        }\n\n        return new RegExp(`${this.escapeRegExp(this.prefixChar||'')}`, 'g');\n    }\n\n    getSuffixExpression() {\n        if (this.suffix) {\n            this.suffixChar = this.suffix;\n        }\n        else {\n            const formatter = new Intl.NumberFormat(this.locale, {style: this.mode, currency: this.currency, currencyDisplay: this.currencyDisplay,\n                minimumFractionDigits: 0, maximumFractionDigits: 0});\n            this.suffixChar = formatter.format(1).split('1')[1];\n        }\n\n        return new RegExp(`${this.escapeRegExp(this.suffixChar||'')}`, 'g');\n    }\n\n    formatValue(value) {\n        if (value != null) {\n            if (value === '-') { // Minus sign\n                return value;\n            }\n\n            if (this.format) {\n                let formatter = new Intl.NumberFormat(this.locale, this.getOptions());\n                let formattedValue = formatter.format(value);\n                if (this.prefix) {\n                    formattedValue = this.prefix + formattedValue;\n                }\n\n                if (this.suffix) {\n                    formattedValue = formattedValue + this.suffix;\n                }\n\n                return formattedValue;\n            }\n\n            return value.toString();\n        }\n\n        return '';\n    }\n\n    parseValue(text) {\n        let filteredText = text\n                            .replace(this._suffix, '')\n                            .replace(this._prefix, '')\n                            .trim()\n                            .replace(/\\s/g, '')\n                            .replace(this._currency, '')\n                            .replace(this._group, '')\n                            .replace(this._minusSign, '-')\n                            .replace(this._decimal, '.')\n                            .replace(this._numeral, this._index);\n\n        if (filteredText) {\n            if (filteredText === '-') // Minus sign\n                return filteredText;\n\n            let parsedValue = +filteredText;\n            return isNaN(parsedValue) ? null : parsedValue;\n        }\n\n        return null;\n    }\n\n    repeat(event, interval, dir) {\n        let i = interval || 500;\n\n        this.clearTimer();\n        this.timer = setTimeout(() => {\n            this.repeat(event, 40, dir);\n        }, i);\n\n        this.spin(event, dir);\n    }\n\n    spin(event, dir) {\n        let step = this.step * dir;\n        let currentValue = this.parseValue(this.input.nativeElement.value) || 0;\n        let newValue = this.validateValue(currentValue + step);\n        if (this.maxlength && this.maxlength < this.formatValue(newValue).length) {\n            return;\n        }\n\n        this.updateInput(newValue, null, 'spin');\n        this.updateModel(event, newValue);\n\n        this.handleOnInput(event, currentValue, newValue);\n    }\n\n    onUpButtonMouseDown(event) {\n        this.input.nativeElement.focus();\n        this.repeat(event, null, 1);\n        event.preventDefault();\n    }\n\n    onUpButtonMouseUp() {\n        this.clearTimer();\n    }\n\n    onUpButtonMouseLeave() {\n        this.clearTimer();\n    }\n\n    onUpButtonKeyDown(event) {\n        if (event.keyCode === 32 || event.keyCode === 13) {\n            this.repeat(event, null, 1);\n        }\n    }\n\n    onUpButtonKeyUp() {\n        this.clearTimer();\n    }\n\n    onDownButtonMouseDown(event) {\n        this.input.nativeElement.focus();\n        this.repeat(event, null, -1);\n        event.preventDefault();\n    }\n\n    onDownButtonMouseUp() {\n        this.clearTimer();\n    }\n\n    onDownButtonMouseLeave() {\n        this.clearTimer();\n    }\n\n    onDownButtonKeyUp() {\n        this.clearTimer();\n    }\n\n    onDownButtonKeyDown(event) {\n        if (event.keyCode === 32 || event.keyCode === 13) {\n            this.repeat(event, null, -1);\n        }\n    }\n\n    onUserInput(event) {\n        if (this.isSpecialChar) {\n            event.target.value = this.lastValue;\n        }\n        this.isSpecialChar = false;\n    }\n\n    onInputKeyDown(event) {\n        this.lastValue = event.target.value;\n        if (event.shiftKey || event.altKey) {\n            this.isSpecialChar = true;\n            return;\n        }\n\n        let selectionStart = event.target.selectionStart;\n        let selectionEnd = event.target.selectionEnd;\n        let inputValue = event.target.value;\n        let newValueStr = null;\n\n        if (event.altKey) {\n            event.preventDefault();\n        }\n\n        switch (event.which) {\n            //up\n            case 38:\n                this.spin(event, 1);\n                event.preventDefault();\n            break;\n\n            //down\n            case 40:\n                this.spin(event, -1);\n                event.preventDefault();\n            break;\n\n            //left\n            case 37:\n                if (!this.isNumeralChar(inputValue.charAt(selectionStart - 1))) {\n                    event.preventDefault();\n                }\n            break;\n\n            //right\n            case 39:\n                if (!this.isNumeralChar(inputValue.charAt(selectionStart))) {\n                    event.preventDefault();\n                }\n            break;\n\n            //backspace\n            case 8: {\n                event.preventDefault();\n\n                if (selectionStart === selectionEnd) {\n                    let deleteChar = inputValue.charAt(selectionStart - 1);\n                    let decimalCharIndex = inputValue.search(this._decimal);\n                    this._decimal.lastIndex = 0;\n\n                    if (this.isNumeralChar(deleteChar)) {\n                        if (this._group.test(deleteChar)) {\n                            this._group.lastIndex = 0;\n                            newValueStr = inputValue.slice(0, selectionStart - 2) + inputValue.slice(selectionStart - 1);\n                        }\n                        else if (this._decimal.test(deleteChar)) {\n                            this._decimal.lastIndex = 0;\n                            this.input.nativeElement.setSelectionRange(selectionStart - 1, selectionStart - 1);\n                        }\n                        else if (decimalCharIndex > 0 && selectionStart > decimalCharIndex) {\n                            newValueStr = inputValue.slice(0, selectionStart - 1) + '0' + inputValue.slice(selectionStart);\n                        }\n                        else if (decimalCharIndex > 0 && decimalCharIndex === 1) {\n                            newValueStr = inputValue.slice(0, selectionStart - 1) + '0' + inputValue.slice(selectionStart);\n                            newValueStr = this.parseValue(newValueStr) > 0 ? newValueStr : '';\n                        }\n                        else {\n                            newValueStr = inputValue.slice(0, selectionStart - 1) + inputValue.slice(selectionStart);\n                        }\n                    }\n\n                    this.updateValue(event, newValueStr, null, 'delete-single');\n                }\n                else {\n                    newValueStr = this.deleteRange(inputValue, selectionStart, selectionEnd);\n                    this.updateValue(event, newValueStr, null, 'delete-range');\n                }\n\n                break;\n            }\n\n            // del\n            case 46:\n                event.preventDefault();\n\n                if (selectionStart === selectionEnd) {\n                    let deleteChar = inputValue.charAt(selectionStart);\n                    let decimalCharIndex = inputValue.search(this._decimal);\n                    this._decimal.lastIndex = 0;\n\n                    if (this.isNumeralChar(deleteChar)) {\n                        if (this._group.test(deleteChar)) {\n                            this._group.lastIndex = 0;\n                            newValueStr = inputValue.slice(0, selectionStart) + inputValue.slice(selectionStart + 2);\n                        }\n                        else if (this._decimal.test(deleteChar)) {\n                            this._decimal.lastIndex = 0;\n                            this.input.nativeElement.setSelectionRange(selectionStart + 1, selectionStart + 1);\n                        }\n                        else if (decimalCharIndex > 0 && selectionStart > decimalCharIndex) {\n                            newValueStr = inputValue.slice(0, selectionStart) + '0' + inputValue.slice(selectionStart + 1);\n                        }\n                        else if (decimalCharIndex > 0 && decimalCharIndex === 1) {\n                            newValueStr = inputValue.slice(0, selectionStart) + '0' + inputValue.slice(selectionStart + 1);\n                            newValueStr = this.parseValue(newValueStr) > 0 ? newValueStr : '';\n                        }\n                        else {\n                            newValueStr = inputValue.slice(0, selectionStart) + inputValue.slice(selectionStart + 1);\n                        }\n                    }\n\n                    this.updateValue(event, newValueStr, null, 'delete-back-single');\n                }\n                else {\n                    newValueStr = this.deleteRange(inputValue, selectionStart, selectionEnd);\n                    this.updateValue(event, newValueStr, null, 'delete-range');\n                }\n            break;\n\n            default:\n            break;\n        }\n    }\n\n    onInputKeyPress(event) {\n        event.preventDefault();\n        let code = event.which || event.keyCode;\n        let char = String.fromCharCode(code);\n        const isDecimalSign = this.isDecimalSign(char);\n        const isMinusSign = this.isMinusSign(char);\n\n        if ((48 <= code && code <= 57) || isMinusSign || isDecimalSign) {\n            this.insert(event, char, { isDecimalSign, isMinusSign });\n        }\n    }\n\n    onPaste(event) {\n        event.preventDefault();\n        \n        if (!this.disabled) {\n            let data = (event.clipboardData || window['clipboardData']).getData('Text');\n            if (data) {\n                let filteredData = this.parseValue(data);\n                if (filteredData != null) {\n                    this.insert(event, filteredData.toString());\n                }\n            }\n        }\n    }\n\n    isMinusSign(char) {\n        if (this._minusSign.test(char)) {\n            this._minusSign.lastIndex = 0;\n            return true;\n        }\n\n        return false;\n    }\n\n    isDecimalSign(char) {\n        if (this._decimal.test(char)) {\n            this._decimal.lastIndex = 0;\n            return true;\n        }\n\n        return false;\n    }\n\n    insert(event, text, sign = { isDecimalSign: false, isMinusSign: false }) {\n        let selectionStart = this.input.nativeElement.selectionStart;\n        let selectionEnd = this.input.nativeElement.selectionEnd;\n        let inputValue = this.input.nativeElement.value.trim();\n        const decimalCharIndex = inputValue.search(this._decimal);\n        this._decimal.lastIndex = 0;\n        const minusCharIndex = inputValue.search(this._minusSign);\n        this._minusSign.lastIndex = 0;\n        let newValueStr;\n\n        if (sign.isMinusSign) {\n            if (selectionStart === 0) {\n                newValueStr = inputValue;\n                if (minusCharIndex === -1 || selectionEnd !== 0) {\n                    newValueStr = this.insertText(inputValue, text, 0, selectionEnd);\n                }\n\n                this.updateValue(event, newValueStr, text, 'insert');\n            }\n        }\n        else if (sign.isDecimalSign) {\n            if (decimalCharIndex > 0 && selectionStart === decimalCharIndex) {\n                this.updateValue(event, inputValue, text, 'insert');\n            }\n            else if (decimalCharIndex > selectionStart && decimalCharIndex < selectionEnd) {\n                newValueStr = this.insertText(inputValue, text, selectionStart, selectionEnd);\n                this.updateValue(event, newValueStr, text, 'insert');\n            }\n        }\n        else {\n            const maxFractionDigits = this.numberFormat.resolvedOptions().maximumFractionDigits;\n            const operation = selectionStart !== selectionEnd ? 'range-insert' : 'insert';\n\n            if (decimalCharIndex > 0 && selectionStart > decimalCharIndex) {\n                if ((selectionStart + text.length - (decimalCharIndex + 1)) <= maxFractionDigits) {\n                    newValueStr = inputValue.slice(0, selectionStart) + text + inputValue.slice(selectionStart + text.length);\n                    this.updateValue(event, newValueStr, text, operation);\n                }\n            }\n            else {\n                newValueStr = this.insertText(inputValue, text, selectionStart, selectionEnd);\n                this.updateValue(event, newValueStr, text, operation);\n            }\n        }\n    }\n\n    insertText(value, text, start, end) {\n        let textSplit = text.split('.');\n\n        if (textSplit.length == 2) {\n            const decimalCharIndex = value.slice(start, end).search(this._decimal);\n            this._decimal.lastIndex = 0;\n            return (decimalCharIndex > 0) ? value.slice(0, start) + this.formatValue(text) + value.slice(end) : value;\n        }\n        else if ((end - start) === value.length) {\n            return this.formatValue(text);\n        }\n        else if (start === 0) {\n            return text + value.slice(end);\n        }\n        else if (end === value.length) {\n            return value.slice(0, start) + text;\n        }\n        else {\n            return value.slice(0, start) + text + value.slice(end);\n        }\n    }\n\n    deleteRange(value, start, end) {\n        let newValueStr;\n\n        if ((end - start) === value.length)\n            newValueStr = '';\n        else if (start === 0)\n            newValueStr = value.slice(end);\n        else if (end === value.length)\n            newValueStr = value.slice(0, start);\n        else\n            newValueStr = value.slice(0, start) + value.slice(end);\n\n        return newValueStr;\n    }\n\n    initCursor() {\n        let selectionStart = this.input.nativeElement.selectionStart;\n        let inputValue = this.input.nativeElement.value;\n        let valueLength = inputValue.length;\n        let index = null;\n\n        let char = inputValue.charAt(selectionStart);\n        if (this.isNumeralChar(char)) {\n            return;\n        }\n\n        //left\n        let i = selectionStart - 1;\n        while (i >= 0) {\n            char = inputValue.charAt(i);\n            if (this.isNumeralChar(char)) {\n                index = i;\n                break;\n            }\n            else {\n                i--;\n            }\n        }\n\n        if (index !== null) {\n            this.input.nativeElement.setSelectionRange(index + 1, index + 1);\n        }\n        else {\n            i = selectionStart + 1;\n            while (i < valueLength) {\n                char = inputValue.charAt(i);\n                if (this.isNumeralChar(char)) {\n                    index = i;\n                    break;\n                }\n                else {\n                    i++;\n                }\n            }\n\n            if (index !== null) {\n                this.input.nativeElement.setSelectionRange(index, index);\n            }\n        }\n    }\n\n    onInputClick() {\n        this.initCursor();\n    }\n\n    isNumeralChar(char) {\n        if (char.length === 1 && (this._numeral.test(char) || this._decimal.test(char) || this._group.test(char) || this._minusSign.test(char))) {\n            this.resetRegex();\n            return true;\n        }\n\n        return false;\n    }\n\n    resetRegex() {\n        this._numeral.lastIndex =  0;\n        this._decimal.lastIndex =  0;\n        this._group.lastIndex =  0;\n        this._minusSign.lastIndex =  0;\n    }\n\n    updateValue(event, valueStr, insertedValueStr, operation) {\n        let currentValue = this.input.nativeElement.value;\n        let newValue = null;\n\n        if (valueStr != null) {\n            newValue = this.parseValue(valueStr);\n            this.updateInput(newValue, insertedValueStr, operation);\n        }\n\n        this.handleOnInput(event, currentValue, newValue);\n    }\n\n    handleOnInput(event, currentValue, newValue) {\n        if (this.isValueChanged(currentValue, newValue)) {\n            this.onInput.emit({ originalEvent: event, value: newValue });\n        }\n    }\n\n    isValueChanged(currentValue, newValue) {\n        if (newValue === null && currentValue !== null) {\n            return true;\n        }\n\n        if (newValue != null) {\n            let parsedCurrentValue = (typeof currentValue === 'string') ? this.parseValue(currentValue) : currentValue;\n            return newValue !== parsedCurrentValue;\n        }\n\n        return false;\n    }\n\n    validateValue(value) {\n        if (this.min !== null && value < this.min) {\n            return this.min;\n        }\n\n        if (this.max !== null && value > this.max) {\n            return this.max;\n        }\n\n        if (value === '-') { // Minus sign\n            return null;\n        }\n\n        return value;\n    }\n\n    updateInput(value, insertedValueStr, operation) {\n        insertedValueStr = insertedValueStr || '';\n\n        let inputValue = this.input.nativeElement.value;\n        let newValue = this.formatValue(value);\n        let currentLength = inputValue.length;\n\n        if (currentLength === 0) {\n            this.input.nativeElement.value = newValue;\n            this.input.nativeElement.setSelectionRange(0, 0);\n            this.initCursor();\n            const prefixLength = (this.prefixChar || '').length;\n            const selectionEnd = prefixLength + insertedValueStr.length;\n            this.input.nativeElement.setSelectionRange(selectionEnd, selectionEnd);\n        }\n        else {\n            let selectionStart = this.input.nativeElement.selectionStart;\n            let selectionEnd = this.input.nativeElement.selectionEnd;\n            if (this.maxlength && this.maxlength < newValue.length) {\n                return;\n            }\n\n            this.input.nativeElement.value = newValue;\n            let newLength = newValue.length;\n\n            if (operation === 'range-insert') {\n                const startValue = this.parseValue((inputValue || '').slice(0, selectionStart));\n                const startValueStr = startValue !== null ? startValue.toString() : '';\n                const startExpr = startValueStr.split('').join(`(${this.groupChar})?`);\n                const sRegex = new RegExp(startExpr, 'g');\n                sRegex.test(newValue);\n\n                const tExpr = insertedValueStr.split('').join(`(${this.groupChar})?`);\n                const tRegex = new RegExp(tExpr, 'g');\n                tRegex.test(newValue.slice(sRegex.lastIndex));\n\n                selectionEnd = sRegex.lastIndex + tRegex.lastIndex;\n                this.input.nativeElement.setSelectionRange(selectionEnd, selectionEnd);\n            }\n            else if (newLength === currentLength) {\n                if (operation === 'insert' || operation === 'delete-back-single')\n                    this.input.nativeElement.setSelectionRange(selectionEnd + 1, selectionEnd + 1);\n                else if (operation === 'delete-single')\n                    this.input.nativeElement.setSelectionRange(selectionEnd - 1, selectionEnd - 1);\n                else if (operation === 'delete-range' || operation === 'spin')\n                    this.input.nativeElement.setSelectionRange(selectionEnd, selectionEnd);\n            }\n            else if (operation === 'delete-back-single') {\n                let prevChar = inputValue.charAt(selectionEnd - 1);\n                let nextChar = inputValue.charAt(selectionEnd);\n                let diff = currentLength - newLength;\n                let isGroupChar = this._group.test(nextChar);\n\n                if (isGroupChar && diff === 1) {\n                    selectionEnd += 1;\n                }\n                else if (!isGroupChar && this.isNumeralChar(prevChar)) {\n                    selectionEnd += (-1 * diff) + 1;\n                }\n\n                this._group.lastIndex = 0;\n                this.input.nativeElement.setSelectionRange(selectionEnd, selectionEnd);\n            }\n            else {\n                selectionEnd = selectionEnd + (newLength - currentLength);\n                this.input.nativeElement.setSelectionRange(selectionEnd, selectionEnd);\n            }\n        }\n\n        this.input.nativeElement.setAttribute('aria-valuenow', value);\n    }\n\n    onInputFocus(event) {\n        this.focused = true;\n        this.onFocus.emit(event);\n    }\n\n    onInputBlur(event) {\n        this.focused = false;\n\n        let newValue = this.validateValue(this.parseValue(this.input.nativeElement.value));\n        this.input.nativeElement.value = this.formatValue(newValue);\n        this.input.nativeElement.setAttribute('aria-valuenow', newValue);\n        this.updateModel(event, newValue);\n\n        this.onBlur.emit(event);\n    }\n\n    formattedValue() {\n        return this.formatValue(this.value);\n    }\n\n    updateModel(event, value) {\n        if (this.value !== value) {\n            this.value = value;\n            this.onModelChange(value);\n        }\n\n        this.onModelTouched();\n    }\n\n    writeValue(value: any) : void {\n        this.value = value;\n        this.cd.markForCheck();\n    }\n\n    registerOnChange(fn: Function): void {\n        this.onModelChange = fn;\n    }\n\n    registerOnTouched(fn: Function): void {\n        this.onModelTouched = fn;\n    }\n\n    setDisabledState(val: boolean): void {\n        this.disabled = val;\n        this.cd.markForCheck();\n    }\n\n    get filled() {\n        return (this.value != null && this.value.toString().length > 0)\n    }\n\n    clearTimer() {\n        if (this.timer) {\n            clearInterval(this.timer);\n        }\n    }\n}\n\n@NgModule({\n    imports: [CommonModule,InputTextModule, ButtonModule],\n    exports: [InputNumber],\n    declarations: [InputNumber]\n})\nexport class InputNumberModule { }\n"]}