{"version":3,"file":"primeng-lts-defer.umd.js","sources":["primeng-lts/defer/defer.ts"],"names":["EventEmitter","ElementRef","Renderer2","ViewContainerRef","ChangeDetectorRef","Output","ContentChild","TemplateRef","Directive","NgModule","CommonModule"],"mappings":"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","sourcesContent":["import {NgModule,Directive,ElementRef,AfterViewInit,OnDestroy,TemplateRef,EmbeddedViewRef,\n        ViewContainerRef,Renderer2,EventEmitter,Output,ContentChild, ChangeDetectorRef} from '@angular/core';\nimport {CommonModule} from '@angular/common';\n\n@Directive({\n    selector: '[pDefer]'\n})\nexport class DeferredLoader implements AfterViewInit,OnDestroy {\n        \n    @Output() onLoad: EventEmitter<any> = new EventEmitter();\n    \n    @ContentChild(TemplateRef) template: TemplateRef<any>;\n        \n    documentScrollListener: Function;\n    \n    view: EmbeddedViewRef<any>;\n            \n    constructor(public el: ElementRef, public renderer: Renderer2, public viewContainer: ViewContainerRef, private cd: ChangeDetectorRef) {}\n    \n    ngAfterViewInit() {\n        if (this.shouldLoad()) {\n            this.load();\n        }\n        \n        if (!this.isLoaded()) {\n            this.documentScrollListener = this.renderer.listen('window', 'scroll', () => {\n                if (this.shouldLoad()) {\n                    this.load();\n                    this.documentScrollListener();\n                    this.documentScrollListener = null;\n                }\n            });\n        }\n    }\n    \n    shouldLoad(): boolean {\n        if (this.isLoaded()) {\n            return false;\n        }\n        else {\n            let rect = this.el.nativeElement.getBoundingClientRect();\n            let docElement = document.documentElement;\n            let winHeight = docElement.clientHeight;\n            \n            return (winHeight >= rect.top);\n        }\n    }\n    \n    load(): void { \n        this.view = this.viewContainer.createEmbeddedView(this.template);\n        this.onLoad.emit();\n        this.cd.detectChanges();\n    }\n    \n    isLoaded() {\n        return this.view != null;\n    }\n            \n    ngOnDestroy() {\n        this.view = null;\n        \n        if (this.documentScrollListener) {\n            this.documentScrollListener();\n        }\n    }\n}\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [DeferredLoader],\n    declarations: [DeferredLoader]\n})\nexport class DeferModule { }"]}