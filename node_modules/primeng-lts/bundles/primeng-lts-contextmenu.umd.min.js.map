{"version":3,"sources":["ng://primeng-lts/contextmenu/contextmenu.ts"],"names":["ContextMenuSub","contextMenu","this","leafClick","EventEmitter","prototype","ngOnInit","_this","activeItemKeyChangeSubscription","contextMenuService","activeItemKeyChange$","pipe","takeUntil","ngDestroy$","subscribe","activeItemKey","isActive","parentItemKey","DomHandler","hasClass","sublistViewChild","nativeElement","positionSubmenu","cd","markForCheck","onItemMouseEnter","event","item","key","hideTimeout","clearTimeout","disabled","items","childSublist","findSingle","currentTarget","addClass","changeKey","onItemMouseLeave","el","contains","toElement","removeActiveFromSubLists","root","onItemClick","menuitem","preventDefault","url","routerLink","command","originalEvent","onLeafClick","hide","emit","getKey","index","String","startsWith","Inject","args","forwardRef","ContextMenu","__decorate","Input","Output","ViewChild","Component","selector","template","__param","renderer","zone","autoZIndex","baseZIndex","triggerEvent","onShow","onHide","Subject","ngAfterViewInit","global","documentTarget","ownerDocument","triggerEventListener","listen","show","target","stopPropagation","appendTo","document","body","appendChild","containerViewChild","clearActiveItem","position","moveOnTop","style","display","fadeIn","bindGlobalListeners","unbindGlobalListeners","zIndex","zindex","toggle","offsetParent","left","pageX","top_1","pageY","width","offsetWidth","getHiddenElementOuterWidth","height","offsetHeight","getHiddenElementOuterHeight","viewport","getViewport","scrollLeft","scrollTop","top","sublist","parentMenuItem","parentElement","sublistWidth","sublistHeight","itemOuterWidth","getOuterWidth","children","itemOuterHeight","getOuterHeight","containerOffset","getOffset","parseInt","calculateScrollbarHeight","removeProperty","bottom","calculateScrollbarWidth","isItemMatched","findNextItem","isRepeated","nextMenuitem","nextElementSibling","firstItem","findPrevItem","prevMenuitem","previousElementSibling","lastItem","length","getActiveItem","reset","sublists","find","sublists_1","__values","sublists_1_1","next","done","value","removeClass","removeActiveFromSublist","documentClickListener","isOutsideClicked","ctrlKey","button","runOutsideAngular","windowResizeListener","onWindowResize","bind","window","addEventListener","documentKeydownListener","activeItem","getAttribute","handleItemClick","findModelItemFromKey","model","split","reduce","currentIndex","removeEventListener","isSameNode","ngOnDestroy","complete","ElementRef","Renderer2","ChangeDetectorRef","NgZone","ContextMenuService","changeDetection","ChangeDetectionStrategy","Default","ContextMenuModule","NgModule","imports","CommonModule","RouterModule","exports","declarations","providers"],"mappings":"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","sourcesContent":["import { NgModule,Component,ElementRef,AfterViewInit,OnDestroy,Input,Output,Renderer2,Inject,forwardRef,ViewChild,NgZone,EventEmitter,ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DomHandler } from 'primeng-lts/dom';\nimport { ContextMenuService, MenuItem } from 'primeng-lts/api';\nimport { RouterModule } from '@angular/router';\nimport { Subject, Subscription } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n    selector: 'p-contextMenuSub',\n    template: `\n        <ul #sublist [ngClass]=\"{'ui-widget-content ui-corner-all ui-submenu-list ui-shadow':!root}\" class=\"ui-menu-list\">\n            <ng-template ngFor let-child let-index=\"index\" [ngForOf]=\"(root ? item : item.items)\">\n                <li *ngIf=\"child.separator\" #menuitem class=\"ui-menu-separator ui-widget-content\" [ngClass]=\"{'ui-helper-hidden': child.visible === false}\" role=\"separator\">\n                <li *ngIf=\"!child.separator\" #menuitem [ngClass]=\"{'ui-menuitem ui-corner-all':true,'ui-menuitem-active': isActive(getKey(index)),'ui-helper-hidden': child.visible === false}\" [ngStyle]=\"child.style\" [class]=\"child.styleClass\"\n                    (mouseenter)=\"onItemMouseEnter($event,child,getKey(index))\" (mouseleave)=\"onItemMouseLeave($event,child)\" role=\"none\" [attr.data-ik]=\"getKey(index)\">\n                    <a *ngIf=\"!child.routerLink\" [attr.href]=\"child.url ? child.url : null\" [attr.target]=\"child.target\" [attr.title]=\"child.title\" [attr.id]=\"child.id\" [attr.tabindex]=\"child.disabled ? null : '0'\" (click)=\"onItemClick($event, child, menuitem, getKey(index))\"\n                        [ngClass]=\"{'ui-menuitem-link ui-corner-all':true,'ui-state-disabled':child.disabled}\" [attr.aria-haspopup]=\"item.items != null\" [attr.aria-expanded]=\"item === activeItem\">\n                        <span class=\"ui-submenu-icon pi pi-fw pi-caret-right\" *ngIf=\"child.items\"></span>\n                        <span class=\"ui-menuitem-icon\" *ngIf=\"child.icon\" [ngClass]=\"child.icon\"></span>\n                        <span class=\"ui-menuitem-text\">{{child.label}}</span>\n                    </a>\n                    <a *ngIf=\"child.routerLink\" [routerLink]=\"child.routerLink\" [queryParams]=\"child.queryParams\" [routerLinkActive]=\"'ui-menuitem-link-active'\" role=\"menuitem\"\n                        [routerLinkActiveOptions]=\"child.routerLinkActiveOptions||{exact:false}\" [attr.target]=\"child.target\" [attr.title]=\"child.title\" [attr.id]=\"child.id\" [attr.tabindex]=\"child.disabled ? null : '0'\"\n                        (click)=\"onItemClick($event, child, menuitem, getKey(index))\" [ngClass]=\"{'ui-menuitem-link ui-corner-all':true,'ui-state-disabled':child.disabled}\" [fragment]=\"child.fragment\" [queryParamsHandling]=\"child.queryParamsHandling\" [preserveFragment]=\"child.preserveFragment\" [skipLocationChange]=\"child.skipLocationChange\" [replaceUrl]=\"child.replaceUrl\" [state]=\"child.state\">\n                        <span class=\"ui-submenu-icon pi pi-fw pi-caret-right\" *ngIf=\"child.items\"></span>\n                        <span class=\"ui-menuitem-icon\" *ngIf=\"child.icon\" [ngClass]=\"child.icon\"></span>\n                        <span class=\"ui-menuitem-text\">{{child.label}}</span>\n                    </a>\n                    <p-contextMenuSub class=\"ui-submenu\" [parentItemKey]=\"getKey(index)\" [item]=\"child\" *ngIf=\"child.items\" (leafClick)=\"onLeafClick()\"></p-contextMenuSub>\n                </li>\n            </ng-template>\n        </ul>\n    `\n})\nexport class ContextMenuSub {\n\n    @Input() item: MenuItem;\n\n    @Input() root: boolean;\n\n    @Input() parentItemKey: any;\n\n    @Output() leafClick: EventEmitter<any> = new EventEmitter();\n\n    @ViewChild('sublist') sublistViewChild: ElementRef;\n\n    @ViewChild('menuitem') menuitemViewChild: ElementRef;\n\n    contextMenu: ContextMenu;\n\n    activeItemKey: string;\n\n    hideTimeout: any;\n\n    activeItemKeyChangeSubscription: Subscription;\n\n    constructor(@Inject(forwardRef(() => ContextMenu)) contextMenu) {\n        this.contextMenu = contextMenu as ContextMenu;\n    }\n\n    ngOnInit() {\n        this.activeItemKeyChangeSubscription = this.contextMenu.contextMenuService.activeItemKeyChange$.pipe(takeUntil(this.contextMenu.ngDestroy$)).subscribe((activeItemKey) => {\n            this.activeItemKey = activeItemKey;\n\n            if (this.isActive(this.parentItemKey) && DomHandler.hasClass(this.sublistViewChild.nativeElement, 'ui-submenu-list-active')) {\n                this.contextMenu.positionSubmenu(this.sublistViewChild.nativeElement);\n            }\n\n            this.contextMenu.cd.markForCheck();\n        });\n    }\n\n    onItemMouseEnter(event, item, key) {\n        if (this.hideTimeout) {\n            clearTimeout(this.hideTimeout);\n            this.hideTimeout = null;\n        }\n\n        if (item.disabled) {\n            return;\n        }\n\n        if (item.items) {\n            let childSublist = DomHandler.findSingle(event.currentTarget, '.ui-submenu-list');\n            DomHandler.addClass(childSublist, 'ui-submenu-list-active');\n        }\n\n        this.contextMenu.contextMenuService.changeKey(key);\n    }\n\n    onItemMouseLeave(event, item) {\n        if (item.disabled) {\n            return;\n        }\n\n        if (this.contextMenu.el.nativeElement.contains(<Node> event.toElement)) {\n            if (item.items) {\n                this.contextMenu.removeActiveFromSubLists(event.currentTarget);\n            }\n    \n            if (!this.root) {\n                this.contextMenu.contextMenuService.changeKey(this.parentItemKey);\n            }\n        }\n    }\n\n    onItemClick(event, item, menuitem, key) {\n        if (item.disabled) {\n            event.preventDefault();\n            return;\n        }\n\n        if (!item.url && !item.routerLink) {\n            event.preventDefault();\n        }\n\n        if (item.command) {\n            item.command({\n                originalEvent: event,\n                item: item\n            });\n        }\n\n        if (item.items) {\n            let childSublist = DomHandler.findSingle(menuitem, '.ui-submenu-list');\n\n            if (childSublist) {\n                if (this.isActive(key) && DomHandler.hasClass(childSublist, 'ui-submenu-list-active')) {\n                    this.contextMenu.removeActiveFromSubLists(menuitem);\n                }\n                else {\n                    DomHandler.addClass(childSublist, 'ui-submenu-list-active');\n                }\n\n                this.contextMenu.contextMenuService.changeKey(key);\n            }\n        }\n\n        if (!item.items) {\n            this.onLeafClick();\n        }\n    }\n\n    onLeafClick() {\n        if (this.root) {\n            this.contextMenu.hide();\n        }\n\n        this.leafClick.emit();\n    }\n\n    getKey(index) {\n        return this.root ? String(index) : this.parentItemKey + '_' + index;\n    }\n\n    isActive(key) {\n        return (this.activeItemKey && this.activeItemKey.startsWith(key));\n    }\n\n}\n\n@Component({\n    selector: 'p-contextMenu',\n    template: `\n        <div #container [ngClass]=\"'ui-contextmenu ui-widget ui-widget-content ui-corner-all ui-shadow'\"\n            [class]=\"styleClass\" [ngStyle]=\"style\">\n            <p-contextMenuSub [item]=\"model\" root=\"root\"></p-contextMenuSub>\n        </div>\n    `,\n    changeDetection: ChangeDetectionStrategy.Default\n})\nexport class ContextMenu implements AfterViewInit, OnDestroy {\n\n    @Input() model: MenuItem[];\n\n    @Input() global: boolean;\n\n    @Input() target: any;\n\n    @Input() style: any;\n\n    @Input() styleClass: string;\n\n    @Input() appendTo: any;\n\n    @Input() autoZIndex: boolean = true;\n\n    @Input() baseZIndex: number = 0;\n\n    @Input() triggerEvent: string = 'contextmenu';\n\n    @Output() onShow: EventEmitter<any> = new EventEmitter();\n\n    @Output() onHide: EventEmitter<any> = new EventEmitter();\n\n    @ViewChild('container') containerViewChild: ElementRef;\n\n    documentClickListener: any;\n\n    documentKeydownListener: any;\n\n    windowResizeListener: any;\n\n    triggerEventListener: any;\n\n    ngDestroy$ = new Subject();\n\n    constructor(public el: ElementRef, public renderer: Renderer2, public cd: ChangeDetectorRef, public zone: NgZone, public contextMenuService: ContextMenuService) { }\n\n    ngAfterViewInit() {\n        if (this.global) {\n            const documentTarget: any = this.el ? this.el.nativeElement.ownerDocument : 'document';\n\n            this.triggerEventListener = this.renderer.listen(documentTarget, this.triggerEvent, (event) => {\n                this.show(event);\n                event.preventDefault();\n            });\n        }\n        else if (this.target) {\n            this.triggerEventListener = this.renderer.listen(this.target, this.triggerEvent, (event) => {\n                this.show(event);\n                event.preventDefault();\n                event.stopPropagation();\n            });\n        }\n\n        if (this.appendTo) {\n            if (this.appendTo === 'body')\n                document.body.appendChild(this.containerViewChild.nativeElement);\n            else\n                DomHandler.appendChild(this.containerViewChild.nativeElement, this.appendTo);\n        }\n    }\n\n    show(event?: MouseEvent) {\n        this.clearActiveItem();\n        this.position(event);\n        this.moveOnTop();\n        this.containerViewChild.nativeElement.style.display = 'block';\n        DomHandler.fadeIn(this.containerViewChild.nativeElement, 250);\n        this.bindGlobalListeners();\n\n        if (event) {\n            event.preventDefault();\n        }\n\n        this.onShow.emit();\n    }\n\n    hide() {\n        this.containerViewChild.nativeElement.style.display = 'none';\n        this.unbindGlobalListeners();\n        this.onHide.emit();\n    }\n\n    moveOnTop() {\n        if (this.autoZIndex) {\n            this.containerViewChild.nativeElement.style.zIndex = String(this.baseZIndex + (++DomHandler.zindex));\n        }\n    }\n\n    toggle(event?: MouseEvent) {\n        if (this.containerViewChild.nativeElement.offsetParent)\n            this.hide();\n        else\n            this.show(event);\n    }\n\n    position(event?: MouseEvent) {\n        if (event) {\n            let left = event.pageX + 1;\n            let top = event.pageY + 1;\n            let width = this.containerViewChild.nativeElement.offsetParent ? this.containerViewChild.nativeElement.offsetWidth : DomHandler.getHiddenElementOuterWidth(this.containerViewChild.nativeElement);\n            let height = this.containerViewChild.nativeElement.offsetParent ? this.containerViewChild.nativeElement.offsetHeight : DomHandler.getHiddenElementOuterHeight(this.containerViewChild.nativeElement);\n            let viewport = DomHandler.getViewport();\n\n            //flip\n            if (left + width - document.body.scrollLeft > viewport.width) {\n                left -= width;\n            }\n\n            //flip\n            if (top + height - document.body.scrollTop > viewport.height) {\n                top -= height;\n            }\n\n            //fit\n            if (left < document.body.scrollLeft) {\n                left = document.body.scrollLeft;\n            }\n\n            //fit\n            if (top < document.body.scrollTop) {\n                top = document.body.scrollTop;\n            }\n\n            this.containerViewChild.nativeElement.style.left = left + 'px';\n            this.containerViewChild.nativeElement.style.top = top + 'px';\n        }\n    }\n\n    positionSubmenu(sublist) {\n        let parentMenuItem = sublist.parentElement.parentElement;\n        let viewport = DomHandler.getViewport();\n        let sublistWidth = sublist.offsetParent ? sublist.offsetWidth : DomHandler.getHiddenElementOuterWidth(sublist);\n        let sublistHeight = sublist.offsetHeight ? sublist.offsetHeight : DomHandler.getHiddenElementOuterHeight(sublist);\n        let itemOuterWidth = DomHandler.getOuterWidth(parentMenuItem.children[0]);\n        let itemOuterHeight = DomHandler.getOuterHeight(parentMenuItem.children[0]);\n        let containerOffset = DomHandler.getOffset(parentMenuItem.parentElement);\n\n        sublist.style.zIndex = ++DomHandler.zindex;\n\n        if ((parseInt(containerOffset.top) + itemOuterHeight + sublistHeight) > (viewport.height - DomHandler.calculateScrollbarHeight())) {\n            sublist.style.removeProperty('top');\n            sublist.style.bottom = '0px';\n        }\n        else {\n            sublist.style.removeProperty('bottom');\n            sublist.style.top = '0px';\n        }\n\n        if ((parseInt(containerOffset.left) + itemOuterWidth + sublistWidth) > (viewport.width - DomHandler.calculateScrollbarWidth())) {\n            sublist.style.left = -sublistWidth + 'px';\n        }\n        else {\n            sublist.style.left = itemOuterWidth + 'px';\n        }\n    }\n\n    isItemMatched(menuitem) {\n        return DomHandler.hasClass(menuitem, 'ui-menuitem') && !DomHandler.hasClass(menuitem.children[0], 'ui-state-disabled');\n    }\n\n    findNextItem(menuitem, isRepeated?) {\n        let nextMenuitem = menuitem.nextElementSibling;\n\n        if (nextMenuitem) {\n            return this.isItemMatched(nextMenuitem) ? nextMenuitem : this.findNextItem(nextMenuitem, isRepeated);\n        }\n        else {\n            let firstItem = menuitem.parentElement.children[0];\n\n            return this.isItemMatched(firstItem) ? firstItem : (!isRepeated ? this.findNextItem(firstItem, true) : null);\n        }\n    }\n\n    findPrevItem(menuitem, isRepeated?) {\n        let prevMenuitem = menuitem.previousElementSibling;\n\n        if (prevMenuitem) {\n            return this.isItemMatched(prevMenuitem) ? prevMenuitem : this.findPrevItem(prevMenuitem, isRepeated);\n        }\n        else {\n            let lastItem = menuitem.parentElement.children[menuitem.parentElement.children.length - 1];\n\n            return this.isItemMatched(lastItem) ? lastItem : (!isRepeated ? this.findPrevItem(lastItem, true) : null);\n        }\n    }\n\n    getActiveItem() {\n        let activeItemKey = this.contextMenuService.activeItemKey;\n\n        return activeItemKey == null ? null : DomHandler.findSingle(this.containerViewChild.nativeElement, '.ui-menuitem[data-ik=\"' + activeItemKey + '\"]');\n    }\n\n    clearActiveItem() {\n        if (this.contextMenuService.activeItemKey) {\n            this.removeActiveFromSubLists(this.containerViewChild.nativeElement);\n            this.contextMenuService.reset();\n        }\n    }\n\n    removeActiveFromSubLists(el) {\n        let sublists = DomHandler.find(el, '.ui-submenu-list-active');\n\n        for (let sublist of sublists) {\n            DomHandler.removeClass(sublist, 'ui-submenu-list-active');\n        }\n    }\n\n    removeActiveFromSublist(menuitem) {\n        if (menuitem) {\n            let sublist = DomHandler.findSingle(menuitem, '.ui-submenu-list');\n\n            if (sublist && DomHandler.hasClass(menuitem, 'ui-submenu-list-active')) {\n                DomHandler.removeClass(menuitem, 'ui-submenu-list-active');\n            }\n        }\n    }\n\n    bindGlobalListeners() {\n        if (!this.documentClickListener) {\n            const documentTarget: any = this.el ? this.el.nativeElement.ownerDocument : 'document';\n\n            this.documentClickListener = this.renderer.listen(documentTarget, 'click', (event) => {\n                if (this.containerViewChild.nativeElement.offsetParent && this.isOutsideClicked(event) && !event.ctrlKey && event.button !== 2) {\n                    this.hide();\n                }\n            });\n        }\n\n        this.zone.runOutsideAngular(() => {\n            if (!this.windowResizeListener) {\n                this.windowResizeListener = this.onWindowResize.bind(this);\n                window.addEventListener('resize', this.windowResizeListener);\n            }\n        });\n\n        if (!this.documentKeydownListener) {\n            const documentTarget: any = this.el ? this.el.nativeElement.ownerDocument : 'document';\n\n            this.documentKeydownListener = this.renderer.listen(documentTarget, 'keydown', (event) => {\n                let activeItem = this.getActiveItem();\n\n                switch (event.key) {\n                    case 'ArrowDown':\n                        if (activeItem) {\n                            this.removeActiveFromSublist(activeItem);\n                            activeItem = this.findNextItem(activeItem);\n                        }\n                        else {\n                            let firstItem = DomHandler.findSingle(this.containerViewChild.nativeElement, '.ui-menuitem-link').parentElement;\n                            activeItem = this.isItemMatched(firstItem) ? firstItem : this.findNextItem(firstItem);\n                        }\n\n                        if (activeItem) {\n                            this.contextMenuService.changeKey(activeItem.getAttribute('data-ik'));\n                        }\n\n                        event.preventDefault();\n                        break;\n\n                    case 'ArrowUp':\n                        if (activeItem) {\n                            this.removeActiveFromSublist(activeItem);\n                            activeItem = this.findPrevItem(activeItem);\n                        }\n                        else {\n                            let sublist = DomHandler.findSingle(this.containerViewChild.nativeElement, 'ul');\n                            let lastItem = sublist.children[sublist.children.length - 1];\n                            activeItem = this.isItemMatched(lastItem) ? lastItem : this.findPrevItem(lastItem);\n                        }\n\n                        if (activeItem) {\n                            this.contextMenuService.changeKey(activeItem.getAttribute('data-ik'));\n                        }\n\n                        event.preventDefault();\n                        break;\n\n                    case 'ArrowRight':\n                        if (activeItem) {\n                            let sublist = DomHandler.findSingle(activeItem, '.ui-submenu-list');\n\n                            if (sublist) {\n                                DomHandler.addClass(sublist, 'ui-submenu-list-active');\n\n                                activeItem = DomHandler.findSingle(sublist, '.ui-menuitem-link:not(.ui-state-disabled)').parentElement;\n\n                                if (activeItem) {\n                                    this.contextMenuService.changeKey(activeItem.getAttribute('data-ik'));\n                                }\n                            }\n                        }\n\n                        event.preventDefault();\n                        break;\n\n                    case 'ArrowLeft':\n                        if (activeItem) {\n                            let sublist = activeItem.parentElement;\n\n                            if (sublist && DomHandler.hasClass(sublist, 'ui-submenu-list-active')) {\n                                DomHandler.removeClass(sublist, 'ui-submenu-list-active');\n\n                                activeItem = sublist.parentElement.parentElement;\n\n                                if (activeItem) {\n                                    this.contextMenuService.changeKey(activeItem.getAttribute('data-ik'));\n                                }\n                            }\n                        }\n\n                        event.preventDefault();\n                        break;\n\n                    case 'Escape':\n                        this.hide();\n                        event.preventDefault();\n\n                        break;\n\n                    case 'Enter':\n                        if (activeItem) {\n                            this.handleItemClick(event, this.findModelItemFromKey(this.contextMenuService.activeItemKey), activeItem);\n                        }\n\n                        event.preventDefault();\n                        break;\n\n                    default:\n                        break;\n                }\n            });\n        }\n    }\n\n    findModelItemFromKey(key) {\n        if (key == null || !this.model) {\n            return null;\n        }\n\n        let indexes = key.split('_');\n        return indexes.reduce((item, currentIndex) => {\n            return item ? item.items[currentIndex] : this.model[currentIndex];\n        }, null);\n    }\n\n    handleItemClick(event, item, menuitem) {\n        if (!item || item.disabled) {\n            return;\n        }\n\n        if (item.command) {\n            item.command({\n                originalEvent: event,\n                item: item\n            });\n        }\n\n        if (item.items) {\n            let childSublist = DomHandler.findSingle(menuitem, '.ui-submenu-list');\n\n            if (childSublist) {\n                if (DomHandler.hasClass(childSublist, 'ui-submenu-list-active')) {\n                    this.removeActiveFromSubLists(menuitem);\n                }\n                else {\n                    DomHandler.addClass(childSublist, 'ui-submenu-list-active');\n                    this.positionSubmenu(childSublist);\n                }\n            }\n        }\n\n        if (!item.items) {\n            this.hide();\n        }\n    }\n\n    unbindGlobalListeners() {\n        if (this.documentClickListener) {\n            this.documentClickListener();\n            this.documentClickListener = null;\n        }\n\n        if (this.windowResizeListener) {\n            window.removeEventListener('resize', this.windowResizeListener);\n            this.windowResizeListener = null;\n        }\n\n        if (this.documentKeydownListener) {\n            this.documentKeydownListener();\n            this.documentKeydownListener = null;\n        }\n    }\n\n    onWindowResize(event) {\n        if (this.containerViewChild.nativeElement.offsetParent) {\n            this.hide();\n        }\n    }\n\n    isOutsideClicked(event: Event) {\n        return !(this.containerViewChild.nativeElement.isSameNode(event.target) || this.containerViewChild.nativeElement.contains(event.target));\n    }\n\n    ngOnDestroy() {\n        this.unbindGlobalListeners();\n\n        if (this.triggerEventListener) {\n            this.triggerEventListener();\n        }\n\n        if (this.appendTo) {\n            this.el.nativeElement.appendChild(this.containerViewChild.nativeElement);\n        }\n\n        this.ngDestroy$.next(true);\n        this.ngDestroy$.complete();\n    }\n\n}\n\n@NgModule({\n    imports: [CommonModule, RouterModule],\n    exports: [ContextMenu, RouterModule],\n    declarations: [ContextMenu, ContextMenuSub],\n    providers: [ContextMenuService]\n})\nexport class ContextMenuModule { }\n"]}