{"version":3,"file":"primeng-lts-inputswitch.umd.js","sources":["primeng-lts/inputswitch/inputswitch.ts"],"names":["NG_VALUE_ACCESSOR","forwardRef","EventEmitter","ChangeDetectorRef","Input","Output","Component","ChangeDetectionStrategy","NgModule","CommonModule"],"mappings":"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","sourcesContent":["import {NgModule,Component,Input,forwardRef,EventEmitter,Output,ChangeDetectorRef,ChangeDetectionStrategy} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {NG_VALUE_ACCESSOR,ControlValueAccessor} from '@angular/forms';\n\nexport const INPUTSWITCH_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => InputSwitch),\n  multi: true\n};\n\n@Component({\n    selector: 'p-inputSwitch',\n    template: `\n        <div [ngClass]=\"{'ui-inputswitch ui-widget': true, 'ui-inputswitch-checked': checked, 'ui-state-disabled': disabled, 'ui-inputswitch-readonly': readonly, 'ui-inputswitch-focus': focused}\" \n            [ngStyle]=\"style\" [class]=\"styleClass\" (click)=\"onClick($event, cb)\">\n            <div class=\"ui-helper-hidden-accessible\">\n                <input #cb type=\"checkbox\" [attr.id]=\"inputId\" [attr.name]=\"name\" [attr.tabindex]=\"tabindex\" [checked]=\"checked\" (change)=\"onInputChange($event)\"\n                    (focus)=\"onFocus($event)\" (blur)=\"onBlur($event)\" [disabled]=\"disabled\" role=\"switch\" [attr.aria-checked]=\"checked\" [attr.aria-labelledby]=\"ariaLabelledBy\"/>\n            </div>\n            <span class=\"ui-inputswitch-slider\"></span>\n        </div>\n    `,\n    providers: [INPUTSWITCH_VALUE_ACCESSOR],\n    changeDetection: ChangeDetectionStrategy.Default\n})\nexport class InputSwitch implements ControlValueAccessor {\n\n    @Input() style: any;\n\n    @Input() styleClass: string;\n\n    @Input() tabindex: number;\n\n    @Input() inputId: string;\n\n    @Input() name: string;\n\n    @Input() disabled: boolean;\n\n    @Input() readonly: boolean;\n\n    @Input() ariaLabelledBy: string;\n    \n    @Output() onChange: EventEmitter<any> = new EventEmitter();\n\n    checked: boolean = false;\n\n    focused: boolean = false;\n\n    onModelChange: Function = () => {};\n\n    onModelTouched: Function = () => {};\n\n    constructor(private cd: ChangeDetectorRef) {}\n\n    onClick(event: Event, cb: HTMLInputElement) {\n        if (!this.disabled && !this.readonly) {\n            event.preventDefault();\n            this.toggle(event);\n            cb.focus();\n        }\n    }\n\n    onInputChange(event: Event) {\n        if (!this.readonly) {\n            const inputChecked = (<HTMLInputElement> event.target).checked;\n            this.updateModel(event, inputChecked);\n        }\n    }\n\n    toggle(event: Event) {\n        this.updateModel(event, !this.checked);\n    }\n\n    updateModel(event: Event, value: boolean) {\n        this.checked = value;\n        this.onModelChange(this.checked);\n        this.onChange.emit({\n            originalEvent: event,\n            checked: this.checked\n        });\n    }\n\n    onFocus(event: Event) {\n        this.focused = true;\n    }\n\n    onBlur(event: Event) {\n        this.focused = false;\n        this.onModelTouched();\n    }\n\n    writeValue(checked: any) : void {\n        this.checked = checked;\n        this.cd.markForCheck();\n    }\n\n    registerOnChange(fn: Function): void {\n        this.onModelChange = fn;\n    }\n\n    registerOnTouched(fn: Function): void {\n        this.onModelTouched = fn;\n    }\n    \n    setDisabledState(val: boolean): void {\n        this.disabled = val;\n    }\n}\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [InputSwitch],\n    declarations: [InputSwitch]\n})\nexport class InputSwitchModule { }\n"]}