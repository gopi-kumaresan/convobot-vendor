{"version":3,"file":"primeng-lts-captcha.umd.js","sources":["primeng-lts/captcha/captcha.ts"],"names":["EventEmitter","ElementRef","NgZone","Input","Output","Component","ChangeDetectionStrategy","NgModule","CommonModule"],"mappings":"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","sourcesContent":["import {NgModule,AfterViewInit,Component,EventEmitter,Input,NgZone,OnDestroy,Output,ElementRef,ChangeDetectionStrategy} from '@angular/core';\nimport {CommonModule} from '@angular/common';\n\n@Component({\n    selector: 'p-captcha',\n    template: `<div></div>`,\n    changeDetection: ChangeDetectionStrategy.Default\n})\nexport class Captcha implements AfterViewInit,OnDestroy {\n\n    @Input() siteKey: string = null;\n        \n    @Input() theme = 'light';\n    \n    @Input() type = 'image';\n    \n    @Input() size = 'normal';\n    \n    @Input() tabindex = 0;\n     \n    @Input() initCallback = \"initRecaptcha\";\n    \n    @Output() onResponse: EventEmitter<any> = new EventEmitter();\n    \n    @Output() onExpire: EventEmitter<any> = new EventEmitter();\n    \n    private _instance: any = null;\n\n    private _language: any = null;\n\n    @Input() get language(): string {\n        return this._language;\n    }\n\n    set language(language: string) {\n        this._language = language;\n        this.init();\n    }\n\n    constructor(public el: ElementRef, public _zone: NgZone) {}\n    \n    ngAfterViewInit() {\n        if ((<any>window).grecaptcha) {\n            if (!(<any>window).grecaptcha.render){\n                setTimeout(() =>{\n                    this.init();\n                },100)\n            }\n            else {\n                this.init();\n            }\n        }\n        else {\n            (<any>window)[this.initCallback] = () => {\n              this.init();\n            }\n        } \n    }\n    \n    init()Â {\n        this._instance = (<any>window).grecaptcha.render(this.el.nativeElement.children[0], {\n            'sitekey': this.siteKey,\n            'theme': this.theme,\n            'type': this.type,\n            'size': this.size,\n            'tabindex': this.tabindex,\n            'hl': this.language,\n            'callback': (response: string) => {this._zone.run(() => this.recaptchaCallback(response))},\n            'expired-callback': () => {this._zone.run(() => this.recaptchaExpiredCallback())}\n        });\n    }\n    \n    reset() {\n        if (this._instance === null)\n            return;\n        \n        (<any>window).grecaptcha.reset(this._instance);\n    }\n    \n    getResponse(): String {\n        if (this._instance === null)\n            return null;\n        \n        return (<any>window).grecaptcha.getResponse(this._instance);\n    }\n    \n    recaptchaCallback(response: string) {\n        this.onResponse.emit({\n            response: response\n        });\n    }\n\n    recaptchaExpiredCallback() {\n        this.onExpire.emit();\n    }\n    \n    ngOnDestroy() {\n        if (this._instance != null) {\n          (<any>window).grecaptcha.reset(this._instance);\n        }\n    }\n}\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [Captcha],\n    declarations: [Captcha]\n})\nexport class CaptchaModule { }\n"]}