{"version":3,"file":"primeng-lts-togglebutton.umd.js","sources":["primeng-lts/togglebutton/togglebutton.ts"],"names":["NG_VALUE_ACCESSOR","forwardRef","EventEmitter","Input","Output","ViewChild","Component","ChangeDetectionStrategy","NgModule","CommonModule"],"mappings":"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","sourcesContent":["import {NgModule,Component,Input,Output,EventEmitter,forwardRef,AfterViewInit,ViewChild,ElementRef,ChangeDetectionStrategy} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\n\nexport const TOGGLEBUTTON_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => ToggleButton),\n  multi: true\n};\n\n@Component({\n    selector: 'p-toggleButton',\n    template: `\n        <div [ngClass]=\"{'ui-button ui-togglebutton ui-widget ui-state-default ui-corner-all': true, 'ui-button-text-only': (!onIcon && !offIcon), \n                'ui-button-text-icon-left': (onIcon && offIcon && hasOnLabel && hasOffLabel && iconPos === 'left'), \n                'ui-button-text-icon-right': (onIcon && offIcon && hasOnLabel && hasOffLabel && iconPos === 'right'),'ui-button-icon-only': (onIcon && offIcon && !hasOnLabel && !hasOffLabel),\n                'ui-state-active': checked,'ui-state-focus':focus,'ui-state-disabled':disabled}\" [ngStyle]=\"style\" [class]=\"styleClass\" \n                (click)=\"toggle($event)\" (keydown.enter)=\"toggle($event)\">\n            <div class=\"ui-helper-hidden-accessible\">\n                <input #checkbox type=\"checkbox\" [attr.id]=\"inputId\" [checked]=\"checked\" (focus)=\"onFocus()\" (blur)=\"onBlur()\" [attr.tabindex]=\"tabindex\"\n                    role=\"button\" [attr.aria-pressed]=\"checked\" [attr.aria-labelledby]=\"ariaLabelledBy\" [disabled]=\"disabled\">\n            </div>\n            <span *ngIf=\"onIcon||offIcon\" class=\"ui-button-icon-left\" [class]=\"checked ? this.onIcon : this.offIcon\" [ngClass]=\"{'ui-button-icon-left': (iconPos === 'left'), \n            'ui-button-icon-right': (iconPos === 'right')}\"></span>\n            <span class=\"ui-button-text ui-unselectable-text\">{{checked ? hasOnLabel ? onLabel : 'ui-btn' : hasOffLabel ? offLabel : 'ui-btn'}}</span>\n        </div>\n    `,\n    providers: [TOGGLEBUTTON_VALUE_ACCESSOR],\n    changeDetection: ChangeDetectionStrategy.Default\n})\nexport class ToggleButton implements ControlValueAccessor,AfterViewInit {\n\n    @Input() onLabel: string = 'Yes';\n\n    @Input() offLabel: string = 'No';\n\n    @Input() onIcon: string;\n\n    @Input() offIcon: string;\n\n    @Input() ariaLabelledBy: string;\n\n    @Input() disabled: boolean;\n\n    @Input() style: any;\n\n    @Input() styleClass: string;\n\n    @Input() inputId: string;\n\n    @Input() tabindex: number;\n\n    @Input() iconPos: string = 'left';\n\n    @Output() onChange: EventEmitter<any> = new EventEmitter();\n    \n    @ViewChild('checkbox') checkboxViewChild: ElementRef;\n    \n    checkbox: HTMLInputElement;\n    \n    checked: boolean = false;\n\n    focus: boolean = false;\n    \n    onModelChange: Function = () => {};\n    \n    onModelTouched: Function = () => {};\n    \n    ngAfterViewInit() {\n        if (this.checkboxViewChild){\n            this.checkbox = <HTMLInputElement> this.checkboxViewChild.nativeElement;\n        }\n    }\n    \n    toggle(event: Event) {\n        if (!this.disabled) {\n            this.checked = !this.checked;\n            this.onModelChange(this.checked);\n            this.onModelTouched();\n            this.onChange.emit({\n                originalEvent: event,\n                checked: this.checked\n            });\n            if (this.checkbox) {\n                this.checkbox.focus();\n            }\n        }\n    }\n\n    onFocus() {\n        this.focus = true;\n    }\n    \n    onBlur() {\n        this.focus = false;\n        this.onModelTouched();\n    }\n    \n    writeValue(value: any) : void {\n        this.checked = value;\n    }\n    \n    registerOnChange(fn: Function): void {\n        this.onModelChange = fn;\n    }\n\n    registerOnTouched(fn: Function): void {\n        this.onModelTouched = fn;\n    }\n    \n    setDisabledState(val: boolean): void {\n        this.disabled = val;\n    }\n    \n    get hasOnLabel():boolean {\n        return this.onLabel && this.onLabel.length > 0;\n    }\n    \n    get hasOffLabel():boolean {\n        return this.onLabel && this.onLabel.length > 0;\n    }\n}\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [ToggleButton],\n    declarations: [ToggleButton]\n})\nexport class ToggleButtonModule { }\n"]}