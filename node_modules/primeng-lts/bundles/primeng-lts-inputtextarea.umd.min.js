!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("@angular/core"),require("@angular/forms"),require("@angular/common")):"function"==typeof define&&define.amd?define("primeng-lts/inputtextarea",["exports","@angular/core","@angular/forms","@angular/common"],e):e(((t=t||self)["primeng-lts"]=t["primeng-lts"]||{},t["primeng-lts"].inputtextarea={}),t.ng.core,t.ng.forms,t.ng.common)}(this,(function(t,e,n,i){"use strict";var o=this&&this.__decorate||function(t,e,n,i){var o,s=arguments.length,r=s<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(t,e,n,i);else for(var l=t.length-1;l>=0;l--)(o=t[l])&&(r=(s<3?o(r):s>3?o(e,n,r):o(e,n))||r);return s>3&&r&&Object.defineProperty(e,n,r),r},s=this&&this.__param||function(t,e){return function(n,i){e(n,i,t)}},r=function(){function t(t,n,i,o){this.el=t,this.ngModel=n,this.control=i,this.cd=o,this.onResize=new e.EventEmitter}return t.prototype.ngOnInit=function(){var t=this;this.ngModel&&(this.ngModelSubscription=this.ngModel.valueChanges.subscribe((function(){t.updateState()}))),this.control&&(this.ngControlSubscription=this.control.valueChanges.subscribe((function(){t.updateState()})))},t.prototype.ngAfterViewInit=function(){this.autoResize&&this.resize(),this.updateFilledState(),this.cd.detectChanges()},t.prototype.onInput=function(t){this.updateState()},t.prototype.updateFilledState=function(){this.filled=this.el.nativeElement.value&&this.el.nativeElement.value.length},t.prototype.onFocus=function(t){this.autoResize&&this.resize(t)},t.prototype.onBlur=function(t){this.autoResize&&this.resize(t)},t.prototype.resize=function(t){this.el.nativeElement.style.height="auto",this.el.nativeElement.style.height=this.el.nativeElement.scrollHeight+"px",parseFloat(this.el.nativeElement.style.height)>=parseFloat(this.el.nativeElement.style.maxHeight)?(this.el.nativeElement.style.overflowY="scroll",this.el.nativeElement.style.height=this.el.nativeElement.style.maxHeight):this.el.nativeElement.style.overflow="hidden",this.onResize.emit(t||{})},t.prototype.updateState=function(){this.updateFilledState(),this.autoResize&&this.resize()},t.prototype.ngOnDestroy=function(){this.ngModelSubscription&&this.ngModelSubscription.unsubscribe(),this.ngControlSubscription&&this.ngControlSubscription.unsubscribe()},t.ctorParameters=function(){return[{type:e.ElementRef},{type:n.NgModel,decorators:[{type:e.Optional}]},{type:n.NgControl,decorators:[{type:e.Optional}]},{type:e.ChangeDetectorRef}]},o([e.Input()],t.prototype,"autoResize",void 0),o([e.Output()],t.prototype,"onResize",void 0),o([e.HostListener("input",["$event"])],t.prototype,"onInput",null),o([e.HostListener("focus",["$event"])],t.prototype,"onFocus",null),o([e.HostListener("blur",["$event"])],t.prototype,"onBlur",null),t=o([e.Directive({selector:"[pInputTextarea]",host:{"[class.ui-inputtext]":"true","[class.ui-corner-all]":"true","[class.ui-inputtextarea-resizable]":"autoResize","[class.ui-state-default]":"true","[class.ui-widget]":"true","[class.ui-state-filled]":"filled"}}),s(1,e.Optional()),s(2,e.Optional())],t)}(),l=function(){function t(){}return t=o([e.NgModule({imports:[i.CommonModule],exports:[r],declarations:[r]})],t)}();t.InputTextarea=r,t.InputTextareaModule=l,Object.defineProperty(t,"__esModule",{value:!0})}));
//# sourceMappingURL=primeng-lts-inputtextarea.umd.min.js.map