{"version":3,"sources":["ng://primeng-lts/radiobutton/radiobutton.ts"],"names":["RADIO_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","RadioButton","multi","RadioControlRegistry","this","accessors","prototype","add","control","accessor","push","remove","filter","c","select","_this","forEach","isSameGroup","writeValue","value","controlPair","root","name","__decorate","Injectable","providedIn","cd","injector","registry","onClick","EventEmitter","onFocus","onBlur","onModelChange","onModelTouched","ngOnInit","get","NgControl","checkName","ngOnDestroy","handleClick","event","radioButton","focus","preventDefault","disabled","inputViewChild","nativeElement","checked","emit","markForCheck","registerOnChange","fn","registerOnTouched","setDisabledState","val","onInputFocus","focused","onInputBlur","onChange","formControlName","throwNameError","Error","ChangeDetectorRef","Injector","Input","Output","ViewChild","Component","selector","template","providers","changeDetection","ChangeDetectionStrategy","Default","RadioButtonModule","NgModule","imports","CommonModule","exports","declarations"],"mappings":"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","sourcesContent":["import {NgModule,Component,Input,Output,ElementRef,EventEmitter,forwardRef,ViewChild,ChangeDetectorRef,ChangeDetectionStrategy, Injectable, OnInit, OnDestroy, Injector} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor, NgControl} from '@angular/forms';\n\nexport const RADIO_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => RadioButton),\n    multi: true\n};\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class RadioControlRegistry {\n    private accessors: any[] = [];\n\n    add(control: NgControl, accessor: RadioButton) {\n        this.accessors.push([control, accessor]);\n    }\n\n    remove(accessor: RadioButton) {\n        this.accessors = this.accessors.filter((c) => {\n            return c[1] !== accessor;\n        })\n    }\n\n    select(accessor: RadioButton) {\n        this.accessors.forEach((c) => {\n            if (this.isSameGroup(c, accessor) && c[1] !== accessor) {\n                c[1].writeValue(accessor.value);\n            }\n        });\n    }\n\n    private isSameGroup(controlPair: [NgControl, RadioButton], accessor: RadioButton): boolean {\n        if (!controlPair[0].control) {\n            return false;\n        }\n\n        return controlPair[0].control.root === accessor.control.control.root && controlPair[1].name === accessor.name;\n    }\n}\n\n@Component({\n    selector: 'p-radioButton',\n    template: `\n        <div [ngStyle]=\"style\" [ngClass]=\"'ui-radiobutton ui-widget'\" [class]=\"styleClass\">\n            <div class=\"ui-helper-hidden-accessible\">\n                <input #rb type=\"radio\" [attr.id]=\"inputId\" [attr.name]=\"name\" [attr.value]=\"value\" [attr.tabindex]=\"tabindex\" [attr.aria-checked]=\"checked\" [attr.aria-label]=\"ariaLabel\"\n                [attr.aria-labelledby]=\"ariaLabelledBy\" [checked]=\"checked\" (change)=\"onChange($event)\" (focus)=\"onInputFocus($event)\" (blur)=\"onInputBlur($event)\" [disabled]=\"disabled\">\n            </div>\n            <div (click)=\"handleClick($event, rb, true)\" [attr.aria-checked]=\"checked\"\n                [ngClass]=\"{'ui-radiobutton-box ui-widget ui-state-default':true,\n                'ui-state-active':rb.checked,'ui-state-disabled':disabled,'ui-state-focus':focused}\">\n                <span class=\"ui-radiobutton-icon ui-clickable\" [ngClass]=\"{'pi pi-circle-on':rb.checked}\"></span>\n            </div>\n        </div>\n        <label (click)=\"select($event)\" [class]=\"labelStyleClass\"\n            [ngClass]=\"{'ui-radiobutton-label':true, 'ui-label-active':rb.checked, 'ui-label-disabled':disabled, 'ui-label-focus':focused}\"\n            *ngIf=\"label\" [attr.for]=\"inputId\">{{label}}</label>\n    `,\n    providers: [RADIO_VALUE_ACCESSOR],\n    changeDetection: ChangeDetectionStrategy.Default\n})\nexport class RadioButton implements ControlValueAccessor, OnInit, OnDestroy {\n\n    @Input() value: any;\n\n    @Input() formControlName: string;\n\n    @Input() name: string;\n\n    @Input() disabled: boolean;\n    \n    @Input() label: string;\n\n    @Input() tabindex: number;\n\n    @Input() inputId: string;\n\n    @Input() ariaLabelledBy: string;\n\n    @Input() ariaLabel: string;\n    \n    @Input() style: any;\n\n    @Input() styleClass: string;\n\n    @Input() labelStyleClass: string;\n\n    @Output() onClick: EventEmitter<any> = new EventEmitter();\n\n    @Output() onFocus: EventEmitter<any> = new EventEmitter();\n\n    @Output() onBlur: EventEmitter<any> = new EventEmitter();\n    \n    @ViewChild('rb') inputViewChild: ElementRef;\n            \n    public onModelChange: Function = () => {};\n    \n    public onModelTouched: Function = () => {};\n    \n    public checked: boolean;\n        \n    public focused: boolean;\n\n    control: NgControl;\n\n    constructor(public cd: ChangeDetectorRef, private injector: Injector, private registry: RadioControlRegistry) {}\n\n    ngOnInit() {\n        this.control = this.injector.get(NgControl);\n        this.checkName();\n        this.registry.add(this.control, this);\n    }\n\n    ngOnDestroy() {\n        this.registry.remove(this);\n    }\n    \n    handleClick(event, radioButton, focus) {\n        event.preventDefault();\n\n        if (this.disabled) {\n            return;\n        }\n\n        this.select(event);\n\n        if (focus) {\n            radioButton.focus();\n        }\n    }\n    \n    select(event) {\n        if (!this.disabled) {\n            this.inputViewChild.nativeElement.checked = true;\n            this.checked = true;\n            this.onModelChange(this.value);\n            this.registry.select(this);\n            this.onClick.emit(event);\n        }\n    }\n            \n    writeValue(value: any) : void {\n        this.checked = (value == this.value);\n\n        if (this.inputViewChild && this.inputViewChild.nativeElement) {\n            this.inputViewChild.nativeElement.checked = this.checked;\n        }\n        \n        this.cd.markForCheck();\n    }\n    \n    registerOnChange(fn: Function): void {\n        this.onModelChange = fn;\n    }\n\n    registerOnTouched(fn: Function): void {\n        this.onModelTouched = fn;\n    }\n    \n    setDisabledState(val: boolean): void {\n        this.disabled = val;\n    }\n    \n    onInputFocus(event) {\n        this.focused = true;\n        this.onFocus.emit(event);\n    }\n\n    onInputBlur(event) {\n        this.focused = false;\n        this.onModelTouched();\n        this.onBlur.emit(event);\n    }\n    \n    onChange(event) {\n        this.select(event);\n    }\n\n    focus() {\n        this.inputViewChild.nativeElement.focus();\n    }\n\n    private checkName() {\n        if (this.name && this.formControlName && this.name !== this.formControlName) {\n            this.throwNameError();\n        }\n        if (!this.name && this.formControlName) {\n            this.name = this.formControlName;\n        }\n    }\n\n    private throwNameError() {\n        throw new Error(`\n          If you define both a name and a formControlName attribute on your radio button, their values\n          must match. Ex: <p-radioButton formControlName=\"food\" name=\"food\"></p-radioButton>\n        `);\n    }\n}\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [RadioButton],\n    declarations: [RadioButton]\n})\nexport class RadioButtonModule { }"]}