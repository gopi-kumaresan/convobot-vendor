(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('primeng-lts/dom'), require('primeng-lts/api'), require('@angular/router'), require('rxjs'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('primeng-lts/contextmenu', ['exports', '@angular/core', '@angular/common', 'primeng-lts/dom', 'primeng-lts/api', '@angular/router', 'rxjs', 'rxjs/operators'], factory) :
    (global = global || self, factory((global['primeng-lts'] = global['primeng-lts'] || {}, global['primeng-lts'].contextmenu = {}), global.ng.core, global.ng.common, global['primeng-lts'].dom, global['primeng-lts'].api, global.ng.router, global.rxjs, global.rxjs.operators));
}(this, (function (exports, core, common, dom, api, router, rxjs, operators) { 'use strict';

    var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __param = (this && this.__param) || function (paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    };
    var __values = (this && this.__values) || function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    var ContextMenuSub = /** @class */ (function () {
        function ContextMenuSub(contextMenu) {
            this.leafClick = new core.EventEmitter();
            this.contextMenu = contextMenu;
        }
        ContextMenuSub.prototype.ngOnInit = function () {
            var _this = this;
            this.activeItemKeyChangeSubscription = this.contextMenu.contextMenuService.activeItemKeyChange$.pipe(operators.takeUntil(this.contextMenu.ngDestroy$)).subscribe(function (activeItemKey) {
                _this.activeItemKey = activeItemKey;
                if (_this.isActive(_this.parentItemKey) && dom.DomHandler.hasClass(_this.sublistViewChild.nativeElement, 'ui-submenu-list-active')) {
                    _this.contextMenu.positionSubmenu(_this.sublistViewChild.nativeElement);
                }
                _this.contextMenu.cd.markForCheck();
            });
        };
        ContextMenuSub.prototype.onItemMouseEnter = function (event, item, key) {
            if (this.hideTimeout) {
                clearTimeout(this.hideTimeout);
                this.hideTimeout = null;
            }
            if (item.disabled) {
                return;
            }
            if (item.items) {
                var childSublist = dom.DomHandler.findSingle(event.currentTarget, '.ui-submenu-list');
                dom.DomHandler.addClass(childSublist, 'ui-submenu-list-active');
            }
            this.contextMenu.contextMenuService.changeKey(key);
        };
        ContextMenuSub.prototype.onItemMouseLeave = function (event, item) {
            if (item.disabled) {
                return;
            }
            if (this.contextMenu.el.nativeElement.contains(event.toElement)) {
                if (item.items) {
                    this.contextMenu.removeActiveFromSubLists(event.currentTarget);
                }
                if (!this.root) {
                    this.contextMenu.contextMenuService.changeKey(this.parentItemKey);
                }
            }
        };
        ContextMenuSub.prototype.onItemClick = function (event, item, menuitem, key) {
            if (item.disabled) {
                event.preventDefault();
                return;
            }
            if (!item.url && !item.routerLink) {
                event.preventDefault();
            }
            if (item.command) {
                item.command({
                    originalEvent: event,
                    item: item
                });
            }
            if (item.items) {
                var childSublist = dom.DomHandler.findSingle(menuitem, '.ui-submenu-list');
                if (childSublist) {
                    if (this.isActive(key) && dom.DomHandler.hasClass(childSublist, 'ui-submenu-list-active')) {
                        this.contextMenu.removeActiveFromSubLists(menuitem);
                    }
                    else {
                        dom.DomHandler.addClass(childSublist, 'ui-submenu-list-active');
                    }
                    this.contextMenu.contextMenuService.changeKey(key);
                }
            }
            if (!item.items) {
                this.onLeafClick();
            }
        };
        ContextMenuSub.prototype.onLeafClick = function () {
            if (this.root) {
                this.contextMenu.hide();
            }
            this.leafClick.emit();
        };
        ContextMenuSub.prototype.getKey = function (index) {
            return this.root ? String(index) : this.parentItemKey + '_' + index;
        };
        ContextMenuSub.prototype.isActive = function (key) {
            return (this.activeItemKey && this.activeItemKey.startsWith(key));
        };
        ContextMenuSub.ctorParameters = function () { return [
            { type: undefined, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return ContextMenu; }),] }] }
        ]; };
        __decorate([
            core.Input()
        ], ContextMenuSub.prototype, "item", void 0);
        __decorate([
            core.Input()
        ], ContextMenuSub.prototype, "root", void 0);
        __decorate([
            core.Input()
        ], ContextMenuSub.prototype, "parentItemKey", void 0);
        __decorate([
            core.Output()
        ], ContextMenuSub.prototype, "leafClick", void 0);
        __decorate([
            core.ViewChild('sublist')
        ], ContextMenuSub.prototype, "sublistViewChild", void 0);
        __decorate([
            core.ViewChild('menuitem')
        ], ContextMenuSub.prototype, "menuitemViewChild", void 0);
        ContextMenuSub = __decorate([
            core.Component({
                selector: 'p-contextMenuSub',
                template: "\n        <ul #sublist [ngClass]=\"{'ui-widget-content ui-corner-all ui-submenu-list ui-shadow':!root}\" class=\"ui-menu-list\">\n            <ng-template ngFor let-child let-index=\"index\" [ngForOf]=\"(root ? item : item.items)\">\n                <li *ngIf=\"child.separator\" #menuitem class=\"ui-menu-separator ui-widget-content\" [ngClass]=\"{'ui-helper-hidden': child.visible === false}\" role=\"separator\">\n                <li *ngIf=\"!child.separator\" #menuitem [ngClass]=\"{'ui-menuitem ui-corner-all':true,'ui-menuitem-active': isActive(getKey(index)),'ui-helper-hidden': child.visible === false}\" [ngStyle]=\"child.style\" [class]=\"child.styleClass\"\n                    (mouseenter)=\"onItemMouseEnter($event,child,getKey(index))\" (mouseleave)=\"onItemMouseLeave($event,child)\" role=\"none\" [attr.data-ik]=\"getKey(index)\">\n                    <a *ngIf=\"!child.routerLink\" [attr.href]=\"child.url ? child.url : null\" [attr.target]=\"child.target\" [attr.title]=\"child.title\" [attr.id]=\"child.id\" [attr.tabindex]=\"child.disabled ? null : '0'\" (click)=\"onItemClick($event, child, menuitem, getKey(index))\"\n                        [ngClass]=\"{'ui-menuitem-link ui-corner-all':true,'ui-state-disabled':child.disabled}\" [attr.aria-haspopup]=\"item.items != null\" [attr.aria-expanded]=\"item === activeItem\">\n                        <span class=\"ui-submenu-icon pi pi-fw pi-caret-right\" *ngIf=\"child.items\"></span>\n                        <span class=\"ui-menuitem-icon\" *ngIf=\"child.icon\" [ngClass]=\"child.icon\"></span>\n                        <span class=\"ui-menuitem-text\">{{child.label}}</span>\n                    </a>\n                    <a *ngIf=\"child.routerLink\" [routerLink]=\"child.routerLink\" [queryParams]=\"child.queryParams\" [routerLinkActive]=\"'ui-menuitem-link-active'\" role=\"menuitem\"\n                        [routerLinkActiveOptions]=\"child.routerLinkActiveOptions||{exact:false}\" [attr.target]=\"child.target\" [attr.title]=\"child.title\" [attr.id]=\"child.id\" [attr.tabindex]=\"child.disabled ? null : '0'\"\n                        (click)=\"onItemClick($event, child, menuitem, getKey(index))\" [ngClass]=\"{'ui-menuitem-link ui-corner-all':true,'ui-state-disabled':child.disabled}\" [fragment]=\"child.fragment\" [queryParamsHandling]=\"child.queryParamsHandling\" [preserveFragment]=\"child.preserveFragment\" [skipLocationChange]=\"child.skipLocationChange\" [replaceUrl]=\"child.replaceUrl\" [state]=\"child.state\">\n                        <span class=\"ui-submenu-icon pi pi-fw pi-caret-right\" *ngIf=\"child.items\"></span>\n                        <span class=\"ui-menuitem-icon\" *ngIf=\"child.icon\" [ngClass]=\"child.icon\"></span>\n                        <span class=\"ui-menuitem-text\">{{child.label}}</span>\n                    </a>\n                    <p-contextMenuSub class=\"ui-submenu\" [parentItemKey]=\"getKey(index)\" [item]=\"child\" *ngIf=\"child.items\" (leafClick)=\"onLeafClick()\"></p-contextMenuSub>\n                </li>\n            </ng-template>\n        </ul>\n    "
            }),
            __param(0, core.Inject(core.forwardRef(function () { return ContextMenu; })))
        ], ContextMenuSub);
        return ContextMenuSub;
    }());
    var ContextMenu = /** @class */ (function () {
        function ContextMenu(el, renderer, cd, zone, contextMenuService) {
            this.el = el;
            this.renderer = renderer;
            this.cd = cd;
            this.zone = zone;
            this.contextMenuService = contextMenuService;
            this.autoZIndex = true;
            this.baseZIndex = 0;
            this.triggerEvent = 'contextmenu';
            this.onShow = new core.EventEmitter();
            this.onHide = new core.EventEmitter();
            this.ngDestroy$ = new rxjs.Subject();
        }
        ContextMenu.prototype.ngAfterViewInit = function () {
            var _this = this;
            if (this.global) {
                var documentTarget = this.el ? this.el.nativeElement.ownerDocument : 'document';
                this.triggerEventListener = this.renderer.listen(documentTarget, this.triggerEvent, function (event) {
                    _this.show(event);
                    event.preventDefault();
                });
            }
            else if (this.target) {
                this.triggerEventListener = this.renderer.listen(this.target, this.triggerEvent, function (event) {
                    _this.show(event);
                    event.preventDefault();
                    event.stopPropagation();
                });
            }
            if (this.appendTo) {
                if (this.appendTo === 'body')
                    document.body.appendChild(this.containerViewChild.nativeElement);
                else
                    dom.DomHandler.appendChild(this.containerViewChild.nativeElement, this.appendTo);
            }
        };
        ContextMenu.prototype.show = function (event) {
            this.clearActiveItem();
            this.position(event);
            this.moveOnTop();
            this.containerViewChild.nativeElement.style.display = 'block';
            dom.DomHandler.fadeIn(this.containerViewChild.nativeElement, 250);
            this.bindGlobalListeners();
            if (event) {
                event.preventDefault();
            }
            this.onShow.emit();
        };
        ContextMenu.prototype.hide = function () {
            this.containerViewChild.nativeElement.style.display = 'none';
            this.unbindGlobalListeners();
            this.onHide.emit();
        };
        ContextMenu.prototype.moveOnTop = function () {
            if (this.autoZIndex) {
                this.containerViewChild.nativeElement.style.zIndex = String(this.baseZIndex + (++dom.DomHandler.zindex));
            }
        };
        ContextMenu.prototype.toggle = function (event) {
            if (this.containerViewChild.nativeElement.offsetParent)
                this.hide();
            else
                this.show(event);
        };
        ContextMenu.prototype.position = function (event) {
            if (event) {
                var left = event.pageX + 1;
                var top_1 = event.pageY + 1;
                var width = this.containerViewChild.nativeElement.offsetParent ? this.containerViewChild.nativeElement.offsetWidth : dom.DomHandler.getHiddenElementOuterWidth(this.containerViewChild.nativeElement);
                var height = this.containerViewChild.nativeElement.offsetParent ? this.containerViewChild.nativeElement.offsetHeight : dom.DomHandler.getHiddenElementOuterHeight(this.containerViewChild.nativeElement);
                var viewport = dom.DomHandler.getViewport();
                //flip
                if (left + width - document.body.scrollLeft > viewport.width) {
                    left -= width;
                }
                //flip
                if (top_1 + height - document.body.scrollTop > viewport.height) {
                    top_1 -= height;
                }
                //fit
                if (left < document.body.scrollLeft) {
                    left = document.body.scrollLeft;
                }
                //fit
                if (top_1 < document.body.scrollTop) {
                    top_1 = document.body.scrollTop;
                }
                this.containerViewChild.nativeElement.style.left = left + 'px';
                this.containerViewChild.nativeElement.style.top = top_1 + 'px';
            }
        };
        ContextMenu.prototype.positionSubmenu = function (sublist) {
            var parentMenuItem = sublist.parentElement.parentElement;
            var viewport = dom.DomHandler.getViewport();
            var sublistWidth = sublist.offsetParent ? sublist.offsetWidth : dom.DomHandler.getHiddenElementOuterWidth(sublist);
            var sublistHeight = sublist.offsetHeight ? sublist.offsetHeight : dom.DomHandler.getHiddenElementOuterHeight(sublist);
            var itemOuterWidth = dom.DomHandler.getOuterWidth(parentMenuItem.children[0]);
            var itemOuterHeight = dom.DomHandler.getOuterHeight(parentMenuItem.children[0]);
            var containerOffset = dom.DomHandler.getOffset(parentMenuItem.parentElement);
            sublist.style.zIndex = ++dom.DomHandler.zindex;
            if ((parseInt(containerOffset.top) + itemOuterHeight + sublistHeight) > (viewport.height - dom.DomHandler.calculateScrollbarHeight())) {
                sublist.style.removeProperty('top');
                sublist.style.bottom = '0px';
            }
            else {
                sublist.style.removeProperty('bottom');
                sublist.style.top = '0px';
            }
            if ((parseInt(containerOffset.left) + itemOuterWidth + sublistWidth) > (viewport.width - dom.DomHandler.calculateScrollbarWidth())) {
                sublist.style.left = -sublistWidth + 'px';
            }
            else {
                sublist.style.left = itemOuterWidth + 'px';
            }
        };
        ContextMenu.prototype.isItemMatched = function (menuitem) {
            return dom.DomHandler.hasClass(menuitem, 'ui-menuitem') && !dom.DomHandler.hasClass(menuitem.children[0], 'ui-state-disabled');
        };
        ContextMenu.prototype.findNextItem = function (menuitem, isRepeated) {
            var nextMenuitem = menuitem.nextElementSibling;
            if (nextMenuitem) {
                return this.isItemMatched(nextMenuitem) ? nextMenuitem : this.findNextItem(nextMenuitem, isRepeated);
            }
            else {
                var firstItem = menuitem.parentElement.children[0];
                return this.isItemMatched(firstItem) ? firstItem : (!isRepeated ? this.findNextItem(firstItem, true) : null);
            }
        };
        ContextMenu.prototype.findPrevItem = function (menuitem, isRepeated) {
            var prevMenuitem = menuitem.previousElementSibling;
            if (prevMenuitem) {
                return this.isItemMatched(prevMenuitem) ? prevMenuitem : this.findPrevItem(prevMenuitem, isRepeated);
            }
            else {
                var lastItem = menuitem.parentElement.children[menuitem.parentElement.children.length - 1];
                return this.isItemMatched(lastItem) ? lastItem : (!isRepeated ? this.findPrevItem(lastItem, true) : null);
            }
        };
        ContextMenu.prototype.getActiveItem = function () {
            var activeItemKey = this.contextMenuService.activeItemKey;
            return activeItemKey == null ? null : dom.DomHandler.findSingle(this.containerViewChild.nativeElement, '.ui-menuitem[data-ik="' + activeItemKey + '"]');
        };
        ContextMenu.prototype.clearActiveItem = function () {
            if (this.contextMenuService.activeItemKey) {
                this.removeActiveFromSubLists(this.containerViewChild.nativeElement);
                this.contextMenuService.reset();
            }
        };
        ContextMenu.prototype.removeActiveFromSubLists = function (el) {
            var e_1, _a;
            var sublists = dom.DomHandler.find(el, '.ui-submenu-list-active');
            try {
                for (var sublists_1 = __values(sublists), sublists_1_1 = sublists_1.next(); !sublists_1_1.done; sublists_1_1 = sublists_1.next()) {
                    var sublist = sublists_1_1.value;
                    dom.DomHandler.removeClass(sublist, 'ui-submenu-list-active');
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (sublists_1_1 && !sublists_1_1.done && (_a = sublists_1.return)) _a.call(sublists_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        };
        ContextMenu.prototype.removeActiveFromSublist = function (menuitem) {
            if (menuitem) {
                var sublist = dom.DomHandler.findSingle(menuitem, '.ui-submenu-list');
                if (sublist && dom.DomHandler.hasClass(menuitem, 'ui-submenu-list-active')) {
                    dom.DomHandler.removeClass(menuitem, 'ui-submenu-list-active');
                }
            }
        };
        ContextMenu.prototype.bindGlobalListeners = function () {
            var _this = this;
            if (!this.documentClickListener) {
                var documentTarget = this.el ? this.el.nativeElement.ownerDocument : 'document';
                this.documentClickListener = this.renderer.listen(documentTarget, 'click', function (event) {
                    if (_this.containerViewChild.nativeElement.offsetParent && _this.isOutsideClicked(event) && !event.ctrlKey && event.button !== 2) {
                        _this.hide();
                    }
                });
            }
            this.zone.runOutsideAngular(function () {
                if (!_this.windowResizeListener) {
                    _this.windowResizeListener = _this.onWindowResize.bind(_this);
                    window.addEventListener('resize', _this.windowResizeListener);
                }
            });
            if (!this.documentKeydownListener) {
                var documentTarget = this.el ? this.el.nativeElement.ownerDocument : 'document';
                this.documentKeydownListener = this.renderer.listen(documentTarget, 'keydown', function (event) {
                    var activeItem = _this.getActiveItem();
                    switch (event.key) {
                        case 'ArrowDown':
                            if (activeItem) {
                                _this.removeActiveFromSublist(activeItem);
                                activeItem = _this.findNextItem(activeItem);
                            }
                            else {
                                var firstItem = dom.DomHandler.findSingle(_this.containerViewChild.nativeElement, '.ui-menuitem-link').parentElement;
                                activeItem = _this.isItemMatched(firstItem) ? firstItem : _this.findNextItem(firstItem);
                            }
                            if (activeItem) {
                                _this.contextMenuService.changeKey(activeItem.getAttribute('data-ik'));
                            }
                            event.preventDefault();
                            break;
                        case 'ArrowUp':
                            if (activeItem) {
                                _this.removeActiveFromSublist(activeItem);
                                activeItem = _this.findPrevItem(activeItem);
                            }
                            else {
                                var sublist = dom.DomHandler.findSingle(_this.containerViewChild.nativeElement, 'ul');
                                var lastItem = sublist.children[sublist.children.length - 1];
                                activeItem = _this.isItemMatched(lastItem) ? lastItem : _this.findPrevItem(lastItem);
                            }
                            if (activeItem) {
                                _this.contextMenuService.changeKey(activeItem.getAttribute('data-ik'));
                            }
                            event.preventDefault();
                            break;
                        case 'ArrowRight':
                            if (activeItem) {
                                var sublist = dom.DomHandler.findSingle(activeItem, '.ui-submenu-list');
                                if (sublist) {
                                    dom.DomHandler.addClass(sublist, 'ui-submenu-list-active');
                                    activeItem = dom.DomHandler.findSingle(sublist, '.ui-menuitem-link:not(.ui-state-disabled)').parentElement;
                                    if (activeItem) {
                                        _this.contextMenuService.changeKey(activeItem.getAttribute('data-ik'));
                                    }
                                }
                            }
                            event.preventDefault();
                            break;
                        case 'ArrowLeft':
                            if (activeItem) {
                                var sublist = activeItem.parentElement;
                                if (sublist && dom.DomHandler.hasClass(sublist, 'ui-submenu-list-active')) {
                                    dom.DomHandler.removeClass(sublist, 'ui-submenu-list-active');
                                    activeItem = sublist.parentElement.parentElement;
                                    if (activeItem) {
                                        _this.contextMenuService.changeKey(activeItem.getAttribute('data-ik'));
                                    }
                                }
                            }
                            event.preventDefault();
                            break;
                        case 'Escape':
                            _this.hide();
                            event.preventDefault();
                            break;
                        case 'Enter':
                            if (activeItem) {
                                _this.handleItemClick(event, _this.findModelItemFromKey(_this.contextMenuService.activeItemKey), activeItem);
                            }
                            event.preventDefault();
                            break;
                        default:
                            break;
                    }
                });
            }
        };
        ContextMenu.prototype.findModelItemFromKey = function (key) {
            var _this = this;
            if (key == null || !this.model) {
                return null;
            }
            var indexes = key.split('_');
            return indexes.reduce(function (item, currentIndex) {
                return item ? item.items[currentIndex] : _this.model[currentIndex];
            }, null);
        };
        ContextMenu.prototype.handleItemClick = function (event, item, menuitem) {
            if (!item || item.disabled) {
                return;
            }
            if (item.command) {
                item.command({
                    originalEvent: event,
                    item: item
                });
            }
            if (item.items) {
                var childSublist = dom.DomHandler.findSingle(menuitem, '.ui-submenu-list');
                if (childSublist) {
                    if (dom.DomHandler.hasClass(childSublist, 'ui-submenu-list-active')) {
                        this.removeActiveFromSubLists(menuitem);
                    }
                    else {
                        dom.DomHandler.addClass(childSublist, 'ui-submenu-list-active');
                        this.positionSubmenu(childSublist);
                    }
                }
            }
            if (!item.items) {
                this.hide();
            }
        };
        ContextMenu.prototype.unbindGlobalListeners = function () {
            if (this.documentClickListener) {
                this.documentClickListener();
                this.documentClickListener = null;
            }
            if (this.windowResizeListener) {
                window.removeEventListener('resize', this.windowResizeListener);
                this.windowResizeListener = null;
            }
            if (this.documentKeydownListener) {
                this.documentKeydownListener();
                this.documentKeydownListener = null;
            }
        };
        ContextMenu.prototype.onWindowResize = function (event) {
            if (this.containerViewChild.nativeElement.offsetParent) {
                this.hide();
            }
        };
        ContextMenu.prototype.isOutsideClicked = function (event) {
            return !(this.containerViewChild.nativeElement.isSameNode(event.target) || this.containerViewChild.nativeElement.contains(event.target));
        };
        ContextMenu.prototype.ngOnDestroy = function () {
            this.unbindGlobalListeners();
            if (this.triggerEventListener) {
                this.triggerEventListener();
            }
            if (this.appendTo) {
                this.el.nativeElement.appendChild(this.containerViewChild.nativeElement);
            }
            this.ngDestroy$.next(true);
            this.ngDestroy$.complete();
        };
        ContextMenu.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: core.Renderer2 },
            { type: core.ChangeDetectorRef },
            { type: core.NgZone },
            { type: api.ContextMenuService }
        ]; };
        __decorate([
            core.Input()
        ], ContextMenu.prototype, "model", void 0);
        __decorate([
            core.Input()
        ], ContextMenu.prototype, "global", void 0);
        __decorate([
            core.Input()
        ], ContextMenu.prototype, "target", void 0);
        __decorate([
            core.Input()
        ], ContextMenu.prototype, "style", void 0);
        __decorate([
            core.Input()
        ], ContextMenu.prototype, "styleClass", void 0);
        __decorate([
            core.Input()
        ], ContextMenu.prototype, "appendTo", void 0);
        __decorate([
            core.Input()
        ], ContextMenu.prototype, "autoZIndex", void 0);
        __decorate([
            core.Input()
        ], ContextMenu.prototype, "baseZIndex", void 0);
        __decorate([
            core.Input()
        ], ContextMenu.prototype, "triggerEvent", void 0);
        __decorate([
            core.Output()
        ], ContextMenu.prototype, "onShow", void 0);
        __decorate([
            core.Output()
        ], ContextMenu.prototype, "onHide", void 0);
        __decorate([
            core.ViewChild('container')
        ], ContextMenu.prototype, "containerViewChild", void 0);
        ContextMenu = __decorate([
            core.Component({
                selector: 'p-contextMenu',
                template: "\n        <div #container [ngClass]=\"'ui-contextmenu ui-widget ui-widget-content ui-corner-all ui-shadow'\"\n            [class]=\"styleClass\" [ngStyle]=\"style\">\n            <p-contextMenuSub [item]=\"model\" root=\"root\"></p-contextMenuSub>\n        </div>\n    ",
                changeDetection: core.ChangeDetectionStrategy.Default
            })
        ], ContextMenu);
        return ContextMenu;
    }());
    var ContextMenuModule = /** @class */ (function () {
        function ContextMenuModule() {
        }
        ContextMenuModule = __decorate([
            core.NgModule({
                imports: [common.CommonModule, router.RouterModule],
                exports: [ContextMenu, router.RouterModule],
                declarations: [ContextMenu, ContextMenuSub],
                providers: [api.ContextMenuService]
            })
        ], ContextMenuModule);
        return ContextMenuModule;
    }());

    exports.ContextMenu = ContextMenu;
    exports.ContextMenuModule = ContextMenuModule;
    exports.ContextMenuSub = ContextMenuSub;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=primeng-lts-contextmenu.umd.js.map
