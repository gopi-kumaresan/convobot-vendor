{"version":3,"sources":["ng://primeng-lts/table/table.ts"],"names":["TableService","this","sortSource","Subject","selectionSource","contextMenuSource","valueSource","totalRecordsSource","columnsSource","sortSource$","asObservable","selectionSource$","contextMenuSource$","valueSource$","totalRecordsSource$","columnsSource$","prototype","onSort","sortMeta","next","onSelectionChange","onContextMenu","data","onValueChange","value","onTotalRecordsChange","onColumnsChange","columns","__decorate","Injectable","Table","el","zone","tableService","cd","pageLinks","alwaysShowPaginator","paginatorPosition","paginatorDropdownScrollHeight","currentPageReportTemplate","showFirstLastIcon","defaultSortOrder","sortMode","resetPageOnSort","selectionChange","EventEmitter","contextMenuSelectionChange","contextMenuSelectionMode","rowTrackBy","index","item","lazy","lazyLoadOnInit","compareSelectionBy","csvSeparator","exportFilename","filters","filterDelay","expandedRowKeys","editingRowKeys","rowExpandMode","virtualScrollDelay","virtualRowHeight","columnResizeMode","loadingIcon","showLoader","stateStorage","editMode","onRowSelect","onRowUnselect","onPage","onFilter","onLazyLoad","onRowExpand","onRowCollapse","onContextMenuSelect","onColResize","onColReorder","onRowReorder","onEditInit","onEditComplete","onEditCancel","onHeaderCheckboxToggle","sortFunction","firstChange","rowsChange","onStateSave","onStateRestore","_value","_totalRecords","_first","selectionKeys","_sortOrder","ngOnInit","virtualScroll","emit","createLazyLoadMetadata","restoringFilter","initialized","ngAfterContentInit","_this","templates","forEach","getType","captionTemplate","template","headerTemplate","bodyTemplate","loadingBodyTemplate","footerTemplate","summaryTemplate","colGroupTemplate","expandedRowTemplate","frozenRowsTemplate","frozenHeaderTemplate","frozenBodyTemplate","frozenFooterTemplate","frozenColGroupTemplate","emptyMessageTemplate","paginatorLeftTemplate","paginatorRightTemplate","paginatorDropdownItemTemplate","ngAfterViewInit","isStateful","resizableColumns","restoreColumnWidths","ngOnChanges","simpleChange","stateRestored","restoreState","currentValue","totalRecords","length","sortField","sortSingle","multiSortMeta","sortMultiple","hasFilter","_filter","_columns","reorderableColumns","columnOrderStateRestored","restoreColumnOrder","_sortField","sortOrder","_multiSortMeta","selection","_selection","preventSelectionSetterPropagation","updateSelectionKeys","Object","defineProperty","val","cols","_rows","dataKey","Array","isArray","_b","__values","_c","done","String","ObjectUtils","resolveFieldData","onPageChange","event","first","rows","saveState","anchorRowIndex","scrollable","resetScrollTop","sort","originalEvent","field","metaKey","ctrlKey","getSortMeta","order","push","restoringSort","customSort","mode","data1","data2","value1","value2","result","localeCompare","__spread","multisortField","multisortmeta","i","isSorted","sorted","handleRowClick","target","targetNode","nodeName","parentNode","parentElement","DomHandler","hasClass","selectionMode","isMultipleSelectionMode","shiftKey","clearSelection","rangeRowIndex","clearSelectionRange","rowIndex","selectRange","rowData","selected","isSelected","metaSelection","rowTouched","metaKeySelection","dataKeyValue","isSingleSelectionMode","selectionIndex_1","findIndexInSelection","filter","type","selectionIndex_2","handleRowTouchEnd","handleRowRightClick","contextMenu","contextMenuSelection","show","rangeStart","rangeEnd","paginator","rangeRowsData","rangeRowData","filteredValue","this_1","selectionIndex","undefined","equals","toggleRowWithRadio","toggleRowWithCheckbox","selectionIndex_3","toggleRowsWithCheckbox","check","slice","checked","matchMode","filterTimeout","clearTimeout","isFilterBlank","setTimeout","filterGlobal","trim","globalFilterFieldsArray","globalFilterFields","Error","localMatch","globalMatch","localFiltered","prop","hasOwnProperty","filterMeta","filterField","filterValue","filterMatchMode","dataFieldValue","filterConstraint","FilterUtils","filterLocale","j","globalFilterField","markForCheck","empty","globalFilter","reset","exportCSV","options","csv","frozenColumns","selectionOnly","frozenValue","column","exportable","header","record","i_1","cellData","exportFunction","replace","blob","Blob","window","navigator","msSaveOrOpenBlob","link","document","createElement","style","display","body","appendChild","download","setAttribute","URL","createObjectURL","click","open","encodeURI","removeChild","scrollToVirtualIndex","scrollTo","top","scrollableViewChild","scrollableFrozenViewChild","updateEditingCell","cell","editingCell","editingCellData","editingCellField","editingCellRowIndex","bindDocumentEditListener","isEditingCellValid","find","documentEditListener","editingCellClick","removeClass","unbindDocumentEditListener","addEventListener","removeEventListener","initRowEdit","saveRowEdit","rowElement","cancelRowEdit","toggleRow","preventDefault","isRowExpanded","isRowEditing","onColumnResizeBegin","containerLeft","getOffset","containerViewChild","nativeElement","left","lastResizerHelperX","pageX","scrollLeft","onColumnResize","addClass","resizeHelperViewChild","height","offsetHeight","onColumnResizeEnd","delta","offsetLeft","columnWidth","offsetWidth","minWidth","parseInt","newColumnWidth","nextColumn","nextElementSibling","offsetParent","nextColumnWidth","nextColumnMinWidth","scrollableView","findParentScrollableView","scrollableBodyTable","findSingle","scrollableHeaderTable","scrollableFooterTable","resizeColumnIndex","resizeColGroup","width","setScrollableItemsWidthOnExpandResize","tableViewChild","containerWidth","element","scrollableBody","scrollableHeader","scrollableFooter","scrollableBodyTableWidth","scrollableHeaderTableWidth","isContainerInViewport","setWidth","container","table","calculateScrollbarWidth","parent_1","colGroup","children","col","nextCol","onColumnDragStart","columnElement","reorderIconWidth","getHiddenElementOuterWidth","reorderIndicatorUpViewChild","reorderIconHeight","getHiddenElementOuterHeight","reorderIndicatorDownViewChild","draggedColumn","dataTransfer","setData","onColumnDragEnter","dropHeader","containerOffset","dropHeaderOffset","dragIndex","indexWithinGroup","dropIndex","targetLeft","columnCenter","Math","ceil","dropPosition","dropEffect","onColumnDragLeave","onColumnDrop","dropColumn","allowDrop","reorderArray","runOutsideAngular","draggable","onRowDragStart","rowDragging","draggedRowIndex","onRowDragOver","rowY","getWindowScrollTop","pageY","rowMidY","getOuterHeight","prevRowElement","previousElementSibling","droppedRowIndex","onRowDragLeave","onRowDragEnd","onRowDrop","isEmpty","getBlockableElement","getStorage","localStorage","sessionStorage","stateKey","storage","state","saveColumnWidths","saveColumnOrder","keys","setItem","JSON","stringify","clearState","removeItem","stateString","getItem","state_1","parse","columnWidthsState","columnWidths","tableWidthState","tableWidth","Promise","resolve","then","widths","map","getOuterWidth","join","widths_1","split","headerCols","bodyCols","columnOrder_1","key","columnOrder","reorderedColumns_1","findColumnByKey","ngOnDestroy","ElementRef","NgZone","ChangeDetectorRef","Input","Output","ViewChild","ContentChildren","PrimeTemplate","Component","selector","providers","changeDetection","ChangeDetectionStrategy","Default","TableBody","dt","subscription","subscribe","detectChanges","unsubscribe","ScrollableView","loadedPages","alignScrollBar","_scrollHeight","includes","console","log","virtualScrollBody","ngAfterViewChecked","frozen","scrollableAlignerViewChild","calculateScrollbarHeight","frozenView","frozenSiblingBody","bindEvents","scrollHeaderViewChild","headerScrollListener","onHeaderScroll","bind","scrollFooterViewChild","footerScrollListener","onFooterScroll","bodyScrollListener","onBodyScroll","getElementRef","scrollBodyViewChild","unbindEvents","preventBodyScrollPropagation","scrollHeaderBoxViewChild","marginLeft","scrollFooterBoxViewChild","scrollTop","onScrollIndexChange","virtualScrollTimeout","page","floor","virtualScrollOffset","virtualScrollChunkSize","virtualPage","createPageRange","range","getPageCount","dataToRender","dataLength","scrollToIndex","hasVerticalOverflow","getDataLength","getViewportSize","scrollTableViewChild","scrollBarWidth","paddingRight","CdkVirtualScrollViewport","SortableColumn","isEnabled","updateSortState","onClick","onEnterKey","pSortableColumnDisabled","HostListener","Directive","host","[class.ui-sortable-column]","[class.ui-state-highlight]","[attr.tabindex]","[attr.role]","[attr.aria-sort]","SortIcon","SelectableRow","onTouchEnd","onArrowDownKeyDown","row","currentTarget","nextRow","findNextSelectableRow","focus","onArrowUpKeyDown","prevRow","findPrevSelectableRow","onEnterKeyDown","pSelectableRowDisabled","[class.ui-selectable-row]","SelectableRowDblClick","ContextMenuRow","pContextMenuRowDisabled","[class.ui-contextmenu-selected]","RowToggler","pRowTogglerDisabled","ResizableColumn","resizer","className","resizerMouseDownListener","onMouseDown","bindDocumentEvents","documentMouseMoveListener","onDocumentMouseMove","documentMouseUpListener","onDocumentMouseUp","unbindDocumentEvents","which","pResizableColumnDisabled","ReorderableColumn","mouseDownListener","dragStartListener","onDragStart","dragOverListener","onDragEnter","dragEnterListener","dragLeaveListener","onDragLeave","onDragOver","onDrop","pReorderableColumnDisabled","EditableColumn","closeEditingCell","openCell","focusCellSelector","pFocusCellSelector","focusableElement","completed","onEscapeKeyDown","onShiftKeyDown","moveToPreviousCell","moveToNextCell","findCell","currentCell","targetCell","findPreviousEditableColumn","invokeElementMethod","findNextEditableColumn","prevCell","previousRow","lastElementChild","nextCell","firstElementChild","pEditableColumnDisabled","EditableRow","pEditableRowDisabled","InitEditableRow","editableRow","SaveEditableRow","CancelEditableRow","CellEditor","editableColumn","inputTemplate","outputTemplate","decorators","Optional","__param","TableRadioButton","disabled","onFocus","boxViewChild","onBlur","TableCheckbox","TableHeaderCheckbox","valueChangeSubscription","updateCheckedState","selectionChangeSubscription","isDisabled","isAllFilteredValuesChecked","ReorderableRowHandle","ReorderableRow","droppable","dragEndListener","onDragEnd","pReorderableRowDisabled","TableModule","NgModule","imports","CommonModule","PaginatorModule","ScrollingModule","exports","SharedModule","declarations"],"mappings":"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","sourcesContent":["import { NgModule, Component, HostListener, OnInit, OnDestroy, AfterViewInit, AfterViewChecked, Directive, Optional, AfterContentInit,\n    Input, Output, EventEmitter, ElementRef, ContentChildren, TemplateRef, QueryList, ViewChild, NgZone, ChangeDetectorRef, OnChanges, SimpleChanges, ChangeDetectionStrategy, Query} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PrimeTemplate, SharedModule } from 'primeng-lts/api';\nimport { PaginatorModule } from 'primeng-lts/paginator';\nimport { DomHandler } from 'primeng-lts/dom';\nimport { ObjectUtils } from 'primeng-lts/utils';\nimport { SortMeta } from 'primeng-lts/api';\nimport { TableState } from 'primeng-lts/api';\nimport { FilterMetadata } from 'primeng-lts/api';\nimport { Injectable } from '@angular/core';\nimport { BlockableUI } from 'primeng-lts/api';\nimport { Subject, Subscription } from 'rxjs';\nimport { FilterUtils } from 'primeng-lts/utils';\nimport { ScrollingModule, CdkVirtualScrollViewport } from '@angular/cdk/scrolling';\n\n@Injectable()\nexport class TableService {\n\n    private sortSource = new Subject<SortMeta|SortMeta[]>();\n    private selectionSource = new Subject();\n    private contextMenuSource = new Subject<any>();\n    private valueSource = new Subject<any>();\n    private totalRecordsSource = new Subject<any>();\n    private columnsSource = new Subject();\n\n    sortSource$ = this.sortSource.asObservable();\n    selectionSource$ = this.selectionSource.asObservable();\n    contextMenuSource$ = this.contextMenuSource.asObservable();\n    valueSource$ = this.valueSource.asObservable();\n    totalRecordsSource$ = this.totalRecordsSource.asObservable();\n    columnsSource$ = this.columnsSource.asObservable();\n\n    onSort(sortMeta: SortMeta|SortMeta[]) {\n        this.sortSource.next(sortMeta);\n    }\n\n    onSelectionChange() {\n        this.selectionSource.next();\n    }\n\n    onContextMenu(data: any) {\n        this.contextMenuSource.next(data);\n    }\n\n    onValueChange(value: any) {\n        this.valueSource.next(value);\n    }\n\n    onTotalRecordsChange(value: number) {\n        this.totalRecordsSource.next(value);\n    }\n\n    onColumnsChange(columns: any[]) {\n        this.columnsSource.next(columns);\n    }\n}\n\n@Component({\n    selector: 'p-table',\n    template: `\n        <div #container [ngStyle]=\"style\" [class]=\"styleClass\"\n            [ngClass]=\"{'ui-table ui-widget': true, 'ui-table-responsive': responsive, 'ui-table-resizable': resizableColumns,\n                'ui-table-resizable-fit': (resizableColumns && columnResizeMode === 'fit'),\n                'ui-table-hoverable-rows': (rowHover||selectionMode), 'ui-table-auto-layout': autoLayout,\n                'ui-table-flex-scrollable': (scrollable && scrollHeight === 'flex')}\">\n            <div class=\"ui-table-loading ui-widget-overlay\" *ngIf=\"loading && showLoader\"></div>\n            <div class=\"ui-table-loading-content\" *ngIf=\"loading && showLoader\">\n                <i [class]=\"'ui-table-loading-icon pi-spin ' + loadingIcon\"></i>\n            </div>\n            <div *ngIf=\"captionTemplate\" class=\"ui-table-caption ui-widget-header\">\n                <ng-container *ngTemplateOutlet=\"captionTemplate\"></ng-container>\n            </div>\n            <p-paginator [rows]=\"rows\" [first]=\"first\" [totalRecords]=\"totalRecords\" [pageLinkSize]=\"pageLinks\" styleClass=\"ui-paginator-top\" [alwaysShow]=\"alwaysShowPaginator\"\n                (onPageChange)=\"onPageChange($event)\" [rowsPerPageOptions]=\"rowsPerPageOptions\" *ngIf=\"paginator && (paginatorPosition === 'top' || paginatorPosition =='both')\"\n                [templateLeft]=\"paginatorLeftTemplate\" [templateRight]=\"paginatorRightTemplate\" [dropdownAppendTo]=\"paginatorDropdownAppendTo\" [dropdownScrollHeight]=\"paginatorDropdownScrollHeight\"\n                [currentPageReportTemplate]=\"currentPageReportTemplate\" [showFirstLastIcon]=\"showFirstLastIcon\" [dropdownItemTemplate]=\"paginatorDropdownItemTemplate\" [showCurrentPageReport]=\"showCurrentPageReport\"></p-paginator>\n\n            <div class=\"ui-table-wrapper\" *ngIf=\"!scrollable\">\n                <table role=\"grid\" #table [ngClass]=\"tableStyleClass\" [ngStyle]=\"tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                    <thead class=\"ui-table-thead\">\n                        <ng-container *ngTemplateOutlet=\"headerTemplate; context: {$implicit: columns}\"></ng-container>\n                    </thead>\n                    <tbody class=\"ui-table-tbody\" [pTableBody]=\"columns\" [pTableBodyTemplate]=\"bodyTemplate\"></tbody>\n                    <tfoot *ngIf=\"footerTemplate\" class=\"ui-table-tfoot\">\n                        <ng-container *ngTemplateOutlet=\"footerTemplate; context {$implicit: columns}\"></ng-container>\n                    </tfoot>\n                </table>\n            </div>\n\n            <div class=\"ui-table-scrollable-wrapper\" *ngIf=\"scrollable\">\n               <div class=\"ui-table-scrollable-view ui-table-frozen-view\" *ngIf=\"frozenColumns||frozenBodyTemplate\" #scrollableFrozenView [pScrollableView]=\"frozenColumns\" [frozen]=\"true\" [ngStyle]=\"{width: frozenWidth}\" [scrollHeight]=\"scrollHeight\"></div>\n               <div class=\"ui-table-scrollable-view\" #scrollableView [pScrollableView]=\"columns\" [frozen]=\"false\" [scrollHeight]=\"scrollHeight\" [ngStyle]=\"{left: frozenWidth, width: 'calc(100% - '+frozenWidth+')'}\"></div>\n            </div>\n\n            <p-paginator [rows]=\"rows\" [first]=\"first\" [totalRecords]=\"totalRecords\" [pageLinkSize]=\"pageLinks\" styleClass=\"ui-paginator-bottom\" [alwaysShow]=\"alwaysShowPaginator\"\n                (onPageChange)=\"onPageChange($event)\" [rowsPerPageOptions]=\"rowsPerPageOptions\" *ngIf=\"paginator && (paginatorPosition === 'bottom' || paginatorPosition =='both')\"\n                [templateLeft]=\"paginatorLeftTemplate\" [templateRight]=\"paginatorRightTemplate\" [dropdownAppendTo]=\"paginatorDropdownAppendTo\" [dropdownScrollHeight]=\"paginatorDropdownScrollHeight\"\n                [currentPageReportTemplate]=\"currentPageReportTemplate\" [showFirstLastIcon]=\"showFirstLastIcon\" [dropdownItemTemplate]=\"paginatorDropdownItemTemplate\" [showCurrentPageReport]=\"showCurrentPageReport\"></p-paginator>\n\n                <div *ngIf=\"summaryTemplate\" class=\"ui-table-summary ui-widget-header\">\n                <ng-container *ngTemplateOutlet=\"summaryTemplate\"></ng-container>\n            </div>\n\n            <div #resizeHelper class=\"ui-column-resizer-helper ui-state-highlight\" style=\"display:none\" *ngIf=\"resizableColumns\"></div>\n\n            <span #reorderIndicatorUp class=\"pi pi-arrow-down ui-table-reorder-indicator-up\" style=\"display:none\" *ngIf=\"reorderableColumns\"></span>\n            <span #reorderIndicatorDown class=\"pi pi-arrow-up ui-table-reorder-indicator-down\" style=\"display:none\" *ngIf=\"reorderableColumns\"></span>\n        </div>\n    `,\n    providers: [TableService],\n    changeDetection: ChangeDetectionStrategy.Default\n})\nexport class Table implements OnInit, AfterViewInit, AfterContentInit, BlockableUI, OnChanges {\n\n    @Input() frozenColumns: any[];\n\n    @Input() frozenValue: any[];\n\n    @Input() style: any;\n\n    @Input() styleClass: string;\n\n    @Input() tableStyle: any;\n\n    @Input() tableStyleClass: string;\n\n    @Input() paginator: boolean;\n\n    @Input() pageLinks: number = 5;\n\n    @Input() rowsPerPageOptions: any[];\n\n    @Input() alwaysShowPaginator: boolean = true;\n\n    @Input() paginatorPosition: string = 'bottom';\n\n    @Input() paginatorDropdownAppendTo: any;\n\n    @Input() paginatorDropdownScrollHeight: string = '200px';\n\n    @Input() currentPageReportTemplate: string = '{currentPage} of {totalPages}';\n\n    @Input() showCurrentPageReport: boolean;\n\n    @Input() showFirstLastIcon: boolean = true;\n\n    @Input() defaultSortOrder: number = 1;\n\n    @Input() sortMode: string = 'single';\n\n    @Input() resetPageOnSort: boolean = true;\n\n    @Input() selectionMode: string;\n\n    @Output() selectionChange: EventEmitter<any> = new EventEmitter();\n\n    @Input() contextMenuSelection: any;\n\n    @Output() contextMenuSelectionChange: EventEmitter<any> = new EventEmitter();\n\n    @Input() contextMenuSelectionMode: string = \"separate\";\n\n    @Input() dataKey: string;\n\n    @Input() metaKeySelection: boolean;\n\n    @Input() rowTrackBy: Function = (index: number, item: any) => item;\n\n    @Input() lazy: boolean = false;\n\n    @Input() lazyLoadOnInit: boolean = true;\n\n    @Input() compareSelectionBy: string = 'deepEquals';\n\n    @Input() csvSeparator: string = ',';\n\n    @Input() exportFilename: string = 'download';\n\n    @Input() filters: { [s: string]: FilterMetadata; } = {};\n\n    @Input() globalFilterFields: string[];\n\n    @Input() filterDelay: number = 300;\n\n    @Input() filterLocale: string;\n\n    @Input() expandedRowKeys: { [s: string]: boolean; } = {};\n\n    @Input() editingRowKeys: { [s: string]: boolean; } = {};\n\n    @Input() rowExpandMode: string = 'multiple';\n\n    @Input() scrollable: boolean;\n\n    @Input() scrollHeight: string;\n\n    @Input() virtualScroll: boolean;\n\n    @Input() virtualScrollDelay: number = 250;\n\n    @Input() virtualRowHeight: number = 28;\n\n    @Input() frozenWidth: string;\n\n    @Input() responsive: boolean;\n\n    @Input() contextMenu: any;\n\n    @Input() resizableColumns: boolean;\n\n    @Input() columnResizeMode: string = 'fit';\n\n    @Input() reorderableColumns: boolean;\n\n    @Input() loading: boolean;\n\n    @Input() loadingIcon: string = 'pi pi-spinner';\n\n    @Input() showLoader: boolean = true;\n\n    @Input() rowHover: boolean;\n\n    @Input() customSort: boolean;\n\n    @Input() autoLayout: boolean;\n\n    @Input() exportFunction;\n\n    @Input() stateKey: string;\n\n    @Input() stateStorage: string = 'session';\n\n    @Input() editMode: string = 'cell';\n\n    @Input() minBufferPx: number;\n\n    @Input() maxBufferPx: number;\n\n    @Output() onRowSelect: EventEmitter<any> = new EventEmitter();\n\n    @Output() onRowUnselect: EventEmitter<any> = new EventEmitter();\n\n    @Output() onPage: EventEmitter<any> = new EventEmitter();\n\n    @Output() onSort: EventEmitter<any> = new EventEmitter();\n\n    @Output() onFilter: EventEmitter<any> = new EventEmitter();\n\n    @Output() onLazyLoad: EventEmitter<any> = new EventEmitter();\n\n    @Output() onRowExpand: EventEmitter<any> = new EventEmitter();\n\n    @Output() onRowCollapse: EventEmitter<any> = new EventEmitter();\n\n    @Output() onContextMenuSelect: EventEmitter<any> = new EventEmitter();\n\n    @Output() onColResize: EventEmitter<any> = new EventEmitter();\n\n    @Output() onColReorder: EventEmitter<any> = new EventEmitter();\n\n    @Output() onRowReorder: EventEmitter<any> = new EventEmitter();\n\n    @Output() onEditInit: EventEmitter<any> = new EventEmitter();\n\n    @Output() onEditComplete: EventEmitter<any> = new EventEmitter();\n\n    @Output() onEditCancel: EventEmitter<any> = new EventEmitter();\n\n    @Output() onHeaderCheckboxToggle: EventEmitter<any> = new EventEmitter();\n\n    @Output() sortFunction: EventEmitter<any> = new EventEmitter();\n\n    @Output() firstChange: EventEmitter<number> = new EventEmitter();\n\n    @Output() rowsChange: EventEmitter<number> = new EventEmitter();\n\n    @Output() onStateSave: EventEmitter<any> = new EventEmitter();\n\n    @Output() onStateRestore: EventEmitter<any> = new EventEmitter();\n\n    @ViewChild('container') containerViewChild: ElementRef;\n\n    @ViewChild('resizeHelper') resizeHelperViewChild: ElementRef;\n\n    @ViewChild('reorderIndicatorUp') reorderIndicatorUpViewChild: ElementRef;\n\n    @ViewChild('reorderIndicatorDown') reorderIndicatorDownViewChild: ElementRef;\n\n    @ViewChild('table') tableViewChild: ElementRef;\n\n    @ViewChild('scrollableView') scrollableViewChild;\n\n    @ViewChild('scrollableFrozenView') scrollableFrozenViewChild;\n\n    @ContentChildren(PrimeTemplate) templates: QueryList<PrimeTemplate>;\n\n    _value: any[] = [];\n\n    _columns: any[];\n\n    _totalRecords: number = 0;\n\n    _first: number = 0;\n\n    _rows: number;\n\n    filteredValue: any[];\n\n    headerTemplate: TemplateRef<any>;\n\n    bodyTemplate: TemplateRef<any>;\n\n    loadingBodyTemplate: TemplateRef<any>;\n\n    captionTemplate: TemplateRef<any>;\n\n    frozenRowsTemplate: TemplateRef<any>;\n\n    footerTemplate: TemplateRef<any>;\n\n    summaryTemplate: TemplateRef<any>;\n\n    colGroupTemplate: TemplateRef<any>;\n\n    expandedRowTemplate: TemplateRef<any>;\n\n    frozenHeaderTemplate: TemplateRef<any>;\n\n    frozenBodyTemplate: TemplateRef<any>;\n\n    frozenFooterTemplate: TemplateRef<any>;\n\n    frozenColGroupTemplate: TemplateRef<any>;\n\n    emptyMessageTemplate: TemplateRef<any>;\n\n    paginatorLeftTemplate: TemplateRef<any>;\n\n    paginatorRightTemplate: TemplateRef<any>;\n\n    paginatorDropdownItemTemplate: TemplateRef<any>;\n\n    selectionKeys: any = {};\n\n    lastResizerHelperX: number;\n\n    reorderIconWidth: number;\n\n    reorderIconHeight: number;\n\n    draggedColumn: any;\n\n    draggedRowIndex: number;\n\n    droppedRowIndex: number;\n\n    rowDragging: boolean;\n\n    dropPosition: number;\n\n    editingCell: Element;\n\n    editingCellData: any;\n\n    editingCellField: any;\n\n    editingCellRowIndex: number;\n\n    editingCellClick: boolean;\n\n    documentEditListener: any;\n\n    _multiSortMeta: SortMeta[];\n\n    _sortField: string;\n\n    _sortOrder: number = 1;\n\n    preventSelectionSetterPropagation: boolean;\n\n    _selection: any;\n\n    anchorRowIndex: number;\n\n    rangeRowIndex: number;\n\n    filterTimeout: any;\n\n    initialized: boolean;\n\n    rowTouched: boolean;\n\n    restoringSort: boolean;\n\n    restoringFilter: boolean;\n\n    stateRestored: boolean;\n\n    columnOrderStateRestored: boolean;\n\n    columnWidthsState: string;\n\n    tableWidthState: string;\n\n    constructor(public el: ElementRef, public zone: NgZone, public tableService: TableService, public cd: ChangeDetectorRef) {}\n\n    ngOnInit() {\n        if (this.lazy && this.lazyLoadOnInit) {\n            if (!this.virtualScroll) {\n                this.onLazyLoad.emit(this.createLazyLoadMetadata());\n            }\n            \n            if (this.restoringFilter) {\n                this.restoringFilter = false;\n            }\n        }\n\n        this.initialized = true;\n    }\n\n    ngAfterContentInit() {\n        this.templates.forEach((item) => {\n            switch (item.getType()) {\n                case 'caption':\n                    this.captionTemplate = item.template;\n                break;\n\n                case 'header':\n                    this.headerTemplate = item.template;\n                break;\n\n                case 'body':\n                    this.bodyTemplate = item.template;\n                break;\n\n                case 'loadingbody':\n                    this.loadingBodyTemplate = item.template;\n                break;\n\n                case 'footer':\n                    this.footerTemplate = item.template;\n                break;\n\n                case 'summary':\n                    this.summaryTemplate = item.template;\n                break;\n\n                case 'colgroup':\n                    this.colGroupTemplate = item.template;\n                break;\n\n                case 'rowexpansion':\n                    this.expandedRowTemplate = item.template;\n                break;\n\n                case 'frozenrows':\n                    this.frozenRowsTemplate = item.template;\n                break;\n\n                case 'frozenheader':\n                    this.frozenHeaderTemplate = item.template;\n                break;\n\n                case 'frozenbody':\n                    this.frozenBodyTemplate = item.template;\n                break;\n\n                case 'frozenfooter':\n                    this.frozenFooterTemplate = item.template;\n                break;\n\n                case 'frozencolgroup':\n                    this.frozenColGroupTemplate = item.template;\n                break;\n\n                case 'emptymessage':\n                    this.emptyMessageTemplate = item.template;\n                break;\n\n                case 'paginatorleft':\n                    this.paginatorLeftTemplate = item.template;\n                break;\n\n                case 'paginatorright':\n                    this.paginatorRightTemplate = item.template;\n                break;\n\n                case 'paginatordropdownitem':\n                    this.paginatorDropdownItemTemplate = item.template;\n                break;\n            }\n        });\n    }\n\n    ngAfterViewInit() {\n        if (this.isStateful() && this.resizableColumns) {\n            this.restoreColumnWidths();\n        }\n    }\n\n    ngOnChanges(simpleChange: SimpleChanges) {\n        if (simpleChange.value) {\n            if (this.isStateful() && !this.stateRestored) {\n                this.restoreState();\n            }\n\n            this._value = simpleChange.value.currentValue;\n\n            if (!this.lazy) {\n                this.totalRecords = (this._value ? this._value.length : 0);\n\n                if (this.sortMode == 'single' && this.sortField)\n                    this.sortSingle();\n                else if (this.sortMode == 'multiple' && this.multiSortMeta)\n                    this.sortMultiple();\n                else if (this.hasFilter())       //sort already filters\n                    this._filter();\n            }\n\n            this.tableService.onValueChange(simpleChange.value.currentValue);\n        }\n\n        if (simpleChange.columns) {\n            this._columns = simpleChange.columns.currentValue;\n            this.tableService.onColumnsChange(simpleChange.columns.currentValue);\n\n            if (this._columns && this.isStateful() && this.reorderableColumns && !this.columnOrderStateRestored ) {\n                this.restoreColumnOrder();\n            }\n        }\n\n        if (simpleChange.sortField) {\n            this._sortField = simpleChange.sortField.currentValue;\n\n            //avoid triggering lazy load prior to lazy initialization at onInit\n            if ( !this.lazy || this.initialized ) {\n                if (this.sortMode === 'single') {\n                    this.sortSingle();\n                }\n            }\n        }\n\n        if (simpleChange.sortOrder) {\n            this._sortOrder = simpleChange.sortOrder.currentValue;\n\n            //avoid triggering lazy load prior to lazy initialization at onInit\n            if ( !this.lazy || this.initialized ) {\n                if (this.sortMode === 'single') {\n                    this.sortSingle();\n                }\n            }\n        }\n\n        if (simpleChange.multiSortMeta) {\n            this._multiSortMeta = simpleChange.multiSortMeta.currentValue;\n            if (this.sortMode === 'multiple' && (this.initialized || (!this.lazy && !this.virtualScroll))) {\n                this.sortMultiple();\n            }\n        }\n\n        if (simpleChange.selection) {\n            this._selection = simpleChange.selection.currentValue;\n\n            if (!this.preventSelectionSetterPropagation) {\n                this.updateSelectionKeys();\n                this.tableService.onSelectionChange();\n            }\n            this.preventSelectionSetterPropagation = false;\n        }\n    }\n\n    @Input() get value(): any[] {\n        return this._value;\n    }\n    set value(val: any[]) {\n        this._value = val;\n    }\n\n    @Input() get columns(): any[] {\n        return this._columns;\n    }\n    set columns(cols: any[]) {\n        this._columns = cols;\n    }\n\n    @Input() get first(): number {\n        return this._first;\n    }\n    set first(val: number) {\n        this._first = val;\n    }\n\n    @Input() get rows(): number {\n        return this._rows;\n    }\n    set rows(val: number) {\n        this._rows = val;\n    }\n\n    @Input() get totalRecords(): number {\n        return this._totalRecords;\n    }\n    set totalRecords(val: number) {\n        this._totalRecords = val;\n        this.tableService.onTotalRecordsChange(this._totalRecords);\n    }\n\n    @Input() get sortField(): string {\n        return this._sortField;\n    }\n\n    set sortField(val: string) {\n        this._sortField = val;\n    }\n\n    @Input() get sortOrder(): number {\n        return this._sortOrder;\n    }\n    set sortOrder(val: number) {\n        this._sortOrder = val;\n    }\n\n    @Input() get multiSortMeta(): SortMeta[] {\n        return this._multiSortMeta;\n    }\n\n    set multiSortMeta(val: SortMeta[]) {\n        this._multiSortMeta = val;\n    }\n\n    @Input() get selection(): any {\n        return this._selection;\n    }\n\n    set selection(val: any) {\n        this._selection = val;\n    }\n\n    updateSelectionKeys() {\n        if (this.dataKey && this._selection) {\n            this.selectionKeys = {};\n            if (Array.isArray(this._selection)) {\n                for(let data of this._selection) {\n                    this.selectionKeys[String(ObjectUtils.resolveFieldData(data, this.dataKey))] = 1;\n                }\n            }\n            else {\n                this.selectionKeys[String(ObjectUtils.resolveFieldData(this._selection, this.dataKey))] = 1;\n            }\n        }\n    }\n\n    onPageChange(event) {\n        this.first = event.first;\n        this.rows = event.rows;\n\n        if (this.lazy) {\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\n        }\n\n        this.onPage.emit({\n            first: this.first,\n            rows: this.rows\n        });\n\n        this.firstChange.emit(this.first);\n        this.rowsChange.emit(this.rows);\n        this.tableService.onValueChange(this.value);\n\n        if (this.isStateful()) {\n            this.saveState();\n        }\n\n        this.anchorRowIndex = null;\n\n        if (this.scrollable) {\n            this.resetScrollTop();\n        }\n    }\n\n    sort(event) {\n        let originalEvent = event.originalEvent;\n\n        if (this.sortMode === 'single') {\n            this._sortOrder = (this.sortField === event.field) ? this.sortOrder * -1 : this.defaultSortOrder;\n            this._sortField = event.field;\n\n            if (this.resetPageOnSort) {\n                this._first = 0;\n                this.firstChange.emit(this._first);\n\n                if (this.scrollable) {\n                    this.resetScrollTop();\n                }\n            }\n\n            this.sortSingle();\n        }\n        if (this.sortMode === 'multiple') {\n            let metaKey = originalEvent.metaKey || originalEvent.ctrlKey;\n            let sortMeta = this.getSortMeta(event.field);\n\n            if (sortMeta) {\n                if (!metaKey) {\n                    this._multiSortMeta = [{ field: event.field, order: sortMeta.order * -1 }];\n\n                    if (this.resetPageOnSort) {\n                        this._first = 0;\n                        this.firstChange.emit(this._first);\n                        \n                        if (this.scrollable) {\n                            this.resetScrollTop();\n                        }\n                    }\n                }\n                else {\n                    sortMeta.order = sortMeta.order * -1;\n                }\n            }\n            else {\n                if (!metaKey || !this.multiSortMeta) {\n                    this._multiSortMeta = [];\n\n                    if (this.resetPageOnSort) {\n                        this._first = 0;\n                        this.firstChange.emit(this._first);\n                    }\n                }\n                this._multiSortMeta.push({ field: event.field, order: this.defaultSortOrder });\n            }\n\n            this.sortMultiple();\n        }\n\n        if (this.isStateful()) {\n            this.saveState();\n        }\n\n        this.anchorRowIndex = null;\n    }\n\n    sortSingle() {\n        if (this.sortField && this.sortOrder) {\n            if (this.restoringSort) {\n                this.restoringSort = false;\n            }\n\n            if (this.lazy) {\n                this.onLazyLoad.emit(this.createLazyLoadMetadata());\n            }\n            else if (this.value) {\n                if (this.customSort) {\n                    this.sortFunction.emit({\n                        data: this.value,\n                        mode: this.sortMode,\n                        field: this.sortField,\n                        order: this.sortOrder\n                    });\n                }\n                else {\n                    this.value.sort((data1, data2) => {\n                        let value1 = ObjectUtils.resolveFieldData(data1, this.sortField);\n                        let value2 = ObjectUtils.resolveFieldData(data2, this.sortField);\n                        let result = null;\n\n                        if (value1 == null && value2 != null)\n                            result = -1;\n                        else if (value1 != null && value2 == null)\n                            result = 1;\n                        else if (value1 == null && value2 == null)\n                            result = 0;\n                        else if (typeof value1 === 'string' && typeof value2 === 'string')\n                            result = value1.localeCompare(value2);\n                        else\n                            result = (value1 < value2) ? -1 : (value1 > value2) ? 1 : 0;\n\n                        return (this.sortOrder * result);\n                    });\n                    \n                    this._value = [...this.value];\n                }\n\n                if (this.hasFilter()) {\n                    this._filter();\n                }\n            }\n\n            let sortMeta: SortMeta = {\n                field: this.sortField,\n                order: this.sortOrder\n            };\n\n            this.onSort.emit(sortMeta);\n            this.tableService.onSort(sortMeta);\n        }\n    }\n\n    sortMultiple() {\n        if (this.multiSortMeta) {\n            if (this.lazy) {\n                this.onLazyLoad.emit(this.createLazyLoadMetadata());\n            }\n            else if (this.value) {\n                if (this.customSort) {\n                    this.sortFunction.emit({\n                        data: this.value,\n                        mode: this.sortMode,\n                        multiSortMeta: this.multiSortMeta\n                    });\n                }\n                else {\n                    this.value.sort((data1, data2) => {\n                        return this.multisortField(data1, data2, this.multiSortMeta, 0);\n                    });\n\n                    this._value = [...this.value];\n                }\n\n                if (this.hasFilter()) {\n                    this._filter();\n                }\n            }\n\n            this.onSort.emit({\n                multisortmeta: this.multiSortMeta\n            });\n            this.tableService.onSort(this.multiSortMeta);\n        }\n    }\n\n    multisortField(data1, data2, multiSortMeta, index) {\n        let value1 = ObjectUtils.resolveFieldData(data1, multiSortMeta[index].field);\n        let value2 = ObjectUtils.resolveFieldData(data2, multiSortMeta[index].field);\n        let result = null;\n\n        if (value1 == null && value2 != null)\n            result = -1;\n        else if (value1 != null && value2 == null)\n            result = 1;\n        else if (value1 == null && value2 == null)\n            result = 0;\n        else if (typeof value1 == 'string' || value1 instanceof String) {\n            if (value1.localeCompare && (value1 != value2)) {\n                return (multiSortMeta[index].order * value1.localeCompare(value2));\n            }\n        }\n        else {\n            result = (value1 < value2) ? -1 : 1;\n        }\n\n        if (value1 == value2) {\n            return (multiSortMeta.length - 1) > (index) ? (this.multisortField(data1, data2, multiSortMeta, index + 1)) : 0;\n        }\n\n        return (multiSortMeta[index].order * result);\n    }\n\n    getSortMeta(field: string) {\n        if (this.multiSortMeta && this.multiSortMeta.length) {\n            for (let i = 0; i < this.multiSortMeta.length; i++) {\n                if (this.multiSortMeta[i].field === field) {\n                    return this.multiSortMeta[i];\n                }\n            }\n        }\n\n        return null;\n    }\n\n    isSorted(field: string) {\n        if (this.sortMode === 'single') {\n            return (this.sortField && this.sortField === field);\n        }\n        else if (this.sortMode === 'multiple') {\n            let sorted = false;\n            if (this.multiSortMeta) {\n                for(let i = 0; i < this.multiSortMeta.length; i++) {\n                    if (this.multiSortMeta[i].field == field) {\n                        sorted = true;\n                        break;\n                    }\n                }\n            }\n            return sorted;\n        }\n    }\n\n    handleRowClick(event) {\n        let target = (<HTMLElement> event.originalEvent.target);\n        let targetNode = target.nodeName;\n        let parentNode = target.parentElement && target.parentElement.nodeName;\n        if (targetNode == 'INPUT' || targetNode == 'BUTTON' || targetNode == 'A' ||\n            parentNode == 'INPUT' || parentNode == 'BUTTON' || parentNode == 'A' ||\n            (DomHandler.hasClass(event.originalEvent.target, 'ui-clickable'))) {\n            return;\n        }\n\n        if (this.selectionMode) {\n            this.preventSelectionSetterPropagation = true;\n            if (this.isMultipleSelectionMode() && event.originalEvent.shiftKey && this.anchorRowIndex != null) {\n                DomHandler.clearSelection();\n                if (this.rangeRowIndex != null) {\n                    this.clearSelectionRange(event.originalEvent);\n                }\n\n                this.rangeRowIndex = event.rowIndex;\n                this.selectRange(event.originalEvent, event.rowIndex);\n            }\n            else {\n                let rowData = event.rowData;\n                let selected = this.isSelected(rowData);\n                let metaSelection = this.rowTouched ? false : this.metaKeySelection;\n                let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(rowData, this.dataKey)) : null;\n                this.anchorRowIndex = event.rowIndex;\n                this.rangeRowIndex = event.rowIndex;\n\n                if (metaSelection) {\n                    let metaKey = event.originalEvent.metaKey||event.originalEvent.ctrlKey;\n\n                    if (selected && metaKey) {\n                        if (this.isSingleSelectionMode()) {\n                            this._selection = null;\n                            this.selectionKeys = {};\n                            this.selectionChange.emit(null);\n                        }\n                        else {\n                            let selectionIndex = this.findIndexInSelection(rowData);\n                            this._selection = this.selection.filter((val,i) => i!=selectionIndex);\n                            this.selectionChange.emit(this.selection);\n                            if (dataKeyValue) {\n                                delete this.selectionKeys[dataKeyValue];\n                            }\n                        }\n\n                        this.onRowUnselect.emit({originalEvent: event.originalEvent, data: rowData, type: 'row'});\n                    }\n                    else {\n                        if (this.isSingleSelectionMode()) {\n                            this._selection = rowData;\n                            this.selectionChange.emit(rowData);\n                            if (dataKeyValue) {\n                                this.selectionKeys = {};\n                                this.selectionKeys[dataKeyValue] = 1;\n                            }\n                        }\n                        else if (this.isMultipleSelectionMode()) {\n                            if (metaKey) {\n                                this._selection = this.selection||[];\n                            }\n                            else {\n                                this._selection = [];\n                                this.selectionKeys = {};\n                            }\n\n                            this._selection = [...this.selection,rowData];\n                            this.selectionChange.emit(this.selection);\n                            if (dataKeyValue) {\n                                this.selectionKeys[dataKeyValue] = 1;\n                            }\n                        }\n\n                        this.onRowSelect.emit({originalEvent: event.originalEvent, data: rowData, type: 'row', index: event.rowIndex});\n                    }\n                }\n                else {\n                    if (this.selectionMode === 'single') {\n                        if (selected) {\n                            this._selection = null;\n                            this.selectionKeys = {};\n                            this.selectionChange.emit(this.selection);\n                            this.onRowUnselect.emit({ originalEvent: event.originalEvent, data: rowData, type: 'row', index: event.rowIndex });\n                        }\n                        else {\n                            this._selection = rowData;\n                            this.selectionChange.emit(this.selection);\n                            this.onRowSelect.emit({ originalEvent: event.originalEvent, data: rowData, type: 'row', index: event.rowIndex });\n                            if (dataKeyValue) {\n                                this.selectionKeys = {};\n                                this.selectionKeys[dataKeyValue] = 1;\n                            }\n                        }\n                    }\n                    else if (this.selectionMode === 'multiple') {\n                        if (selected) {\n                            let selectionIndex = this.findIndexInSelection(rowData);\n                            this._selection = this.selection.filter((val, i) => i != selectionIndex);\n                            this.selectionChange.emit(this.selection);\n                            this.onRowUnselect.emit({ originalEvent: event.originalEvent, data: rowData, type: 'row', index: event.rowIndex });\n                            if (dataKeyValue) {\n                                delete this.selectionKeys[dataKeyValue];\n                            }\n                        }\n                        else {\n                            this._selection = this.selection ? [...this.selection, rowData] : [rowData];\n                            this.selectionChange.emit(this.selection);\n                            this.onRowSelect.emit({ originalEvent: event.originalEvent, data: rowData, type: 'row', index: event.rowIndex });\n                            if (dataKeyValue) {\n                                this.selectionKeys[dataKeyValue] = 1;\n                            }\n                        }\n                    }\n                }\n            }\n\n            this.tableService.onSelectionChange();\n\n            if (this.isStateful()) {\n                this.saveState();\n            }\n        }\n\n        this.rowTouched = false;\n    }\n\n    handleRowTouchEnd(event) {\n        this.rowTouched = true;\n    }\n\n    handleRowRightClick(event) {\n        if (this.contextMenu) {\n            const rowData = event.rowData;\n\n            if (this.contextMenuSelectionMode === 'separate') {\n                this.contextMenuSelection = rowData;\n                this.contextMenuSelectionChange.emit(rowData);\n                this.onContextMenuSelect.emit({originalEvent: event.originalEvent, data: rowData, index: event.rowIndex});\n                this.contextMenu.show(event.originalEvent);\n                this.tableService.onContextMenu(rowData);\n            }\n            else if (this.contextMenuSelectionMode === 'joint') {\n                this.preventSelectionSetterPropagation = true;\n                let selected = this.isSelected(rowData);\n                let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(rowData, this.dataKey)) : null;\n\n                if (!selected) {\n                    if (this.isSingleSelectionMode()) {\n                        this.selection = rowData;\n                        this.selectionChange.emit(rowData);\n\n                        if (dataKeyValue) {\n                            this.selectionKeys = {};\n                            this.selectionKeys[dataKeyValue] = 1;\n                        }\n                    }\n                    else if (this.isMultipleSelectionMode()) {\n                        this._selection = this.selection ? [...this.selection, rowData] : [rowData];\n                        this.selectionChange.emit(this.selection);\n                        \n                        if (dataKeyValue) {\n                            this.selectionKeys[dataKeyValue] = 1;\n                        }\n                    }\n                }\n\n                this.tableService.onSelectionChange();\n                this.contextMenu.show(event.originalEvent);\n                this.onContextMenuSelect.emit({originalEvent: event, data: rowData, index: event.rowIndex});\n            }\n        }\n    }\n\n    selectRange(event: MouseEvent, rowIndex: number) {\n        let rangeStart, rangeEnd;\n\n        if (this.anchorRowIndex > rowIndex) {\n            rangeStart = rowIndex;\n            rangeEnd = this.anchorRowIndex;\n        }\n        else if (this.anchorRowIndex < rowIndex) {\n            rangeStart = this.anchorRowIndex;\n            rangeEnd = rowIndex;\n        }\n        else {\n            rangeStart = rowIndex;\n            rangeEnd = rowIndex;\n        }\n\n        if (this.lazy && this.paginator) {\n            rangeStart -= this.first;\n            rangeEnd -= this.first;\n        }\n\n        let rangeRowsData = [];\n        for(let i = rangeStart; i <= rangeEnd; i++) {\n            let rangeRowData = this.filteredValue ? this.filteredValue[i] : this.value[i];\n            if (!this.isSelected(rangeRowData)) {\n                rangeRowsData.push(rangeRowData);\n                this._selection = [...this.selection, rangeRowData];\n                let dataKeyValue: string = this.dataKey ? String(ObjectUtils.resolveFieldData(rangeRowData, this.dataKey)) : null;\n                if (dataKeyValue) {\n                    this.selectionKeys[dataKeyValue] = 1;\n                }\n            }\n        }\n\n        this.selectionChange.emit(this.selection);\n        this.onRowSelect.emit({originalEvent: event, data: rangeRowsData, type: 'row'});\n    }\n\n    clearSelectionRange(event: MouseEvent) {\n        let rangeStart, rangeEnd;\n\n        if (this.rangeRowIndex > this.anchorRowIndex) {\n            rangeStart = this.anchorRowIndex;\n            rangeEnd = this.rangeRowIndex;\n        }\n        else if (this.rangeRowIndex < this.anchorRowIndex) {\n            rangeStart = this.rangeRowIndex;\n            rangeEnd = this.anchorRowIndex;\n        }\n        else {\n            rangeStart = this.rangeRowIndex;\n            rangeEnd = this.rangeRowIndex;\n        }\n\n        for(let i = rangeStart; i <= rangeEnd; i++) {\n            let rangeRowData = this.value[i];\n            let selectionIndex = this.findIndexInSelection(rangeRowData);\n            this._selection = this.selection.filter((val,i) => i!=selectionIndex);\n            let dataKeyValue: string = this.dataKey ? String(ObjectUtils.resolveFieldData(rangeRowData, this.dataKey)) : null;\n            if (dataKeyValue) {\n                delete this.selectionKeys[dataKeyValue];\n            }\n            this.onRowUnselect.emit({originalEvent: event, data: rangeRowData, type: 'row'});\n        }\n    }\n\n    isSelected(rowData) {\n        if (rowData && this.selection) {\n            if (this.dataKey) {\n                return this.selectionKeys[ObjectUtils.resolveFieldData(rowData, this.dataKey)] !== undefined;\n            }\n            else {\n                if (this.selection instanceof Array)\n                    return this.findIndexInSelection(rowData) > -1;\n                else\n                    return this.equals(rowData, this.selection);\n            }\n        }\n\n        return false;\n    }\n\n    findIndexInSelection(rowData: any) {\n        let index: number = -1;\n        if (this.selection && this.selection.length) {\n            for (let i = 0; i < this.selection.length; i++) {\n                if (this.equals(rowData, this.selection[i])) {\n                    index = i;\n                    break;\n                }\n            }\n        }\n\n        return index;\n    }\n\n    toggleRowWithRadio(event: any, rowData:any) {\n        this.preventSelectionSetterPropagation = true;\n\n        if (this.selection != rowData) {\n            this._selection = rowData;\n            this.selectionChange.emit(this.selection);\n            this.onRowSelect.emit({originalEvent: event.originalEvent, index: event.rowIndex, data: rowData, type: 'radiobutton'});\n\n            if (this.dataKey) {\n                this.selectionKeys = {};\n                this.selectionKeys[String(ObjectUtils.resolveFieldData(rowData, this.dataKey))] = 1;\n            }\n        }\n        else {\n            this._selection = null;\n            this.selectionChange.emit(this.selection);\n            this.onRowUnselect.emit({originalEvent: event.originalEvent, index: event.rowIndex, data: rowData, type: 'radiobutton'});\n        }\n\n        this.tableService.onSelectionChange();\n\n        if (this.isStateful()) {\n            this.saveState();\n        }\n    }\n\n    toggleRowWithCheckbox(event, rowData: any) {\n        this.selection = this.selection||[];\n        let selected = this.isSelected(rowData);\n        let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(rowData, this.dataKey)) : null;\n        this.preventSelectionSetterPropagation = true;\n\n        if (selected) {\n            let selectionIndex = this.findIndexInSelection(rowData);\n            this._selection = this.selection.filter((val, i) => i != selectionIndex);\n            this.selectionChange.emit(this.selection);\n            this.onRowUnselect.emit({ originalEvent: event.originalEvent, index: event.rowIndex, data: rowData, type: 'checkbox' });\n            if (dataKeyValue) {\n                delete this.selectionKeys[dataKeyValue];\n            }\n        }\n        else {\n            this._selection = this.selection ? [...this.selection, rowData] : [rowData];\n            this.selectionChange.emit(this.selection);\n            this.onRowSelect.emit({ originalEvent: event.originalEvent, index: event.rowIndex, data: rowData, type: 'checkbox' });\n            if (dataKeyValue) {\n                this.selectionKeys[dataKeyValue] = 1;\n            }\n        }\n\n        this.tableService.onSelectionChange();\n\n        if (this.isStateful()) {\n            this.saveState();\n        }\n    }\n\n    toggleRowsWithCheckbox(event: Event, check: boolean) {\n        this._selection = check ? this.filteredValue ? this.filteredValue.slice(): this.value.slice() : [];\n        this.preventSelectionSetterPropagation = true;\n        this.updateSelectionKeys();\n        this.selectionChange.emit(this._selection);\n        this.tableService.onSelectionChange();\n        this.onHeaderCheckboxToggle.emit({originalEvent: event, checked: check});\n\n        if (this.isStateful()) {\n            this.saveState();\n        }\n    }\n\n    equals(data1, data2) {\n        return this.compareSelectionBy === 'equals' ? (data1 === data2) : ObjectUtils.equals(data1, data2, this.dataKey);\n    }\n\n    filter(value, field, matchMode) {\n        if (this.filterTimeout) {\n            clearTimeout(this.filterTimeout);\n        }\n\n        if (!this.isFilterBlank(value)) {\n            this.filters[field] = { value: value, matchMode: matchMode };\n        } else if (this.filters[field]) {\n            delete this.filters[field];\n        }\n\n        this.filterTimeout = setTimeout(() => {\n            this._filter();\n            this.filterTimeout = null;\n        }, this.filterDelay);\n\n        this.anchorRowIndex = null;\n    }\n\n    filterGlobal(value, matchMode) {\n        this.filter(value, 'global', matchMode);\n    }\n\n    isFilterBlank(filter: any): boolean {\n        if (filter !== null && filter !== undefined) {\n            if ((typeof filter === 'string' && filter.trim().length == 0) || (filter instanceof Array && filter.length == 0))\n                return true;\n            else\n                return false;\n        }\n        return true;\n    }\n\n    _filter() {\n        if (!this.restoringFilter) {\n            this.first = 0;\n            this.firstChange.emit(this.first);\n        }\n\n        if (this.lazy) {\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\n        }\n        else {\n            if (!this.value) {\n                return;\n            }\n\n            if (!this.hasFilter()) {\n                this.filteredValue = null;\n                if (this.paginator) {\n                    this.totalRecords = this.value ? this.value.length : 0;\n                }\n            }\n            else {\n                let globalFilterFieldsArray;\n                if (this.filters['global']) {\n                    if (!this.columns && !this.globalFilterFields)\n                        throw new Error('Global filtering requires dynamic columns or globalFilterFields to be defined.');\n                    else\n                        globalFilterFieldsArray = this.globalFilterFields||this.columns;\n                }\n\n                this.filteredValue = [];\n\n                for (let i = 0; i < this.value.length; i++) {\n                    let localMatch = true;\n                    let globalMatch = false;\n                    let localFiltered = false;\n\n                    for (let prop in this.filters) {\n                        if (this.filters.hasOwnProperty(prop) && prop !== 'global') {\n                            localFiltered = true;\n                            let filterMeta = this.filters[prop];\n                            let filterField = prop;\n                            let filterValue = filterMeta.value;\n                            let filterMatchMode = filterMeta.matchMode || 'startsWith';\n                            let dataFieldValue = ObjectUtils.resolveFieldData(this.value[i], filterField);\n                            let filterConstraint = FilterUtils[filterMatchMode];\n\n                            if (!filterConstraint(dataFieldValue, filterValue, this.filterLocale)) {\n                                localMatch = false;\n                            }\n\n                            if (!localMatch) {\n                                break;\n                            }\n                        }\n                    }\n\n                    if (this.filters['global'] && !globalMatch && globalFilterFieldsArray) {\n                        for(let j = 0; j < globalFilterFieldsArray.length; j++) {\n                            let globalFilterField = globalFilterFieldsArray[j].field||globalFilterFieldsArray[j];\n                            globalMatch = FilterUtils[this.filters['global'].matchMode](ObjectUtils.resolveFieldData(this.value[i], globalFilterField), this.filters['global'].value, this.filterLocale);\n\n                            if (globalMatch) {\n                                break;\n                            }\n                        }\n                    }\n\n                    let matches: boolean;\n                    if (this.filters['global']) {\n                        matches = localFiltered ? (localFiltered && localMatch && globalMatch) : globalMatch;\n                    }\n                    else {\n                        matches = localFiltered && localMatch;\n                    }\n\n                    if (matches) {\n                        this.filteredValue.push(this.value[i]);\n                    }\n                }\n\n                if (this.filteredValue.length === this.value.length) {\n                    this.filteredValue = null;\n                }\n\n                if (this.paginator) {\n                    this.totalRecords = this.filteredValue ? this.filteredValue.length : this.value ? this.value.length : 0;\n                }\n            }\n        }\n\n        this.onFilter.emit({\n            filters: this.filters,\n            filteredValue: this.filteredValue || this.value\n        });\n\n        this.tableService.onValueChange(this.value);\n\n        if (this.isStateful() && !this.restoringFilter) {\n            this.saveState();\n        }\n\n        if (this.restoringFilter) {\n            this.restoringFilter = false;\n        }\n\n        this.cd.markForCheck();\n\n        if (this.scrollable) {\n            this.resetScrollTop();\n        }\n    }\n\n    hasFilter() {\n        let empty = true;\n        for (let prop in this.filters) {\n            if (this.filters.hasOwnProperty(prop)) {\n                empty = false;\n                break;\n            }\n        }\n\n        return !empty;\n    }\n\n    createLazyLoadMetadata(): any {\n        return {\n            first: this.first,\n            rows: this.rows,\n            sortField: this.sortField,\n            sortOrder: this.sortOrder,\n            filters: this.filters,\n            globalFilter: this.filters && this.filters['global'] ? this.filters['global'].value : null,\n            multiSortMeta: this.multiSortMeta\n        };\n    }\n\n    public reset() {\n        this._sortField = null;\n        this._sortOrder = this.defaultSortOrder;\n        this._multiSortMeta = null;\n        this.tableService.onSort(null);\n\n        this.filteredValue = null;\n        this.filters = {};\n\n        this.first = 0;\n        this.firstChange.emit(this.first);\n\n        if (this.lazy) {\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\n        }\n        else {\n            this.totalRecords = (this._value ? this._value.length : 0);\n        }\n    }\n\n    public exportCSV(options?: any) {\n        let data;\n        let csv = '';\n        let columns = this.frozenColumns ? [...this.frozenColumns, ...this.columns] : this.columns;\n\n        if (options && options.selectionOnly) {\n            data = this.selection || [];\n        }\n        else {\n            data = this.filteredValue || this.value;\n\n            if (this.frozenValue) {\n                data = data ? [...this.frozenValue, ...data] : this.frozenValue;\n            }\n        }\n\n        //headers\n        for (let i = 0; i < columns.length; i++) {\n            let column = columns[i];\n            if (column.exportable !== false && column.field) {\n                csv += '\"' + (column.header || column.field) + '\"';\n\n                if (i < (columns.length - 1)) {\n                    csv += this.csvSeparator;\n                }\n            }\n        }\n\n        //body\n        data.forEach((record, i) => {\n            csv += '\\n';\n            for (let i = 0; i < columns.length; i++) {\n                let column = columns[i];\n                if (column.exportable !== false && column.field) {\n                    let cellData = ObjectUtils.resolveFieldData(record, column.field);\n\n                    if (cellData != null) {\n                        if (this.exportFunction) {\n                            cellData = this.exportFunction({\n                                data: cellData,\n                                field: column.field\n                            });\n                        }\n                        else\n                            cellData = String(cellData).replace(/\"/g, '\"\"');\n                    }\n                    else\n                        cellData = '';\n\n                    csv += '\"' + cellData + '\"';\n\n                    if (i < (columns.length - 1)) {\n                        csv += this.csvSeparator;\n                    }\n                }\n            }\n        });\n\n        let blob = new Blob([csv], {\n            type: 'text/csv;charset=utf-8;'\n        });\n\n        if (window.navigator.msSaveOrOpenBlob) {\n            navigator.msSaveOrOpenBlob(blob, this.exportFilename + '.csv');\n        }\n        else {\n            let link = document.createElement(\"a\");\n            link.style.display = 'none';\n            document.body.appendChild(link);\n            if (link.download !== undefined) {\n                link.setAttribute('href', URL.createObjectURL(blob));\n                link.setAttribute('download', this.exportFilename + '.csv');\n                link.click();\n            }\n            else {\n                csv = 'data:text/csv;charset=utf-8,' + csv;\n                window.open(encodeURI(csv));\n            }\n            document.body.removeChild(link);\n        }\n    }\n\n    public resetScrollTop() {\n        if (this.virtualScroll)\n            this.scrollToVirtualIndex(0);\n        else\n            this.scrollTo({top: 0});\n    }\n\n    public scrollToVirtualIndex(index: number) {\n        if (this.scrollableViewChild) {\n            this.scrollableViewChild.scrollToVirtualIndex(index);\n        }\n\n        if (this.scrollableFrozenViewChild) {\n            this.scrollableFrozenViewChild.scrollToVirtualIndex(index);\n        }\n    }\n\n    public scrollTo(options) {\n        if (this.scrollableViewChild) {\n            this.scrollableViewChild.scrollTo(options);\n        }\n\n        if (this.scrollableFrozenViewChild) {\n            this.scrollableFrozenViewChild.scrollTo(options);\n        }\n    }\n\n    updateEditingCell(cell, data, field, index) {\n        this.editingCell = cell;\n        this.editingCellData = data;\n        this.editingCellField = field;\n        this.editingCellRowIndex = index;\n        this.bindDocumentEditListener();\n    }\n\n    isEditingCellValid() {\n        return (this.editingCell && DomHandler.find(this.editingCell, '.ng-invalid.ng-dirty').length === 0);\n    }\n\n    bindDocumentEditListener() {\n        if (!this.documentEditListener) {\n            this.documentEditListener = (event) => {\n                if (this.editingCell && !this.editingCellClick && this.isEditingCellValid()) {\n                    DomHandler.removeClass(this.editingCell, 'ui-editing-cell');\n                    this.editingCell = null;\n                    this.onEditComplete.emit({ field: this.editingCellField, data: this.editingCellData, originalEvent: event, index: this.editingCellRowIndex });\n                    this.editingCellField = null;\n                    this.editingCellData = null;\n                    this.editingCellRowIndex = null;\n                    this.unbindDocumentEditListener();\n                    this.cd.markForCheck();\n                }\n\n                this.editingCellClick = false;\n            };\n\n            document.addEventListener('click', this.documentEditListener);\n        }\n    }\n\n    unbindDocumentEditListener() {\n        if (this.documentEditListener) {\n            document.removeEventListener('click', this.documentEditListener);\n            this.documentEditListener = null;\n        }\n    }\n\n    initRowEdit(rowData: any) {\n        let dataKeyValue = String(ObjectUtils.resolveFieldData(rowData, this.dataKey));\n        this.editingRowKeys[dataKeyValue] = true;\n    }\n\n    saveRowEdit(rowData: any, rowElement: HTMLTableRowElement) {\n        if (DomHandler.find(rowElement, '.ng-invalid.ng-dirty').length === 0) {\n            let dataKeyValue = String(ObjectUtils.resolveFieldData(rowData, this.dataKey));\n            delete this.editingRowKeys[dataKeyValue];\n        }\n    }\n\n    cancelRowEdit(rowData: any) {\n        let dataKeyValue = String(ObjectUtils.resolveFieldData(rowData, this.dataKey));\n        delete this.editingRowKeys[dataKeyValue];\n    }\n\n    toggleRow(rowData: any, event?: Event) {\n        if (!this.dataKey) {\n            throw new Error('dataKey must be defined to use row expansion');\n        }\n\n        let dataKeyValue = String(ObjectUtils.resolveFieldData(rowData, this.dataKey));\n\n        if (this.expandedRowKeys[dataKeyValue] != null) {\n            delete this.expandedRowKeys[dataKeyValue];\n            this.onRowCollapse.emit({\n                originalEvent: event,\n                data: rowData\n            });\n        }\n        else {\n            if (this.rowExpandMode === 'single') {\n                this.expandedRowKeys = {};\n            }\n\n            this.expandedRowKeys[dataKeyValue] = true;\n            this.onRowExpand.emit({\n                originalEvent: event,\n                data: rowData\n            });\n        }\n\n        if (event) {\n            event.preventDefault();\n        }\n\n        if (this.isStateful()) {\n            this.saveState();\n        }\n    }\n\n    isRowExpanded(rowData: any): boolean {\n        return this.expandedRowKeys[String(ObjectUtils.resolveFieldData(rowData, this.dataKey))] === true;\n    }\n\n    isRowEditing(rowData: any): boolean {\n        return this.editingRowKeys[String(ObjectUtils.resolveFieldData(rowData, this.dataKey))] === true;\n    }\n\n    isSingleSelectionMode() {\n        return this.selectionMode === 'single';\n    }\n\n    isMultipleSelectionMode() {\n        return this.selectionMode === 'multiple';\n    }\n\n    onColumnResizeBegin(event) {\n        let containerLeft = DomHandler.getOffset(this.containerViewChild.nativeElement).left;\n        this.lastResizerHelperX = (event.pageX - containerLeft + this.containerViewChild.nativeElement.scrollLeft);\n        this.onColumnResize(event);\n        event.preventDefault();\n    }\n\n    onColumnResize(event) {\n        let containerLeft = DomHandler.getOffset(this.containerViewChild.nativeElement).left;\n        DomHandler.addClass(this.containerViewChild.nativeElement, 'ui-unselectable-text');\n        this.resizeHelperViewChild.nativeElement.style.height = this.containerViewChild.nativeElement.offsetHeight + 'px';\n        this.resizeHelperViewChild.nativeElement.style.top = 0 + 'px';\n        this.resizeHelperViewChild.nativeElement.style.left = (event.pageX - containerLeft + this.containerViewChild.nativeElement.scrollLeft) + 'px';\n\n        this.resizeHelperViewChild.nativeElement.style.display = 'block';\n    }\n\n    onColumnResizeEnd(event, column) {\n        let delta = this.resizeHelperViewChild.nativeElement.offsetLeft - this.lastResizerHelperX;\n        let columnWidth = column.offsetWidth;\n        let minWidth = parseInt(column.style.minWidth || 15);\n\n        if (columnWidth + delta < minWidth) {\n            delta = minWidth - columnWidth;\n        }\n\n        const newColumnWidth = columnWidth + delta;\n\n        if (newColumnWidth >= minWidth) {\n            if (this.columnResizeMode === 'fit') {\n                let nextColumn = column.nextElementSibling;\n                while (!nextColumn.offsetParent) {\n                    nextColumn = nextColumn.nextElementSibling;\n                }\n\n                if (nextColumn) {\n                    let nextColumnWidth = nextColumn.offsetWidth - delta;\n                    let nextColumnMinWidth = nextColumn.style.minWidth || 15;\n\n                    if (newColumnWidth > 15 && nextColumnWidth > parseInt(nextColumnMinWidth)) {\n                        if (this.scrollable) {\n                            let scrollableView = this.findParentScrollableView(column);\n                            let scrollableBodyTable = DomHandler.findSingle(scrollableView, '.ui-table-scrollable-body table') || DomHandler.findSingle(scrollableView, 'cdk-virtual-scroll-viewport table');\n                            let scrollableHeaderTable = DomHandler.findSingle(scrollableView, 'table.ui-table-scrollable-header-table');\n                            let scrollableFooterTable = DomHandler.findSingle(scrollableView, 'table.ui-table-scrollable-footer-table');\n                            let resizeColumnIndex = DomHandler.index(column);\n\n                            this.resizeColGroup(scrollableHeaderTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\n                            this.resizeColGroup(scrollableBodyTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\n                            this.resizeColGroup(scrollableFooterTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\n                        }\n                        else {\n                            column.style.width = newColumnWidth + 'px';\n                            if (nextColumn) {\n                                nextColumn.style.width = nextColumnWidth + 'px';\n                            }\n                        }\n                    }\n                }\n            }\n            else if (this.columnResizeMode === 'expand') {\n                if (newColumnWidth >= minWidth) {\n                    if (this.scrollable) {\n                        this.setScrollableItemsWidthOnExpandResize(column, newColumnWidth, delta);\n                    }\n                    else {\n                        this.tableViewChild.nativeElement.style.width = this.tableViewChild.nativeElement.offsetWidth + delta + 'px';\n                        column.style.width = newColumnWidth + 'px';\n                        let containerWidth = this.tableViewChild.nativeElement.style.width;\n                        this.containerViewChild.nativeElement.style.width = containerWidth + 'px';\n                    }\n                }\n            }\n\n            this.onColResize.emit({\n                element: column,\n                delta: delta\n            });\n\n            if (this.isStateful()) {\n                this.saveState();\n            }\n        }\n\n        this.resizeHelperViewChild.nativeElement.style.display = 'none';\n        DomHandler.removeClass(this.containerViewChild.nativeElement, 'ui-unselectable-text');\n    }\n\n    setScrollableItemsWidthOnExpandResize(column, newColumnWidth, delta) {\n        let scrollableView = column ? this.findParentScrollableView(column) : this.containerViewChild.nativeElement;\n        let scrollableBody = DomHandler.findSingle(scrollableView, '.ui-table-scrollable-body') || DomHandler.findSingle(scrollableView, 'cdk-virtual-scroll-viewport');\n        let scrollableHeader = DomHandler.findSingle(scrollableView, '.ui-table-scrollable-header');\n        let scrollableFooter = DomHandler.findSingle(scrollableView, '.ui-table-scrollable-footer');\n        let scrollableBodyTable = DomHandler.findSingle(scrollableBody, '.ui-table-scrollable-body table') || DomHandler.findSingle(scrollableView, 'cdk-virtual-scroll-viewport table');\n        let scrollableHeaderTable = DomHandler.findSingle(scrollableHeader, 'table.ui-table-scrollable-header-table');\n        let scrollableFooterTable = DomHandler.findSingle(scrollableFooter, 'table.ui-table-scrollable-footer-table');\n\n        const scrollableBodyTableWidth = column ? scrollableBodyTable.offsetWidth + delta : newColumnWidth;\n        const scrollableHeaderTableWidth = column ? scrollableHeaderTable.offsetWidth + delta : newColumnWidth;\n        const isContainerInViewport = this.containerViewChild.nativeElement.offsetWidth >= scrollableBodyTableWidth;\n\n        let setWidth = (container, table, width, isContainerInViewport) => {\n            if (container && table) {\n                container.style.width = isContainerInViewport ? width + DomHandler.calculateScrollbarWidth(scrollableBody) + 'px' : 'auto'\n                table.style.width = width + 'px';\n            }\n        };\n\n        setWidth(scrollableBody, scrollableBodyTable, scrollableBodyTableWidth, isContainerInViewport);\n        setWidth(scrollableHeader, scrollableHeaderTable, scrollableHeaderTableWidth, isContainerInViewport);\n        setWidth(scrollableFooter, scrollableFooterTable, scrollableHeaderTableWidth, isContainerInViewport);\n\n        if (column) {\n            let resizeColumnIndex = DomHandler.index(column);\n\n            this.resizeColGroup(scrollableHeaderTable, resizeColumnIndex, newColumnWidth, null);\n            this.resizeColGroup(scrollableBodyTable, resizeColumnIndex, newColumnWidth, null);\n            this.resizeColGroup(scrollableFooterTable, resizeColumnIndex, newColumnWidth, null);\n        }\n    }\n\n    findParentScrollableView(column) {\n        if (column) {\n            let parent = column.parentElement;\n            while (parent && !DomHandler.hasClass(parent, 'ui-table-scrollable-view')) {\n                parent = parent.parentElement;\n            }\n\n            return parent;\n        }\n        else {\n            return null;\n        }\n    }\n\n    resizeColGroup(table, resizeColumnIndex, newColumnWidth, nextColumnWidth) {\n        if (table) {\n            let colGroup = table.children[0].nodeName === 'COLGROUP' ? table.children[0] : null;\n\n            if (colGroup) {\n                let col = colGroup.children[resizeColumnIndex];\n                let nextCol = col.nextElementSibling;\n                col.style.width = newColumnWidth + 'px';\n\n                if (nextCol && nextColumnWidth) {\n                    nextCol.style.width = nextColumnWidth + 'px';\n                }\n            }\n            else {\n                throw \"Scrollable tables require a colgroup to support resizable columns\";\n            }\n        }\n    }\n\n    onColumnDragStart(event, columnElement) {\n        this.reorderIconWidth = DomHandler.getHiddenElementOuterWidth(this.reorderIndicatorUpViewChild.nativeElement);\n        this.reorderIconHeight = DomHandler.getHiddenElementOuterHeight(this.reorderIndicatorDownViewChild.nativeElement);\n        this.draggedColumn = columnElement;\n        event.dataTransfer.setData('text', 'b');    // For firefox\n    }\n\n    onColumnDragEnter(event, dropHeader) {\n        if (this.reorderableColumns && this.draggedColumn && dropHeader) {\n            event.preventDefault();\n            let containerOffset = DomHandler.getOffset(this.containerViewChild.nativeElement);\n            let dropHeaderOffset = DomHandler.getOffset(dropHeader);\n\n            if (this.draggedColumn != dropHeader) {\n                let dragIndex = DomHandler.indexWithinGroup(this.draggedColumn, 'preorderablecolumn');\n                let dropIndex = DomHandler.indexWithinGroup(dropHeader, 'preorderablecolumn');\n                let targetLeft = dropHeaderOffset.left - containerOffset.left;\n                let targetTop = containerOffset.top - dropHeaderOffset.top;\n                let columnCenter = dropHeaderOffset.left + dropHeader.offsetWidth / 2;\n\n                this.reorderIndicatorUpViewChild.nativeElement.style.top = dropHeaderOffset.top - containerOffset.top - (this.reorderIconHeight - 1) + 'px';\n                this.reorderIndicatorDownViewChild.nativeElement.style.top = dropHeaderOffset.top - containerOffset.top + dropHeader.offsetHeight + 'px';\n\n                if (event.pageX > columnCenter) {\n                    this.reorderIndicatorUpViewChild.nativeElement.style.left = (targetLeft + dropHeader.offsetWidth - Math.ceil(this.reorderIconWidth / 2)) + 'px';\n                    this.reorderIndicatorDownViewChild.nativeElement.style.left = (targetLeft + dropHeader.offsetWidth - Math.ceil(this.reorderIconWidth / 2)) + 'px';\n                    this.dropPosition = 1;\n                }\n                else {\n                    this.reorderIndicatorUpViewChild.nativeElement.style.left = (targetLeft - Math.ceil(this.reorderIconWidth / 2)) + 'px';\n                    this.reorderIndicatorDownViewChild.nativeElement.style.left = (targetLeft - Math.ceil(this.reorderIconWidth / 2)) + 'px';\n                    this.dropPosition = -1;\n                }\n\n                if ((dropIndex - dragIndex === 1 && this.dropPosition === -1) || (dropIndex - dragIndex === -1 && this.dropPosition === 1)) {\n                    this.reorderIndicatorUpViewChild.nativeElement.style.display = 'none';\n                    this.reorderIndicatorDownViewChild.nativeElement.style.display = 'none';\n                }\n                else {\n                    this.reorderIndicatorUpViewChild.nativeElement.style.display = 'block';\n                    this.reorderIndicatorDownViewChild.nativeElement.style.display = 'block';\n                }\n            }\n            else {\n                event.dataTransfer.dropEffect = 'none';\n            }\n        }\n    }\n\n    onColumnDragLeave(event) {\n        if (this.reorderableColumns && this.draggedColumn) {\n            event.preventDefault();\n            this.reorderIndicatorUpViewChild.nativeElement.style.display = 'none';\n            this.reorderIndicatorDownViewChild.nativeElement.style.display = 'none';\n        }\n    }\n\n    onColumnDrop(event, dropColumn) {\n        event.preventDefault();\n        if (this.draggedColumn) {\n            let dragIndex = DomHandler.indexWithinGroup(this.draggedColumn, 'preorderablecolumn');\n            let dropIndex = DomHandler.indexWithinGroup(dropColumn, 'preorderablecolumn');\n            let allowDrop = (dragIndex != dropIndex);\n            if (allowDrop && ((dropIndex - dragIndex == 1 && this.dropPosition === -1) || (dragIndex - dropIndex == 1 && this.dropPosition === 1))) {\n                allowDrop = false;\n            }\n\n            if (allowDrop && ((dropIndex < dragIndex && this.dropPosition === 1))) {\n                dropIndex = dropIndex + 1;\n            }\n\n            if (allowDrop && ((dropIndex > dragIndex && this.dropPosition === -1))) {\n                dropIndex = dropIndex - 1;\n            }\n\n            if (allowDrop) {\n                ObjectUtils.reorderArray(this.columns, dragIndex, dropIndex);\n\n                this.onColReorder.emit({\n                    dragIndex: dragIndex,\n                    dropIndex: dropIndex,\n                    columns: this.columns\n                });\n\n                if (this.isStateful()) {\n                    this.zone.runOutsideAngular(() => {\n                        setTimeout(() => {\n                            this.saveState();\n                        });\n                    });\n                }\n            }\n\n            this.reorderIndicatorUpViewChild.nativeElement.style.display = 'none';\n            this.reorderIndicatorDownViewChild.nativeElement.style.display = 'none';\n            this.draggedColumn.draggable = false;\n            this.draggedColumn = null;\n            this.dropPosition = null;\n        }\n    }\n\n    onRowDragStart(event, index) {\n        this.rowDragging = true;\n        this.draggedRowIndex = index;\n        event.dataTransfer.setData('text', 'b');    // For firefox\n    }\n\n    onRowDragOver(event, index, rowElement) {\n        if (this.rowDragging && this.draggedRowIndex !== index) {\n            let rowY = DomHandler.getOffset(rowElement).top + DomHandler.getWindowScrollTop();\n            let pageY = event.pageY;\n            let rowMidY = rowY + DomHandler.getOuterHeight(rowElement) / 2;\n            let prevRowElement = rowElement.previousElementSibling;\n\n            if (pageY < rowMidY) {\n                DomHandler.removeClass(rowElement, 'ui-table-dragpoint-bottom');\n\n                this.droppedRowIndex = index;\n                if (prevRowElement)\n                    DomHandler.addClass(prevRowElement, 'ui-table-dragpoint-bottom');\n                else\n                    DomHandler.addClass(rowElement, 'ui-table-dragpoint-top');\n            }\n            else {\n                if (prevRowElement)\n                    DomHandler.removeClass(prevRowElement, 'ui-table-dragpoint-bottom');\n                else\n                    DomHandler.addClass(rowElement, 'ui-table-dragpoint-top');\n\n                this.droppedRowIndex = index + 1;\n                DomHandler.addClass(rowElement, 'ui-table-dragpoint-bottom');\n            }\n        }\n    }\n\n    onRowDragLeave(event, rowElement) {\n        let prevRowElement = rowElement.previousElementSibling;\n        if (prevRowElement) {\n            DomHandler.removeClass(prevRowElement, 'ui-table-dragpoint-bottom');\n        }\n\n        DomHandler.removeClass(rowElement, 'ui-table-dragpoint-bottom');\n        DomHandler.removeClass(rowElement, 'ui-table-dragpoint-top');\n    }\n\n    onRowDragEnd(event) {\n        this.rowDragging = false;\n        this.draggedRowIndex = null;\n        this.droppedRowIndex = null;\n    }\n\n    onRowDrop(event, rowElement) {\n        if (this.droppedRowIndex != null) {\n            let dropIndex = (this.draggedRowIndex > this.droppedRowIndex) ? this.droppedRowIndex : (this.droppedRowIndex === 0) ? 0 : this.droppedRowIndex - 1;\n            ObjectUtils.reorderArray(this.value, this.draggedRowIndex, dropIndex);\n\n            this.onRowReorder.emit({\n                dragIndex: this.draggedRowIndex,\n                dropIndex: dropIndex\n            });\n        }\n        //cleanup\n        this.onRowDragLeave(event, rowElement);\n        this.onRowDragEnd(event);\n    }\n\n    isEmpty() {\n        let data = this.filteredValue||this.value;\n        return data == null || data.length == 0;\n    }\n\n    getBlockableElement(): HTMLElement {\n        return this.el.nativeElement.children[0];\n    }\n\n    getStorage() {\n        switch(this.stateStorage) {\n            case 'local':\n                return window.localStorage;\n\n            case 'session':\n                return window.sessionStorage;\n\n            default:\n                throw new Error(this.stateStorage + ' is not a valid value for the state storage, supported values are \"local\" and \"session\".');\n        }\n    }\n\n    isStateful() {\n        return this.stateKey != null;\n    }\n\n    saveState() {\n        const storage = this.getStorage();\n        let state: TableState = {};\n\n        if (this.paginator) {\n            state.first = this.first;\n            state.rows = this.rows;\n        }\n\n        if (this.sortField) {\n            state.sortField = this.sortField;\n            state.sortOrder = this.sortOrder;\n        }\n\n        if (this.multiSortMeta) {\n            state.multiSortMeta = this.multiSortMeta;\n        }\n\n        if (this.hasFilter()) {\n            state.filters = this.filters;\n        }\n\n        if (this.resizableColumns) {\n            this.saveColumnWidths(state);\n        }\n\n        if (this.reorderableColumns) {\n            this.saveColumnOrder(state);\n        }\n\n        if (this.selection) {\n            state.selection = this.selection;\n        }\n\n        if (Object.keys(this.expandedRowKeys).length) {\n            state.expandedRowKeys = this.expandedRowKeys;\n        }\n\n        storage.setItem(this.stateKey, JSON.stringify(state));\n        this.onStateSave.emit(state);\n    }\n\n    clearState() {\n        const storage = this.getStorage();\n\n        if (this.stateKey) {\n            storage.removeItem(this.stateKey);\n        }\n    }\n\n    restoreState() {\n        const storage = this.getStorage();\n        const stateString = storage.getItem(this.stateKey);\n\n        if (stateString) {\n            let state: TableState = JSON.parse(stateString);\n\n            if (this.paginator) {\n                this.first = state.first;\n                this.rows = state.rows;\n                this.firstChange.emit(this.first);\n                this.rowsChange.emit(this.rows);\n            }\n\n            if (state.sortField) {\n                this.restoringSort = true;\n                this._sortField = state.sortField;\n                this._sortOrder = state.sortOrder;\n            }\n\n            if (state.multiSortMeta) {\n                this.restoringSort = true;\n                this._multiSortMeta = state.multiSortMeta;\n            }\n\n            if (state.filters) {\n                this.restoringFilter = true;\n                this.filters = state.filters;\n            }\n\n            if (this.resizableColumns) {\n                this.columnWidthsState = state.columnWidths;\n                this.tableWidthState = state.tableWidth;\n            }\n\n            if (state.expandedRowKeys) {\n                this.expandedRowKeys = state.expandedRowKeys;\n            }\n\n            if (state.selection) {\n                Promise.resolve(null).then(() => this.selectionChange.emit(state.selection));\n            }\n\n            this.stateRestored = true;\n\n            this.onStateRestore.emit(state);\n        }\n    }\n\n    saveColumnWidths(state) {\n        let widths = [];\n        let headers = DomHandler.find(this.containerViewChild.nativeElement, '.ui-table-thead > tr:first-child > th');\n        headers.map(header => widths.push(DomHandler.getOuterWidth(header)));\n        state.columnWidths = widths.join(',');\n\n        if (this.columnResizeMode === 'expand') {\n            state.tableWidth = this.scrollable ? DomHandler.findSingle(this.containerViewChild.nativeElement, '.ui-table-scrollable-header-table').style.width :\n                                                DomHandler.getOuterWidth(this.tableViewChild.nativeElement) + 'px';\n        }\n    }\n\n    restoreColumnWidths() {\n        if (this.columnWidthsState) {\n            let widths = this.columnWidthsState.split(',');\n\n            if (this.columnResizeMode === 'expand' && this.tableWidthState) {\n                if (this.scrollable) {\n                    this.setScrollableItemsWidthOnExpandResize(null, this.tableWidthState, 0);\n                }\n                else {\n                    this.tableViewChild.nativeElement.style.width = this.tableWidthState;\n                    this.containerViewChild.nativeElement.style.width = this.tableWidthState;\n                }\n            }\n\n            if (this.scrollable) {\n                let headerCols = DomHandler.find(this.containerViewChild.nativeElement, '.ui-table-scrollable-header-table > colgroup > col');\n                let bodyCols = this.virtualScroll ? DomHandler.find(this.containerViewChild.nativeElement, 'cdk-virtual-scroll-viewport table > colgroup > col') : DomHandler.find(this.containerViewChild.nativeElement, '.ui-table-scrollable-body table > colgroup > col');\n\n                headerCols.map((col, index) => col.style.width = widths[index] + 'px');\n                bodyCols.map((col, index) => col.style.width = widths[index] + 'px');\n            }\n            else {\n                let headers = DomHandler.find(this.tableViewChild.nativeElement, '.ui-table-thead > tr:first-child > th');\n                headers.map((header, index) => header.style.width = widths[index] + 'px');\n            }\n        }\n    }\n\n    saveColumnOrder(state) {\n        if (this.columns) {\n            let columnOrder: string[] = [];\n            this.columns.map(column => {\n                columnOrder.push(column.field||column.key)\n            });\n\n            state.columnOrder = columnOrder;\n        }\n    }\n\n    restoreColumnOrder() {\n        const storage = this.getStorage();\n        const stateString = storage.getItem(this.stateKey);\n        if (stateString) {\n            let state: TableState = JSON.parse(stateString);\n            let columnOrder = state.columnOrder;\n            if (columnOrder) {\n                let reorderedColumns = [];\n                columnOrder.map(key =>  {\n                    let col = this.findColumnByKey(key);\n                    if (col) {\n                        reorderedColumns.push(col)\n                    }\n                });\n                this.columnOrderStateRestored = true;\n                this.columns = reorderedColumns;\n            }\n        }\n    }\n\n    findColumnByKey(key) {\n        if (this.columns) {\n            for (let col of this.columns) {\n                if (col.key === key || col.field === key)\n                    return col;\n                else\n                    continue;\n            }\n        }\n        else {\n            return null;\n        }\n    }\n\n    ngOnDestroy() {\n        this.unbindDocumentEditListener();\n        this.editingCell = null;\n        this.initialized = null;\n    }\n}\n\n@Component({\n    selector: '[pTableBody]',\n    template: `\n        <ng-container *ngIf=\"!dt.expandedRowTemplate && !dt.virtualScroll\">\n            <ng-template ngFor let-rowData let-rowIndex=\"index\" [ngForOf]=\"(dt.paginator && !dt.lazy) ? ((dt.filteredValue||dt.value) | slice:dt.first:(dt.first + dt.rows)) : (dt.filteredValue||dt.value)\" [ngForTrackBy]=\"dt.rowTrackBy\">\n                <ng-container *ngTemplateOutlet=\"template; context: {$implicit: rowData, rowIndex: dt.paginator ? (dt.first + rowIndex) : rowIndex, columns: columns, editing: (dt.editMode === 'row' && dt.isRowEditing(rowData))}\"></ng-container>\n            </ng-template>\n        </ng-container>\n        <ng-container *ngIf=\"!dt.expandedRowTemplate && dt.virtualScroll\">\n            <ng-template cdkVirtualFor let-rowData let-rowIndex=\"index\" [cdkVirtualForOf]=\"dt.filteredValue||dt.value\" [cdkVirtualForTrackBy]=\"dt.rowTrackBy\" [cdkVirtualForTemplateCacheSize]=\"0\">\n                <ng-container *ngTemplateOutlet=\"rowData ? template: dt.loadingBodyTemplate; context: {$implicit: rowData, rowIndex: dt.paginator ? (dt.first + rowIndex) : rowIndex, columns: columns, editing: (dt.editMode === 'row' && dt.isRowEditing(rowData))}\"></ng-container>\n            </ng-template>\n        </ng-container>\n        <ng-container *ngIf=\"dt.expandedRowTemplate\">\n            <ng-template ngFor let-rowData let-rowIndex=\"index\" [ngForOf]=\"(dt.paginator && !dt.lazy) ? ((dt.filteredValue||dt.value) | slice:dt.first:(dt.first + dt.rows)) : (dt.filteredValue||dt.value)\" [ngForTrackBy]=\"dt.rowTrackBy\">\n                <ng-container *ngTemplateOutlet=\"template; context: {$implicit: rowData, rowIndex: dt.paginator ? (dt.first + rowIndex) : rowIndex, columns: columns, expanded: dt.isRowExpanded(rowData), editing: (dt.editMode === 'row' && dt.isRowEditing(rowData))}\"></ng-container>\n                <ng-container *ngIf=\"dt.isRowExpanded(rowData)\">\n                    <ng-container *ngTemplateOutlet=\"dt.expandedRowTemplate; context: {$implicit: rowData, rowIndex: dt.paginator ? (dt.first + rowIndex) : rowIndex, columns: columns}\"></ng-container>\n                </ng-container>\n            </ng-template>\n        </ng-container>\n        <ng-container *ngIf=\"dt.loading\">\n            <ng-container *ngTemplateOutlet=\"dt.loadingBodyTemplate; context: {$implicit: columns, frozen: frozen}\"></ng-container>\n        </ng-container>\n        <ng-container *ngIf=\"dt.isEmpty() && !dt.loading\">\n            <ng-container *ngTemplateOutlet=\"dt.emptyMessageTemplate; context: {$implicit: columns, frozen: frozen}\"></ng-container>\n        </ng-container>\n    `\n})\nexport class TableBody {\n\n    @Input(\"pTableBody\") columns: any[];\n\n    @Input(\"pTableBodyTemplate\") template: TemplateRef<any>;\n\n    @Input() frozen: boolean;\n\n    subscription: Subscription;\n\n    constructor(public dt: Table, public tableService: TableService, public cd: ChangeDetectorRef) {\n        this.subscription = this.dt.tableService.valueSource$.subscribe(() => {\n            if (this.dt.virtualScroll) {\n                this.cd.detectChanges();\n            }\n        });\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n}\n\n@Component({\n    selector: '[pScrollableView]',\n    template: `\n        <div #scrollHeader class=\"ui-table-scrollable-header ui-widget-header\">\n            <div #scrollHeaderBox class=\"ui-table-scrollable-header-box\">\n                <table class=\"ui-table-scrollable-header-table\" [ngClass]=\"dt.tableStyleClass\" [ngStyle]=\"dt.tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"frozen ? dt.frozenColGroupTemplate||dt.colGroupTemplate : dt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                    <thead class=\"ui-table-thead\">\n                        <ng-container *ngTemplateOutlet=\"frozen ? dt.frozenHeaderTemplate||dt.headerTemplate : dt.headerTemplate; context {$implicit: columns}\"></ng-container>\n                    </thead>\n                    <tbody class=\"ui-table-tbody\">\n                        <ng-template ngFor let-rowData let-rowIndex=\"index\" [ngForOf]=\"dt.frozenValue\" [ngForTrackBy]=\"dt.rowTrackBy\">\n                            <ng-container *ngTemplateOutlet=\"dt.frozenRowsTemplate; context: {$implicit: rowData, rowIndex: rowIndex, columns: columns}\"></ng-container>\n                        </ng-template>\n                    </tbody>\n                </table>\n            </div>\n        </div>\n        <ng-container *ngIf=\"!dt.virtualScroll; else virtualScrollTemplate\">\n            <div #scrollBody class=\"ui-table-scrollable-body\" [ngStyle]=\"{'max-height': dt.scrollHeight !== 'flex' ? scrollHeight : undefined, 'overflow-y': !frozen && dt.scrollHeight ? 'scroll' : undefined}\">\n                <table #scrollTable [class]=\"dt.tableStyleClass\" [ngStyle]=\"dt.tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"frozen ? dt.frozenColGroupTemplate||dt.colGroupTemplate : dt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                    <tbody class=\"ui-table-tbody\" [pTableBody]=\"columns\" [pTableBodyTemplate]=\"frozen ? dt.frozenBodyTemplate||dt.bodyTemplate : dt.bodyTemplate\" [frozen]=\"frozen\"></tbody>\n                </table>\n                <div #scrollableAligner style=\"background-color:transparent\" *ngIf=\"frozen\"></div>\n            </div>\n        </ng-container>\n        <ng-template #virtualScrollTemplate>\n            <cdk-virtual-scroll-viewport [itemSize]=\"dt.virtualRowHeight\" tabindex=\"0\" [style.height]=\"dt.scrollHeight !== 'flex' ? scrollHeight : undefined\" \n                    [minBufferPx]=\"dt.minBufferPx\" [maxBufferPx]=\"dt.maxBufferPx\" (scrolledIndexChange)=\"onScrollIndexChange($event)\" class=\"ui-table-virtual-scrollable-body\">\n                <table #scrollTable [class]=\"dt.tableStyleClass\" [ngStyle]=\"dt.tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"frozen ? dt.frozenColGroupTemplate||dt.colGroupTemplate : dt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                    <tbody class=\"ui-table-tbody\" [pTableBody]=\"columns\" [pTableBodyTemplate]=\"frozen ? dt.frozenBodyTemplate||dt.bodyTemplate : dt.bodyTemplate\" [frozen]=\"frozen\"></tbody>\n                </table>\n                <div #scrollableAligner style=\"background-color:transparent\" *ngIf=\"frozen\"></div>\n            </cdk-virtual-scroll-viewport>\n        </ng-template>\n        <div #scrollFooter class=\"ui-table-scrollable-footer ui-widget-header\">\n            <div #scrollFooterBox class=\"ui-table-scrollable-footer-box\">\n                <table class=\"ui-table-scrollable-footer-table\" [ngClass]=\"dt.tableStyleClass\" [ngStyle]=\"dt.tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"frozen ? dt.frozenColGroupTemplate||dt.colGroupTemplate : dt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                    <tfoot class=\"ui-table-tfoot\">\n                        <ng-container *ngTemplateOutlet=\"frozen ? dt.frozenFooterTemplate||dt.footerTemplate : dt.footerTemplate; context {$implicit: columns}\"></ng-container>\n                    </tfoot>\n                </table>\n            </div>\n        </div>\n    `\n})\nexport class ScrollableView implements AfterViewInit,OnDestroy,AfterViewChecked {\n\n    @Input(\"pScrollableView\") columns: any[];\n\n    @Input() frozen: boolean;\n\n    @ViewChild('scrollHeader') scrollHeaderViewChild: ElementRef;\n\n    @ViewChild('scrollHeaderBox') scrollHeaderBoxViewChild: ElementRef;\n\n    @ViewChild('scrollBody') scrollBodyViewChild: ElementRef;\n\n    @ViewChild('scrollTable') scrollTableViewChild: ElementRef;\n\n    @ViewChild('scrollFooter') scrollFooterViewChild: ElementRef;\n\n    @ViewChild('scrollFooterBox') scrollFooterBoxViewChild: ElementRef;\n\n    @ViewChild('scrollableAligner') scrollableAlignerViewChild: ElementRef;\n\n    @ViewChild(CdkVirtualScrollViewport) virtualScrollBody: CdkVirtualScrollViewport;\n\n    headerScrollListener: any;\n\n    bodyScrollListener: any;\n\n    footerScrollListener: any;\n\n    frozenSiblingBody: HTMLDivElement;\n\n    subscription: Subscription;\n\n    initialized: boolean;\n\n    preventBodyScrollPropagation: boolean;\n\n    loadedPages: number[] = [];\n\n    _scrollHeight: string;\n\n    virtualScrollTimeout: any;\n\n    virtualPage: number;\n\n    @Input() get scrollHeight(): string {\n        return this._scrollHeight;\n    }\n    set scrollHeight(val: string) {\n        this._scrollHeight = val;\n        if (val != null && (val.includes('%') || val.includes('calc'))) {\n            console.log('Percentage scroll height calculation is removed in favor of the more performant CSS based flex mode, use scrollHeight=\"flex\" instead.')\n        }\n\n        if (this.dt.virtualScroll && this.virtualScrollBody) {\n            this.virtualScrollBody.ngOnInit();\n        }\n    }\n\n    constructor(public dt: Table, public el: ElementRef, public zone: NgZone) {\n        this.subscription = this.dt.tableService.valueSource$.subscribe(() => {\n            this.zone.runOutsideAngular(() => {\n                setTimeout(() => {\n                    this.alignScrollBar();\n                }, 50);\n            });\n        });\n\n        this.initialized = false;\n     }\n\n    ngAfterViewChecked() {\n        if (!this.initialized && this.el.nativeElement.offsetParent) {\n            this.alignScrollBar();\n            this.initialized = true;\n        }\n    }\n\n    ngAfterViewInit() {\n        if (!this.frozen) {\n            if (this.dt.frozenColumns || this.dt.frozenBodyTemplate) {\n                DomHandler.addClass(this.el.nativeElement, 'ui-table-unfrozen-view');\n            }\n\n            let frozenView = this.el.nativeElement.previousElementSibling;\n            if (frozenView) {\n                if (this.dt.virtualScroll)\n                    this.frozenSiblingBody = DomHandler.findSingle(frozenView, '.ui-table-virtual-scrollable-body');\n                else\n                    this.frozenSiblingBody = DomHandler.findSingle(frozenView, '.ui-table-scrollable-body');\n            }\n        }\n        else {\n            if (this.scrollableAlignerViewChild && this.scrollableAlignerViewChild.nativeElement) {\n                this.scrollableAlignerViewChild.nativeElement.style.height = DomHandler.calculateScrollbarHeight() + 'px';\n            }\n        }\n\n        this.bindEvents();\n        this.alignScrollBar();\n    }\n\n    bindEvents() {\n        this.zone.runOutsideAngular(() => {\n            if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n                this.headerScrollListener = this.onHeaderScroll.bind(this);\n                this.scrollHeaderViewChild.nativeElement.addEventListener('scroll', this.headerScrollListener);\n            }\n\n            if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n                this.footerScrollListener = this.onFooterScroll.bind(this);\n                this.scrollFooterViewChild.nativeElement.addEventListener('scroll', this.footerScrollListener);\n            }\n\n            if (!this.frozen) {\n                this.bodyScrollListener = this.onBodyScroll.bind(this);\n\n                if (this.dt.virtualScroll)\n                    this.virtualScrollBody.getElementRef().nativeElement.addEventListener('scroll', this.bodyScrollListener);\n                else\n                    this.scrollBodyViewChild.nativeElement.addEventListener('scroll', this.bodyScrollListener);\n            }\n        });\n    }\n\n    unbindEvents() {\n        if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n            this.scrollHeaderViewChild.nativeElement.removeEventListener('scroll', this.headerScrollListener);\n        }\n\n        if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n            this.scrollFooterViewChild.nativeElement.removeEventListener('scroll', this.footerScrollListener);\n        }\n\n        if (this.scrollBodyViewChild && this.scrollBodyViewChild.nativeElement) {\n            this.scrollBodyViewChild.nativeElement.removeEventListener('scroll', this.bodyScrollListener);\n        }\n\n        if (this.virtualScrollBody && this.virtualScrollBody.getElementRef()) {\n            this.virtualScrollBody.getElementRef().nativeElement.removeEventListener('scroll', this.bodyScrollListener);\n        }\n    }\n\n    onHeaderScroll() {\n        const scrollLeft = this.scrollHeaderViewChild.nativeElement.scrollLeft;\n\n        this.scrollBodyViewChild.nativeElement.scrollLeft = scrollLeft;\n\n        if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n            this.scrollFooterViewChild.nativeElement.scrollLeft = scrollLeft;\n        }\n\n        this.preventBodyScrollPropagation = true;\n    }\n\n    onFooterScroll() {\n        const scrollLeft = this.scrollFooterViewChild.nativeElement.scrollLeft;\n        this.scrollBodyViewChild.nativeElement.scrollLeft = scrollLeft;\n\n        if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n            this.scrollHeaderViewChild.nativeElement.scrollLeft = scrollLeft;\n        }\n\n        this.preventBodyScrollPropagation = true;\n    }\n\n    onBodyScroll(event) {\n        if (this.preventBodyScrollPropagation) {\n            this.preventBodyScrollPropagation = false;\n            return;\n        }\n\n        if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n            this.scrollHeaderBoxViewChild.nativeElement.style.marginLeft = -1 * event.target.scrollLeft + 'px';\n        }\n\n        if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n            this.scrollFooterBoxViewChild.nativeElement.style.marginLeft = -1 * event.target.scrollLeft + 'px';\n        }\n\n        if (this.frozenSiblingBody) {\n            this.frozenSiblingBody.scrollTop = event.target.scrollTop;\n        }\n    }\n\n    onScrollIndexChange(index: number) {\n        if (this.dt.lazy) {\n            if (this.virtualScrollTimeout) {\n                clearTimeout(this.virtualScrollTimeout);\n            }\n\n            this.virtualScrollTimeout = setTimeout(() => {\n                let page = Math.floor(index / this.dt.rows);\n                let virtualScrollOffset = page === 0 ? 0 : (page - 1) * this.dt.rows;\n                let virtualScrollChunkSize = page === 0 ? this.dt.rows * 2 : this.dt.rows * 3;\n\n                if (page !== this.virtualPage) {\n                    this.virtualPage = page;\n                    this.dt.onLazyLoad.emit({\n                        first: virtualScrollOffset,\n                        rows: virtualScrollChunkSize,\n                        sortField: this.dt.sortField,\n                        sortOrder: this.dt.sortOrder,\n                        filters: this.dt.filters,\n                        globalFilter: this.dt.filters && this.dt.filters['global'] ? (<FilterMetadata> this.dt.filters['global']).value : null,\n                        multiSortMeta: this.dt.multiSortMeta\n                    });\n                }\n            }, this.dt.virtualScrollDelay);\n        }\n    }\n\n    createPageRange(page: number) {\n        let range: number[] = [];\n\n        if (page !== 0) {\n            range.push(page - 1);\n        }\n        range.push(page);\n        if (page !== (this.getPageCount() - 1)) {\n            range.push(page + 1);\n        }\n\n        return range;\n    }\n\n    getPageCount() {\n        let dataToRender = this.dt.filteredValue || this.dt.value;\n        let dataLength = dataToRender ? dataToRender.length: 0;\n        return Math.ceil(dataLength / this.dt.rows);\n    }\n\n    scrollToVirtualIndex(index: number): void {\n        if (this.virtualScrollBody) {\n            this.virtualScrollBody.scrollToIndex(index);\n        }\n    }\n\n    scrollTo(options): void {\n        if (this.virtualScrollBody) {\n            this.virtualScrollBody.scrollTo(options);\n        }\n        else {\n            if (this.scrollBodyViewChild.nativeElement.scrollTo) {\n                this.scrollBodyViewChild.nativeElement.scrollTo(options);\n            }\n            else {\n                this.scrollBodyViewChild.nativeElement.scrollLeft = options.left;\n                this.scrollBodyViewChild.nativeElement.scrollTop = options.top;\n            }\n        }\n    }\n\n    hasVerticalOverflow() {\n        if (this.dt.virtualScroll)\n            return (this.virtualScrollBody.getDataLength() * this.dt.virtualRowHeight) > this.virtualScrollBody.getViewportSize();\n        else\n            return DomHandler.getOuterHeight(this.scrollTableViewChild.nativeElement) > DomHandler.getOuterHeight(this.scrollBodyViewChild.nativeElement);\n    }\n\n    alignScrollBar() {\n        if (!this.frozen) {\n            let scrollBarWidth = this.hasVerticalOverflow() ? DomHandler.calculateScrollbarWidth() : 0;\n            this.scrollHeaderBoxViewChild.nativeElement.style.paddingRight = scrollBarWidth + 'px';\n\n            if (this.scrollFooterBoxViewChild && this.scrollFooterBoxViewChild.nativeElement) {\n                this.scrollFooterBoxViewChild.nativeElement.style.paddingRight = scrollBarWidth + 'px';\n            }\n        }\n        this.initialized = false;\n    }\n\n    ngOnDestroy() {\n        this.unbindEvents();\n\n        this.frozenSiblingBody = null;\n\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n\n        this.initialized = false;\n    }\n}\n\n@Directive({\n    selector: '[pSortableColumn]',\n    host: {\n        '[class.ui-sortable-column]': 'isEnabled()',\n        '[class.ui-state-highlight]': 'sorted',\n        '[attr.tabindex]': 'isEnabled() ? \"0\" : null',\n        '[attr.role]': '\"columnheader\"',\n        '[attr.aria-sort]': 'sortOrder'\n    }\n})\nexport class SortableColumn implements OnInit, OnDestroy {\n\n    @Input(\"pSortableColumn\") field: string;\n\n    @Input() pSortableColumnDisabled: boolean;\n\n    sorted: boolean;\n\n    sortOrder: string;\n\n    subscription: Subscription;\n\n    constructor(public dt: Table) {\n        if (this.isEnabled()) {\n            this.subscription = this.dt.tableService.sortSource$.subscribe(sortMeta => {\n                this.updateSortState();\n            });\n        }\n    }\n\n    ngOnInit() {\n        if (this.isEnabled()) {\n            this.updateSortState();\n        }\n    }\n\n    updateSortState() {\n        this.sorted = this.dt.isSorted(this.field);\n        this.sortOrder = this.sorted ? (this.dt.sortOrder === 1 ? 'ascending' : 'descending') : 'none';\n    }\n\n    @HostListener('click', ['$event'])\n    onClick(event: MouseEvent) {\n        if (this.isEnabled()) {\n            this.updateSortState();\n            this.dt.sort({\n                originalEvent: event,\n                field: this.field\n            });\n\n            DomHandler.clearSelection();\n        }\n    }\n\n    @HostListener('keydown.enter', ['$event'])\n    onEnterKey(event: MouseEvent) {\n        this.onClick(event);\n    }\n\n    isEnabled() {\n        return this.pSortableColumnDisabled !== true;\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n\n}\n\n\n@Component({\n    selector: 'p-sortIcon',\n    template: `\n        <i class=\"ui-sortable-column-icon pi pi-fw\" [ngClass]=\"{'pi-sort-amount-up-alt': sortOrder === 1, 'pi-sort-amount-down': sortOrder === -1, 'pi-sort-alt': sortOrder === 0}\"></i>\n    `\n})\nexport class SortIcon implements OnInit, OnDestroy {\n\n    @Input() field: string;\n\n    subscription: Subscription;\n\n    sortOrder: number;\n\n    constructor(public dt: Table) {\n        this.subscription = this.dt.tableService.sortSource$.subscribe(sortMeta => {\n            this.updateSortState();\n        });\n    }\n\n    ngOnInit() {\n        this.updateSortState();\n    }\n\n    onClick(event){\n        event.preventDefault();\n    }\n\n    updateSortState() {\n        if (this.dt.sortMode === 'single') {\n            this.sortOrder = this.dt.isSorted(this.field) ? this.dt.sortOrder : 0;\n        }\n        else if (this.dt.sortMode === 'multiple') {\n            let sortMeta = this.dt.getSortMeta(this.field);\n            this.sortOrder = sortMeta ? sortMeta.order: 0;\n        }\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n}\n\n@Directive({\n    selector: '[pSelectableRow]',\n    host: {\n        '[class.ui-selectable-row]': 'isEnabled()',\n        '[class.ui-state-highlight]': 'selected',\n        '[attr.tabindex]': 'isEnabled() ? 0 : undefined'\n    }\n})\nexport class SelectableRow implements OnInit, OnDestroy {\n\n    @Input(\"pSelectableRow\") data: any;\n\n    @Input(\"pSelectableRowIndex\") index: number;\n\n    @Input() pSelectableRowDisabled: boolean;\n\n    selected: boolean;\n\n    subscription: Subscription;\n\n    constructor(public dt: Table, public tableService: TableService) {\n        if (this.isEnabled()) {\n            this.subscription = this.dt.tableService.selectionSource$.subscribe(() => {\n                this.selected = this.dt.isSelected(this.data);\n            });\n        }\n    }\n\n    ngOnInit() {\n        if (this.isEnabled()) {\n            this.selected = this.dt.isSelected(this.data);\n        }\n    }\n\n    @HostListener('click', ['$event'])\n    onClick(event: Event) {\n        if (this.isEnabled()) {\n            this.dt.handleRowClick({\n                originalEvent: event,\n                rowData: this.data,\n                rowIndex: this.index\n            });\n        }\n    }\n\n    @HostListener('touchend', ['$event'])\n    onTouchEnd(event: Event) {\n        if (this.isEnabled()) {\n            this.dt.handleRowTouchEnd(event);\n        }\n    }\n\n    @HostListener('keydown.arrowdown', ['$event'])\n    onArrowDownKeyDown(event: KeyboardEvent) {\n        if (!this.isEnabled()) {\n            return;\n        }\n\n        const row = <HTMLTableRowElement>event.currentTarget;\n        const nextRow = this.findNextSelectableRow(row);\n\n        if (nextRow) {\n            nextRow.focus();\n        }\n\n        event.preventDefault();\n    }\n\n    @HostListener('keydown.arrowup', ['$event'])\n    onArrowUpKeyDown(event: KeyboardEvent) {\n        if (!this.isEnabled()) {\n            return;\n        }\n\n        const row = <HTMLTableRowElement>event.currentTarget;\n        const prevRow = this.findPrevSelectableRow(row);\n\n        if (prevRow) {\n            prevRow.focus();\n        }\n\n        event.preventDefault();\n    }\n\n    @HostListener('keydown.enter', ['$event'])\n    @HostListener('keydown.shift.enter', ['$event'])\n    @HostListener('keydown.meta.enter', ['$event'])\n    onEnterKeyDown(event: KeyboardEvent) {\n        if (!this.isEnabled()) {\n            return;\n        }\n\n        this.dt.handleRowClick({\n            originalEvent: event,\n            rowData: this.data,\n            rowIndex: this.index\n        });\n    }\n\n    findNextSelectableRow(row: HTMLTableRowElement): HTMLTableRowElement {\n        let nextRow = <HTMLTableRowElement> row.nextElementSibling;\n        if (nextRow) {\n            if (DomHandler.hasClass(nextRow, 'ui-selectable-row'))\n                return nextRow;\n            else\n                return this.findNextSelectableRow(nextRow);\n        }\n        else {\n            return null;\n        }\n    }\n\n    findPrevSelectableRow(row: HTMLTableRowElement): HTMLTableRowElement {\n        let prevRow = <HTMLTableRowElement> row.previousElementSibling;\n        if (prevRow) {\n            if (DomHandler.hasClass(prevRow, 'ui-selectable-row'))\n                return prevRow;\n            else\n                return this.findPrevSelectableRow(prevRow);\n        }\n        else {\n            return null;\n        }\n    }\n\n    isEnabled() {\n        return this.pSelectableRowDisabled !== true;\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n\n}\n\n@Directive({\n    selector: '[pSelectableRowDblClick]',\n    host: {\n        '[class.ui-selectable-row]': 'isEnabled()',\n        '[class.ui-state-highlight]': 'selected'\n    }\n})\nexport class SelectableRowDblClick implements OnInit, OnDestroy {\n\n    @Input(\"pSelectableRowDblClick\") data: any;\n\n    @Input(\"pSelectableRowIndex\") index: number;\n\n    @Input() pSelectableRowDisabled: boolean;\n\n    selected: boolean;\n\n    subscription: Subscription;\n\n    constructor(public dt: Table, public tableService: TableService) {\n        if (this.isEnabled()) {\n            this.subscription = this.dt.tableService.selectionSource$.subscribe(() => {\n                this.selected = this.dt.isSelected(this.data);\n            });\n        }\n    }\n\n    ngOnInit() {\n        if (this.isEnabled()) {\n            this.selected = this.dt.isSelected(this.data);\n        }\n    }\n\n    @HostListener('dblclick', ['$event'])\n    onClick(event: Event) {\n        if (this.isEnabled()) {\n            this.dt.handleRowClick({\n                originalEvent: event,\n                rowData: this.data,\n                rowIndex: this.index\n            });\n        }\n    }\n\n    isEnabled() {\n        return this.pSelectableRowDisabled !== true;\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n\n}\n\n@Directive({\n    selector: '[pContextMenuRow]',\n    host: {\n        '[class.ui-contextmenu-selected]': 'selected',\n        '[attr.tabindex]': 'isEnabled() ? 0 : undefined'\n    }\n})\nexport class ContextMenuRow {\n\n    @Input(\"pContextMenuRow\") data: any;\n\n    @Input(\"pContextMenuRowIndex\") index: number;\n\n    @Input() pContextMenuRowDisabled: boolean;\n\n    selected: boolean;\n\n    subscription: Subscription;\n\n    constructor(public dt: Table, public tableService: TableService, private el: ElementRef) {\n        if (this.isEnabled()) {\n            this.subscription = this.dt.tableService.contextMenuSource$.subscribe((data) => {\n                this.selected = this.dt.equals(this.data, data);\n            });\n        }\n    }\n\n    @HostListener('contextmenu', ['$event'])\n    onContextMenu(event: Event) {\n        if (this.isEnabled()) {\n            this.dt.handleRowRightClick({\n                originalEvent: event,\n                rowData: this.data,\n                rowIndex: this.index\n            });\n\n            this.el.nativeElement.focus();\n            event.preventDefault();\n        }\n    }\n\n    isEnabled() {\n        return this.pContextMenuRowDisabled !== true;\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n\n}\n\n@Directive({\n    selector: '[pRowToggler]'\n})\nexport class RowToggler {\n\n    @Input('pRowToggler') data: any;\n\n    @Input() pRowTogglerDisabled: boolean;\n\n    constructor(public dt: Table) { }\n\n    @HostListener('click', ['$event'])\n    onClick(event: Event) {\n        if (this.isEnabled()) {\n            this.dt.toggleRow(this.data, event);\n            event.preventDefault();\n        }\n    }\n\n    isEnabled() {\n        return this.pRowTogglerDisabled !== true;\n    }\n}\n\n@Directive({\n    selector: '[pResizableColumn]'\n})\nexport class ResizableColumn implements AfterViewInit, OnDestroy {\n\n    @Input() pResizableColumnDisabled: boolean;\n\n    resizer: HTMLSpanElement;\n\n    resizerMouseDownListener: any;\n\n    documentMouseMoveListener: any;\n\n    documentMouseUpListener: any;\n\n    constructor(public dt: Table, public el: ElementRef, public zone: NgZone) { }\n\n    ngAfterViewInit() {\n        if (this.isEnabled()) {\n            DomHandler.addClass(this.el.nativeElement, 'ui-resizable-column');\n            this.resizer = document.createElement('span');\n            this.resizer.className = 'ui-column-resizer ui-clickable';\n            this.el.nativeElement.appendChild(this.resizer);\n\n            this.zone.runOutsideAngular(() => {\n                this.resizerMouseDownListener = this.onMouseDown.bind(this);\n                this.resizer.addEventListener('mousedown', this.resizerMouseDownListener);\n            });\n        }\n    }\n\n    bindDocumentEvents() {\n        this.zone.runOutsideAngular(() => {\n            this.documentMouseMoveListener = this.onDocumentMouseMove.bind(this);\n            document.addEventListener('mousemove', this.documentMouseMoveListener);\n\n            this.documentMouseUpListener = this.onDocumentMouseUp.bind(this);\n            document.addEventListener('mouseup', this.documentMouseUpListener);\n        });\n    }\n\n    unbindDocumentEvents() {\n        if (this.documentMouseMoveListener) {\n            document.removeEventListener('mousemove', this.documentMouseMoveListener);\n            this.documentMouseMoveListener = null;\n        }\n\n        if (this.documentMouseUpListener) {\n            document.removeEventListener('mouseup', this.documentMouseUpListener);\n            this.documentMouseUpListener = null;\n        }\n    }\n\n    onMouseDown(event: MouseEvent) {\n        if (event.which === 1) {\n            this.dt.onColumnResizeBegin(event);\n            this.bindDocumentEvents();\n        }\n    }\n\n    onDocumentMouseMove(event: MouseEvent) {\n        this.dt.onColumnResize(event);\n    }\n\n    onDocumentMouseUp(event: MouseEvent) {\n        this.dt.onColumnResizeEnd(event, this.el.nativeElement);\n        this.unbindDocumentEvents();\n    }\n\n    isEnabled() {\n        return this.pResizableColumnDisabled !== true;\n    }\n\n    ngOnDestroy() {\n        if (this.resizerMouseDownListener) {\n            this.resizer.removeEventListener('mousedown', this.resizerMouseDownListener);\n        }\n\n        this.unbindDocumentEvents();\n    }\n}\n\n@Directive({\n    selector: '[pReorderableColumn]'\n})\nexport class ReorderableColumn implements AfterViewInit, OnDestroy {\n\n    @Input() pReorderableColumnDisabled: boolean;\n\n    dragStartListener: any;\n\n    dragOverListener: any;\n\n    dragEnterListener: any;\n\n    dragLeaveListener: any;\n\n    mouseDownListener: any;\n\n    constructor(public dt: Table, public el: ElementRef, public zone: NgZone) { }\n\n    ngAfterViewInit() {\n        if (this.isEnabled()) {\n            this.bindEvents();\n        }\n    }\n\n    bindEvents() {\n        this.zone.runOutsideAngular(() => {\n            this.mouseDownListener = this.onMouseDown.bind(this);\n            this.el.nativeElement.addEventListener('mousedown', this.mouseDownListener);\n\n            this.dragStartListener = this.onDragStart.bind(this);\n            this.el.nativeElement.addEventListener('dragstart', this.dragStartListener);\n\n            this.dragOverListener = this.onDragEnter.bind(this);\n            this.el.nativeElement.addEventListener('dragover', this.dragOverListener);\n\n            this.dragEnterListener = this.onDragEnter.bind(this);\n            this.el.nativeElement.addEventListener('dragenter', this.dragEnterListener);\n\n            this.dragLeaveListener = this.onDragLeave.bind(this);\n            this.el.nativeElement.addEventListener('dragleave', this.dragLeaveListener);\n        });\n    }\n\n    unbindEvents() {\n        if (this.mouseDownListener) {\n            document.removeEventListener('mousedown', this.mouseDownListener);\n            this.mouseDownListener = null;\n        }\n\n        if (this.dragOverListener) {\n            document.removeEventListener('dragover', this.dragOverListener);\n            this.dragOverListener = null;\n        }\n\n        if (this.dragEnterListener) {\n            document.removeEventListener('dragenter', this.dragEnterListener);\n            this.dragEnterListener = null;\n        }\n\n        if (this.dragEnterListener) {\n            document.removeEventListener('dragenter', this.dragEnterListener);\n            this.dragEnterListener = null;\n        }\n\n        if (this.dragLeaveListener) {\n            document.removeEventListener('dragleave', this.dragLeaveListener);\n            this.dragLeaveListener = null;\n        }\n    }\n\n    onMouseDown(event) {\n        if (event.target.nodeName === 'INPUT' || event.target.nodeName === 'TEXTAREA' || DomHandler.hasClass(event.target, 'ui-column-resizer'))\n            this.el.nativeElement.draggable = false;\n        else\n            this.el.nativeElement.draggable = true;\n    }\n\n    onDragStart(event) {\n        this.dt.onColumnDragStart(event, this.el.nativeElement);\n    }\n\n    onDragOver(event) {\n        event.preventDefault();\n    }\n\n    onDragEnter(event) {\n        this.dt.onColumnDragEnter(event, this.el.nativeElement);\n    }\n\n    onDragLeave(event) {\n        this.dt.onColumnDragLeave(event);\n    }\n\n    @HostListener('drop', ['$event'])\n    onDrop(event) {\n        if (this.isEnabled()) {\n            this.dt.onColumnDrop(event, this.el.nativeElement);\n        }\n    }\n\n    isEnabled() {\n        return this.pReorderableColumnDisabled !== true;\n    }\n\n    ngOnDestroy() {\n        this.unbindEvents();\n    }\n\n}\n\n@Directive({\n    selector: '[pEditableColumn]'\n})\nexport class EditableColumn implements AfterViewInit {\n\n    @Input(\"pEditableColumn\") data: any;\n\n    @Input(\"pEditableColumnField\") field: any;\n\n    @Input(\"pEditableColumnRowIndex\") rowIndex: number;\n\n    @Input() pEditableColumnDisabled: boolean;\n\n    @Input() pFocusCellSelector: string;\n\n    constructor(public dt: Table, public el: ElementRef, public zone: NgZone) {}\n\n    ngAfterViewInit() {\n        if (this.isEnabled()) {\n            DomHandler.addClass(this.el.nativeElement, 'ui-editable-column');\n        }\n    }\n\n    @HostListener('click', ['$event'])\n    onClick(event: MouseEvent) {\n        if (this.isEnabled()) {\n            this.dt.editingCellClick = true;\n\n            if (this.dt.editingCell) {\n                if (this.dt.editingCell !== this.el.nativeElement) {\n                    if (!this.dt.isEditingCellValid()) {\n                        return;\n                    }\n\n                    this.closeEditingCell(true, event);\n                    this.openCell();\n                }\n            }\n            else {\n                this.openCell();\n            }\n        }\n    }\n\n    openCell() {\n        this.dt.updateEditingCell(this.el.nativeElement, this.data, this.field, this.rowIndex);\n        DomHandler.addClass(this.el.nativeElement, 'ui-editing-cell');\n        this.dt.onEditInit.emit({field: this.field, data: this.data, index: this.rowIndex});\n        this.zone.runOutsideAngular(() => {\n            setTimeout(() => {\n                let focusCellSelector = this.pFocusCellSelector || 'input, textarea, select';\n                let focusableElement = DomHandler.findSingle(this.el.nativeElement, focusCellSelector);\n\n                if (focusableElement) {\n                    focusableElement.focus();\n                }\n            }, 50);\n        });\n    }\n\n    closeEditingCell(completed, event) {\n        if (completed)\n            this.dt.onEditComplete.emit({field: this.dt.editingCellField, data: this.dt.editingCellData, originalEvent: event, index: this.dt.editingCellRowIndex});\n        else\n            this.dt.onEditCancel.emit({field: this.dt.editingCellField, data: this.dt.editingCellData, originalEvent: event, index: this.dt.editingCellRowIndex});\n\n        DomHandler.removeClass(this.dt.editingCell, 'ui-editing-cell');\n        this.dt.editingCell = null;\n        this.dt.editingCellData = null;\n        this.dt.editingCellField = null;\n        this.dt.unbindDocumentEditListener();\n    }\n\n    @HostListener('keydown.enter', ['$event'])\n    onEnterKeyDown(event: KeyboardEvent) {\n        if (this.isEnabled()) {\n            if (this.dt.isEditingCellValid()) {\n                this.closeEditingCell(true, event);\n            }\n\n            event.preventDefault();\n        }\n    }\n\n    @HostListener('keydown.escape', ['$event'])\n    onEscapeKeyDown(event: KeyboardEvent) {\n        if (this.isEnabled()) {\n            if (this.dt.isEditingCellValid()) {\n                this.closeEditingCell(false, event);\n            }\n\n            event.preventDefault();\n        }\n    }\n\n    @HostListener('keydown.tab', ['$event'])\n    @HostListener('keydown.shift.tab', ['$event'])\n    @HostListener('keydown.meta.tab', ['$event'])\n    onShiftKeyDown(event: KeyboardEvent) {\n        if (this.isEnabled()) {\n            if (event.shiftKey)\n                this.moveToPreviousCell(event);\n            else{\n                this.moveToNextCell(event);\n            }\n        }\n    }\n\n    findCell(element) {\n        if (element) {\n            let cell = element;\n            while (cell && !DomHandler.hasClass(cell, 'ui-editing-cell')) {\n                cell = cell.parentElement;\n            }\n\n            return cell;\n        }\n        else {\n            return null;\n        }\n    }\n\n    moveToPreviousCell(event: KeyboardEvent) {\n        let currentCell = this.findCell(event.target);\n        if (currentCell) {\n            let targetCell = this.findPreviousEditableColumn(currentCell);\n\n            if (targetCell) {\n                if (this.dt.isEditingCellValid()) {\n                    this.closeEditingCell(true, event);\n                }\n\n                DomHandler.invokeElementMethod(event.target, 'blur');\n                DomHandler.invokeElementMethod(targetCell, 'click');\n                event.preventDefault();\n            }\n        }\n    }\n\n    moveToNextCell(event: KeyboardEvent) {\n        let currentCell = this.findCell(event.target);\n        if (currentCell) {\n            let targetCell = this.findNextEditableColumn(currentCell);\n\n            if (targetCell) {\n                if (this.dt.isEditingCellValid()) {\n                    this.closeEditingCell(true, event);\n                }\n\n                DomHandler.invokeElementMethod(event.target, 'blur');\n                DomHandler.invokeElementMethod(targetCell, 'click');\n                event.preventDefault();\n            }\n        }\n    }\n\n    findPreviousEditableColumn(cell: Element) {\n        let prevCell = cell.previousElementSibling;\n\n        if (!prevCell) {\n            let previousRow = cell.parentElement.previousElementSibling;\n            if (previousRow) {\n                prevCell = previousRow.lastElementChild;\n            }\n        }\n\n        if (prevCell) {\n            if (DomHandler.hasClass(prevCell, 'ui-editable-column'))\n                return prevCell;\n            else\n                return this.findPreviousEditableColumn(prevCell);\n        }\n        else {\n            return null;\n        }\n    }\n\n    findNextEditableColumn(cell: Element) {\n        let nextCell = cell.nextElementSibling;\n\n        if (!nextCell) {\n            let nextRow = cell.parentElement.nextElementSibling;\n            if (nextRow) {\n                nextCell = nextRow.firstElementChild;\n            }\n        }\n\n        if (nextCell) {\n            if (DomHandler.hasClass(nextCell, 'ui-editable-column'))\n                return nextCell;\n            else\n                return this.findNextEditableColumn(nextCell);\n        }\n        else {\n            return null;\n        }\n    }\n\n    isEnabled() {\n        return this.pEditableColumnDisabled !== true;\n    }\n\n}\n\n@Directive({\n    selector: '[pEditableRow]'\n})\nexport class EditableRow {\n\n    @Input(\"pEditableRow\") data: any;\n\n    @Input() pEditableRowDisabled: boolean;\n\n    constructor(public el: ElementRef) {}\n\n    isEnabled() {\n        return this.pEditableRowDisabled !== true;\n    }\n\n}\n\n@Directive({\n    selector: '[pInitEditableRow]'\n})\nexport class InitEditableRow {\n\n    constructor(public dt: Table, public editableRow: EditableRow) {}\n\n    @HostListener('click', ['$event'])\n    onClick(event: Event) {\n        this.dt.initRowEdit(this.editableRow.data);\n        event.preventDefault();\n    }\n\n}\n\n@Directive({\n    selector: '[pSaveEditableRow]'\n})\nexport class SaveEditableRow {\n\n    constructor(public dt: Table, public editableRow: EditableRow) {}\n\n    @HostListener('click', ['$event'])\n    onClick(event: Event) {\n        this.dt.saveRowEdit(this.editableRow.data, this.editableRow.el.nativeElement);\n        event.preventDefault();\n    }\n}\n\n@Directive({\n    selector: '[pCancelEditableRow]'\n})\nexport class CancelEditableRow {\n\n    constructor(public dt: Table, public editableRow: EditableRow) {}\n\n    @HostListener('click', ['$event'])\n    onClick(event: Event) {\n        this.dt.cancelRowEdit(this.editableRow.data);\n        event.preventDefault();\n    }\n}\n\n@Component({\n    selector: 'p-cellEditor',\n    template: `\n        <ng-container *ngIf=\"editing\">\n            <ng-container *ngTemplateOutlet=\"inputTemplate\"></ng-container>\n        </ng-container>\n        <ng-container *ngIf=\"!editing\">\n            <ng-container *ngTemplateOutlet=\"outputTemplate\"></ng-container>\n        </ng-container>\n    `\n})\nexport class CellEditor implements AfterContentInit {\n\n    @ContentChildren(PrimeTemplate) templates: QueryList<PrimeTemplate>;\n\n    inputTemplate: TemplateRef<any>;\n\n    outputTemplate: TemplateRef<any>;\n\n    constructor(public dt: Table, @Optional() public editableColumn: EditableColumn, @Optional() public editableRow: EditableRow) { }\n\n    ngAfterContentInit() {\n        this.templates.forEach((item) => {\n            switch (item.getType()) {\n                case 'input':\n                    this.inputTemplate = item.template;\n                    break;\n\n                case 'output':\n                    this.outputTemplate = item.template;\n                    break;\n            }\n        });\n    }\n\n    get editing(): boolean {\n        return (this.dt.editingCell && this.editableColumn && this.dt.editingCell === this.editableColumn.el.nativeElement) ||\n                (this.editableRow && this.dt.editMode === 'row' && this.dt.isRowEditing(this.editableRow.data));\n    }\n\n}\n\n@Component({\n    selector: 'p-tableRadioButton',\n    template: `\n        <div class=\"ui-radiobutton ui-widget\" (click)=\"onClick($event)\">\n            <div class=\"ui-helper-hidden-accessible\">\n                <input type=\"radio\" [attr.id]=\"inputId\" [attr.name]=\"name\" [checked]=\"checked\" (focus)=\"onFocus()\" (blur)=\"onBlur()\"\n                [disabled]=\"disabled\" [attr.aria-label]=\"ariaLabel\">\n            </div>\n            <div #box [ngClass]=\"{'ui-radiobutton-box ui-widget ui-state-default':true,\n                'ui-state-active':checked, 'ui-state-disabled':disabled}\" role=\"radio\" [attr.aria-checked]=\"checked\">\n                <span class=\"ui-radiobutton-icon ui-clickable\" [ngClass]=\"{'pi pi-circle-on':checked}\"></span>\n            </div>\n        </div>\n    `\n})\nexport class TableRadioButton  {\n\n    @Input() disabled: boolean;\n\n    @Input() value: any;\n\n    @Input() index: number;\n\n    @Input() inputId: string;\n\n    @Input() name: string;\n\n    @Input() ariaLabel: string;\n\n    @ViewChild('box') boxViewChild: ElementRef;\n\n    checked: boolean;\n\n    subscription: Subscription;\n\n    constructor(public dt: Table, public tableService: TableService) {\n        this.subscription = this.dt.tableService.selectionSource$.subscribe(() => {\n            this.checked = this.dt.isSelected(this.value);\n        });\n    }\n\n    ngOnInit() {\n        this.checked = this.dt.isSelected(this.value);\n    }\n\n    onClick(event: Event) {\n        if (!this.disabled) {\n            this.dt.toggleRowWithRadio({\n                originalEvent: event,\n                rowIndex: this.index\n            }, this.value);\n        }\n        DomHandler.clearSelection();\n    }\n\n    onFocus() {\n        DomHandler.addClass(this.boxViewChild.nativeElement, 'ui-state-focus');\n    }\n\n    onBlur() {\n        DomHandler.removeClass(this.boxViewChild.nativeElement, 'ui-state-focus');\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n\n}\n\n@Component({\n    selector: 'p-tableCheckbox',\n    template: `\n        <div class=\"ui-chkbox ui-widget\" (click)=\"onClick($event)\">\n            <div class=\"ui-helper-hidden-accessible\">\n                <input type=\"checkbox\" [attr.id]=\"inputId\" [attr.name]=\"name\" [checked]=\"checked\" (focus)=\"onFocus()\" (blur)=\"onBlur()\" [disabled]=\"disabled\"\n                [attr.required]=\"required\" [attr.aria-label]=\"ariaLabel\">\n            </div>\n            <div #box [ngClass]=\"{'ui-chkbox-box ui-widget ui-state-default':true,\n                'ui-state-active':checked, 'ui-state-disabled':disabled}\" role=\"checkbox\" [attr.aria-checked]=\"checked\">\n                <span class=\"ui-chkbox-icon ui-clickable\" [ngClass]=\"{'pi pi-check':checked}\"></span>\n            </div>\n        </div>\n    `\n})\nexport class TableCheckbox  {\n\n    @Input() disabled: boolean;\n\n    @Input() value: any;\n\n    @Input() index: number;\n\n    @Input() inputId: string;\n\n    @Input() name: string;\n\n    @Input() required: boolean;\n\n    @Input() ariaLabel: string;\n\n    @ViewChild('box') boxViewChild: ElementRef;\n\n    checked: boolean;\n\n    subscription: Subscription;\n\n    constructor(public dt: Table, public tableService: TableService) {\n        this.subscription = this.dt.tableService.selectionSource$.subscribe(() => {\n            this.checked = this.dt.isSelected(this.value);\n        });\n    }\n\n    ngOnInit() {\n        this.checked = this.dt.isSelected(this.value);\n    }\n\n    onClick(event: Event) {\n        if (!this.disabled) {\n            this.dt.toggleRowWithCheckbox({\n                originalEvent: event,\n                rowIndex: this.index\n            }, this.value);\n        }\n        DomHandler.clearSelection();\n    }\n\n    onFocus() {\n        DomHandler.addClass(this.boxViewChild.nativeElement, 'ui-state-focus');\n    }\n\n    onBlur() {\n        DomHandler.removeClass(this.boxViewChild.nativeElement, 'ui-state-focus');\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n\n}\n\n@Component({\n    selector: 'p-tableHeaderCheckbox',\n    template: `\n        <div class=\"ui-chkbox ui-widget\" (click)=\"onClick($event)\">\n            <div class=\"ui-helper-hidden-accessible\">\n                <input #cb type=\"checkbox\" [attr.id]=\"inputId\" [attr.name]=\"name\" [checked]=\"checked\" (focus)=\"onFocus()\" (blur)=\"onBlur()\"\n                [disabled]=\"isDisabled()\" [attr.aria-label]=\"ariaLabel\">\n            </div>\n            <div #box [ngClass]=\"{'ui-chkbox-box ui-widget ui-state-default':true,\n                'ui-state-active':checked, 'ui-state-disabled': isDisabled()}\" role=\"checkbox\" [attr.aria-checked]=\"checked\">\n                <span class=\"ui-chkbox-icon ui-clickable\" [ngClass]=\"{'pi pi-check':checked}\"></span>\n            </div>\n        </div>\n    `\n})\nexport class TableHeaderCheckbox  {\n\n    @ViewChild('box') boxViewChild: ElementRef;\n\n    @Input() disabled: boolean;\n\n    @Input() inputId: string;\n\n    @Input() name: string;\n\n    @Input() ariaLabel: string;\n\n    checked: boolean;\n\n    selectionChangeSubscription: Subscription;\n\n    valueChangeSubscription: Subscription;\n\n    constructor(public dt: Table, public tableService: TableService) {\n        this.valueChangeSubscription = this.dt.tableService.valueSource$.subscribe(() => {\n            this.checked = this.updateCheckedState();\n        });\n\n        this.selectionChangeSubscription = this.dt.tableService.selectionSource$.subscribe(() => {\n            this.checked = this.updateCheckedState();\n        });\n    }\n\n    ngOnInit() {\n        this.checked = this.updateCheckedState();\n    }\n\n    onClick(event: Event) {\n        if (!this.disabled) {\n            if (this.dt.value && this.dt.value.length > 0) {\n                this.dt.toggleRowsWithCheckbox(event, !this.checked);\n            }\n        }\n\n        DomHandler.clearSelection();\n    }\n\n    onFocus() {\n        DomHandler.addClass(this.boxViewChild.nativeElement, 'ui-state-focus');\n    }\n\n    onBlur() {\n        DomHandler.removeClass(this.boxViewChild.nativeElement, 'ui-state-focus');\n    }\n\n    isDisabled() {\n        return this.disabled || !this.dt.value || !this.dt.value.length;\n    }\n\n    ngOnDestroy() {\n        if (this.selectionChangeSubscription) {\n            this.selectionChangeSubscription.unsubscribe();\n        }\n\n        if (this.valueChangeSubscription) {\n            this.valueChangeSubscription.unsubscribe();\n        }\n    }\n\n    updateCheckedState() {\n        if (this.dt.filteredValue) {\n            const val = this.dt.filteredValue;\n            return (val && val.length > 0 && this.dt.selection && this.dt.selection.length > 0 && this.isAllFilteredValuesChecked());\n        }\n        else {\n            const val = this.dt.value;\n            return (val && val.length > 0 && this.dt.selection && this.dt.selection.length > 0 && this.dt.selection.length === val.length);\n        }\n    }\n\n    isAllFilteredValuesChecked() {\n        if (!this.dt.filteredValue) {\n            return false;\n        }\n        else {\n            for (let rowData of this.dt.filteredValue) {\n                if (!this.dt.isSelected(rowData)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n\n}\n\n@Directive({\n    selector: '[pReorderableRowHandle]'\n})\nexport class ReorderableRowHandle implements AfterViewInit {\n\n    @Input(\"pReorderableRowHandle\") index: number;\n\n    constructor(public el: ElementRef) {}\n\n    ngAfterViewInit() {\n        DomHandler.addClass(this.el.nativeElement, 'ui-table-reorderablerow-handle');\n    }\n}\n\n@Directive({\n    selector: '[pReorderableRow]'\n})\nexport class ReorderableRow implements AfterViewInit {\n\n    @Input(\"pReorderableRow\") index: number;\n\n    @Input() pReorderableRowDisabled: boolean;\n\n    mouseDownListener: any;\n\n    dragStartListener: any;\n\n    dragEndListener: any;\n\n    dragOverListener: any;\n\n    dragLeaveListener: any;\n\n    dropListener: any;\n\n    constructor(public dt: Table, public el: ElementRef, public zone: NgZone) {}\n\n    ngAfterViewInit() {\n        if (this.isEnabled()) {\n            this.el.nativeElement.droppable = true;\n            this.bindEvents();\n        }\n    }\n\n    bindEvents() {\n        this.zone.runOutsideAngular(() => {\n            this.mouseDownListener = this.onMouseDown.bind(this);\n            this.el.nativeElement.addEventListener('mousedown', this.mouseDownListener);\n\n            this.dragStartListener = this.onDragStart.bind(this);\n            this.el.nativeElement.addEventListener('dragstart', this.dragStartListener);\n\n            this.dragEndListener = this.onDragEnd.bind(this);\n            this.el.nativeElement.addEventListener('dragend', this.dragEndListener);\n\n            this.dragOverListener = this.onDragOver.bind(this);\n            this.el.nativeElement.addEventListener('dragover', this.dragOverListener);\n\n            this.dragLeaveListener = this.onDragLeave.bind(this);\n            this.el.nativeElement.addEventListener('dragleave', this.dragLeaveListener);\n        });\n    }\n\n    unbindEvents() {\n        if (this.mouseDownListener) {\n            document.removeEventListener('mousedown', this.mouseDownListener);\n            this.mouseDownListener = null;\n        }\n\n        if (this.dragStartListener) {\n            document.removeEventListener('dragstart', this.dragStartListener);\n            this.dragStartListener = null;\n        }\n\n        if (this.dragEndListener) {\n            document.removeEventListener('dragend', this.dragEndListener);\n            this.dragEndListener = null;\n        }\n\n        if (this.dragOverListener) {\n            document.removeEventListener('dragover', this.dragOverListener);\n            this.dragOverListener = null;\n        }\n\n        if (this.dragLeaveListener) {\n            document.removeEventListener('dragleave', this.dragLeaveListener);\n            this.dragLeaveListener = null;\n        }\n    }\n\n    onMouseDown(event) {\n        if (DomHandler.hasClass(event.target, 'ui-table-reorderablerow-handle'))\n            this.el.nativeElement.draggable = true;\n        else\n            this.el.nativeElement.draggable = false;\n    }\n\n    onDragStart(event) {\n        this.dt.onRowDragStart(event, this.index);\n    }\n\n    onDragEnd(event) {\n        this.dt.onRowDragEnd(event);\n        this.el.nativeElement.draggable = false;\n    }\n\n    onDragOver(event) {\n        this.dt.onRowDragOver(event, this.index, this.el.nativeElement);\n        event.preventDefault();\n    }\n\n    onDragLeave(event) {\n        this.dt.onRowDragLeave(event, this.el.nativeElement);\n    }\n\n    isEnabled() {\n        return this.pReorderableRowDisabled !== true;\n    }\n\n    @HostListener('drop', ['$event'])\n    onDrop(event) {\n        if (this.isEnabled() && this.dt.rowDragging) {\n            this.dt.onRowDrop(event, this.el.nativeElement);\n        }\n\n        event.preventDefault()\n    }\n}\n\n@NgModule({\n    imports: [CommonModule,PaginatorModule,ScrollingModule],\n    exports: [Table,SharedModule,SortableColumn,SelectableRow,RowToggler,ContextMenuRow,ResizableColumn,ReorderableColumn,EditableColumn,CellEditor,SortIcon,TableRadioButton,TableCheckbox,TableHeaderCheckbox,ReorderableRowHandle,ReorderableRow,SelectableRowDblClick,EditableRow,InitEditableRow,SaveEditableRow,CancelEditableRow,ScrollingModule],\n    declarations: [Table,SortableColumn,SelectableRow,RowToggler,ContextMenuRow,ResizableColumn,ReorderableColumn,EditableColumn,CellEditor,TableBody,ScrollableView,SortIcon,TableRadioButton,TableCheckbox,TableHeaderCheckbox,ReorderableRowHandle,ReorderableRow,SelectableRowDblClick,EditableRow,InitEditableRow,SaveEditableRow,CancelEditableRow]\n})\nexport class TableModule { }\n"]}