{"version":3,"sources":["ng://primeng-lts/treetable/treetable.ts"],"names":["TreeTableService","this","sortSource","Subject","selectionSource","contextMenuSource","uiUpdateSource","totalRecordsSource","sortSource$","asObservable","selectionSource$","contextMenuSource$","uiUpdateSource$","totalRecordsSource$","prototype","onSort","sortMeta","next","onSelectionChange","onContextMenu","node","onUIUpdate","value","onTotalRecordsChange","__decorate","Injectable","TreeTable","el","zone","tableService","lazy","lazyLoadOnInit","first","pageLinks","alwaysShowPaginator","paginatorPosition","currentPageReportTemplate","showFirstLastIcon","defaultSortOrder","sortMode","resetPageOnSort","selectionChange","EventEmitter","contextMenuSelectionChange","contextMenuSelectionMode","compareSelectionBy","loadingIcon","showLoader","virtualScrollDelay","virtualRowHeight","columnResizeMode","rowTrackBy","index","item","filters","filterDelay","filterMode","onFilter","onNodeExpand","onNodeCollapse","onPage","onLazyLoad","sortFunction","onColResize","onColReorder","onNodeSelect","onNodeUnselect","onContextMenuSelect","onHeaderCheckboxToggle","onEditInit","onEditComplete","onEditCancel","_value","_totalRecords","_sortOrder","selectionKeys","ngOnInit","emit","createLazyLoadMetadata","initialized","ngAfterContentInit","_this","templates","forEach","getType","captionTemplate","template","headerTemplate","bodyTemplate","loadingBodyTemplate","footerTemplate","summaryTemplate","colGroupTemplate","emptyMessageTemplate","paginatorLeftTemplate","paginatorRightTemplate","frozenHeaderTemplate","frozenBodyTemplate","frozenFooterTemplate","frozenColGroupTemplate","paginatorDropdownItemTemplate","ngOnChanges","simpleChange","currentValue","totalRecords","length","sortField","sortSingle","multiSortMeta","sortMultiple","hasFilter","_filter","updateSerializedValue","_sortField","sortOrder","_multiSortMeta","selection","_selection","preventSelectionSetterPropagation","updateSelectionKeys","Object","defineProperty","val","serializedValue","paginator","serializePageNodes","serializeNodes","filteredNodes","parent","nodes","level","visible","nodes_1","__values","nodes_1_1","done","rowNode","expanded","push","children","data","i","rows","dataKey","Array","isArray","_b","_c","String","ObjectUtils","resolveFieldData","onPageChange","event","scrollable","resetScrollTop","sort","originalEvent","field","metaKey","ctrlKey","getSortMeta","order","sortNodes","customSort","mode","node1","node2","value1","value2","result","localeCompare","undefined","numeric","nodes_2","nodes_2_1","sortMultipleNodes","multisortmeta","multisortField","nodes_3","nodes_3_1","isSorted","sorted","globalFilter","virtualScroll","scrollToVirtualIndex","scrollTo","top","scrollableViewChild","scrollableFrozenViewChild","options","isEmpty","getBlockableElement","nativeElement","onColumnResizeBegin","containerLeft","DomHandler","getOffset","containerViewChild","left","lastResizerHelperX","pageX","scrollLeft","preventDefault","onColumnResize","addClass","resizeHelperViewChild","style","height","offsetHeight","display","onColumnResizeEnd","column","delta","offsetLeft","columnWidth","offsetWidth","newColumnWidth","minWidth","parseInt","nextColumn","nextElementSibling","offsetParent","nextColumnWidth","nextColumnMinWidth","scrollableView","findParentScrollableView","scrollableBodyTable","findSingle","scrollableHeaderTable","scrollableFooterTable","resizeColumnIndex","resizeColGroup","width","scrollableBody_1","scrollableHeader","scrollableFooter","scrollableBodyTableWidth","scrollableHeaderTableWidth","isContainerInViewport","setWidth","container","table","calculateScrollbarWidth","tableViewChild","containerWidth","element","removeClass","parent_1","parentElement","hasClass","colGroup","nodeName","col","nextCol","onColumnDragStart","columnElement","reorderIconWidth","getHiddenElementOuterWidth","reorderIndicatorUpViewChild","reorderIconHeight","getHiddenElementOuterHeight","reorderIndicatorDownViewChild","draggedColumn","dataTransfer","setData","onColumnDragEnter","dropHeader","reorderableColumns","containerOffset","dropHeaderOffset","targetLeft","columnCenter","Math","ceil","dropPosition","dropEffect","onColumnDragLeave","onColumnDrop","dropColumn","dragIndex","indexWithinGroup","dropIndex","allowDrop","reorderArray","columns","draggable","handleRowClick","targetNode","target","selectionMode","selected","isSelected","metaSelection","rowTouched","metaKeySelection","dataKeyValue","isSingleSelectionMode","selectionIndex_1","findIndexInSelection","filter","type","isMultipleSelectionMode","__spread","rowIndex","selectionIndex_2","handleRowTouchEnd","handleRowRightClick","contextMenu","contextMenuSelection","show","toggleNodeWithCheckbox","propagateSelectionDown","propagateSelectionUp","toggleNodesWithCheckbox","check","slice","data_1","data_1_1","checked","select","selectedChildCount","childPartialSelected","child","partialSelected","index_1","equals","matchMode","filterTimeout","clearTimeout","isFilterBlank","setTimeout","filterGlobal","trim","globalFilterFieldsArray","globalFilterFields","Error","isStrictMode","isValueChanged","copyNode","__assign","localMatch","globalMatch","paramsWithoutNode","prop","hasOwnProperty","filterMeta","filterField","filterValue","filterMatchMode","filterConstraint","FilterUtils","findFilteredNodes","isFilterMatched","j","copyNodeForGlobal","matches","filteredValue","matched","childNodes","childNodes_1","childNodes_1_1","childNode","copyChildNode","_a","filterLocale","isNodeLeaf","leaf","empty","reset","updateEditingCell","cell","editingCell","editingCellData","editingCellField","bindDocumentEditListener","isEditingCellValid","find","documentEditListener","editingCellClick","unbindDocumentEditListener","document","addEventListener","removeEventListener","ngOnDestroy","ElementRef","NgZone","Input","Output","ViewChild","ContentChildren","PrimeTemplate","Component","selector","providers","changeDetection","ChangeDetectionStrategy","Default","TTBody","tt","treeTableService","cd","subscription","subscribe","detectChanges","unsubscribe","ChangeDetectorRef","TTScrollableView","runOutsideAngular","alignScrollBar","_scrollHeight","includes","console","log","virtualScrollBody","ngAfterViewChecked","ngAfterViewInit","frozen","scrollableAlignerViewChild","calculateScrollbarHeight","frozenColumns","frozenView","previousElementSibling","frozenSiblingBody","bindEvents","scrollHeaderViewChild","headerScrollListener","onHeaderScroll","bind","scrollHeaderBoxViewChild","scrollFooterViewChild","footerScrollListener","onFooterScroll","bodyScrollListener","onBodyScroll","getElementRef","scrollBodyViewChild","unbindEvents","preventBodyScrollPropagation","marginLeft","scrollFooterBoxViewChild","scrollTop","scrollToIndex","hasVerticalOverflow","getDataLength","getViewportSize","getOuterHeight","scrollTableViewChild","scrollBarWidth","marginRight","CdkVirtualScrollViewport","TTSortableColumn","isEnabled","updateSortState","onClick","clearSelection","onEnterKey","ttSortableColumnDisabled","HostListener","Directive","host","[class.ui-sortable-column]","[class.ui-state-highlight]","[attr.tabindex]","TTSortIcon","TTResizableColumn","resizer","createElement","className","appendChild","resizerMouseDownListener","onMouseDown","bindDocumentEvents","documentMouseMoveListener","onDocumentMouseMove","documentMouseUpListener","onDocumentMouseUp","unbindDocumentEvents","ttResizableColumnDisabled","TTReorderableColumn","mouseDownListener","dragStartListener","onDragStart","dragOverListener","onDragEnter","dragEnterListener","dragLeaveListener","onDragLeave","onDragOver","onDrop","ttReorderableColumnDisabled","TTSelectableRow","which","onTouchEnd","ttSelectableRowDisabled","TTSelectableRowDblClick","TTContextMenuRow","focus","ttContextMenuRowDisabled","[class.ui-contextmenu-selected]","TTCheckbox","disabled","onFocus","boxViewChild","onBlur","TTHeaderCheckbox","valueChangeSubscription","updateCheckedState","selectionChangeSubscription","data_2","data_2_1","TTEditableColumn","openCell","focusable","closeEditingCell","onKeyDown","keyCode","shiftKey","moveToPreviousCell","moveToNextCell","findCell","currentCell","targetCell","findPreviousEditableColumn","invokeElementMethod","findNextEditableColumn","prevCell","previousRow","lastElementChild","nextCell","nextRow","firstElementChild","ttEditableColumnDisabled","TreeTableCellEditor","editableColumn","inputTemplate","outputTemplate","TTRow","prevRow","toggleRowIndex","restoreFocus","row","TreeTableToggler","TreeTableModule","NgModule","imports","CommonModule","PaginatorModule","ScrollingModule","exports","SharedModule","declarations"],"mappings":"ikEAAAA,EAAA,WAeA,SAAAA,IAEYC,KAAAC,WAAa,IAAIC,EAAAA,QACjBF,KAAAG,gBAAkB,IAAID,EAAAA,QACtBF,KAAAI,kBAAoB,IAAIF,EAAAA,QACxBF,KAAAK,eAAiB,IAAIH,EAAAA,QACrBF,KAAAM,mBAAqB,IAAIJ,EAAAA,QAEjCF,KAAAO,YAAcP,KAAKC,WAAWO,eAC9BR,KAAAS,iBAAmBT,KAAKG,gBAAgBK,eACxCR,KAAAU,mBAAqBV,KAAKI,kBAAkBI,eAC5CR,KAAAW,gBAAkBX,KAAKK,eAAeG,eACtCR,KAAAY,oBAAsBZ,KAAKM,mBAAmBE,eAqBlD,OAnBIT,EAAAc,UAAAC,OAAA,SAAOC,GACHf,KAAKC,WAAWe,KAAKD,IAGzBhB,EAAAc,UAAAI,kBAAA,WACIjB,KAAKG,gBAAgBa,QAGzBjB,EAAAc,UAAAK,cAAA,SAAcC,GACVnB,KAAKI,kBAAkBY,KAAKG,IAGhCpB,EAAAc,UAAAO,WAAA,SAAWC,GACPrB,KAAKK,eAAeW,KAAKK,IAG7BtB,EAAAc,UAAAS,qBAAA,SAAqBD,GACjBrB,KAAKM,mBAAmBU,KAAKK,IA/BxBtB,EAAgBwB,EAAA,CAD5BC,EAAAA,cACYzB,GAfb,gBA4ZI,SAAA0B,EAAmBC,EAAuBC,EAAqBC,GAA5C5B,KAAA0B,GAAAA,EAAuB1B,KAAA2B,KAAAA,EAAqB3B,KAAA4B,aAAAA,EAvStD5B,KAAA6B,MAAgB,EAEhB7B,KAAA8B,gBAA0B,EAM1B9B,KAAA+B,MAAgB,EAEhB/B,KAAAgC,UAAoB,EAIpBhC,KAAAiC,qBAA+B,EAE/BjC,KAAAkC,kBAA4B,SAI5BlC,KAAAmC,0BAAoC,gCAIpCnC,KAAAoC,mBAA6B,EAE7BpC,KAAAqC,iBAA2B,EAE3BrC,KAAAsC,SAAmB,SAEnBtC,KAAAuC,iBAA2B,EAM1BvC,KAAAwC,gBAAqC,IAAIC,EAAAA,aAIzCzC,KAAA0C,2BAAgD,IAAID,EAAAA,aAErDzC,KAAA2C,yBAAmC,WAMnC3C,KAAA4C,mBAA6B,aAM7B5C,KAAA6C,YAAsB,gBAEtB7C,KAAA8C,YAAsB,EAQtB9C,KAAA+C,mBAA6B,IAE7B/C,KAAAgD,iBAA2B,GAY3BhD,KAAAiD,iBAA2B,MAM3BjD,KAAAkD,WAAuB,SAACC,EAAeC,GAAc,OAAAA,GAErDpD,KAAAqD,QAA4C,GAI5CrD,KAAAsD,YAAsB,IAEtBtD,KAAAuD,WAAqB,UAIpBvD,KAAAwD,SAA8B,IAAIf,EAAAA,aAElCzC,KAAAyD,aAAkC,IAAIhB,EAAAA,aAEtCzC,KAAA0D,eAAoC,IAAIjB,EAAAA,aAExCzC,KAAA2D,OAA4B,IAAIlB,EAAAA,aAEhCzC,KAAAc,OAA4B,IAAI2B,EAAAA,aAEhCzC,KAAA4D,WAAgC,IAAInB,EAAAA,aAEpCzC,KAAA6D,aAAkC,IAAIpB,EAAAA,aAEtCzC,KAAA8D,YAAiC,IAAIrB,EAAAA,aAErCzC,KAAA+D,aAAkC,IAAItB,EAAAA,aAEtCzC,KAAAgE,aAAkC,IAAIvB,EAAAA,aAEtCzC,KAAAiE,eAAoC,IAAIxB,EAAAA,aAExCzC,KAAAkE,oBAAyC,IAAIzB,EAAAA,aAE7CzC,KAAAmE,uBAA4C,IAAI1B,EAAAA,aAEhDzC,KAAAoE,WAAgC,IAAI3B,EAAAA,aAEpCzC,KAAAqE,eAAoC,IAAI5B,EAAAA,aAExCzC,KAAAsE,aAAkC,IAAI7B,EAAAA,aAkBhDzC,KAAAuE,OAAqB,GAIrBvE,KAAAwE,cAAwB,EAMxBxE,KAAAyE,WAAqB,EAkDrBzE,KAAA0E,cAAqB,GA4yCzB,OA1xCIjD,EAAAZ,UAAA8D,SAAA,WACQ3E,KAAK6B,MAAQ7B,KAAK8B,gBAClB9B,KAAK4D,WAAWgB,KAAK5E,KAAK6E,0BAE9B7E,KAAK8E,aAAc,GAGvBrD,EAAAZ,UAAAkE,mBAAA,WAAA,IAAAC,EAAAhF,KACIA,KAAKiF,UAAUC,SAAQ,SAAC9B,GACpB,OAAQA,EAAK+B,WACT,IAAK,UACDH,EAAKI,gBAAkBhC,EAAKiC,SAChC,MAEA,IAAK,SACDL,EAAKM,eAAiBlC,EAAKiC,SAC/B,MAEA,IAAK,OACDL,EAAKO,aAAenC,EAAKiC,SAC7B,MAEA,IAAK,cACDL,EAAKQ,oBAAsBpC,EAAKiC,SACpC,MAEA,IAAK,SACDL,EAAKS,eAAiBrC,EAAKiC,SAC/B,MAEA,IAAK,UACDL,EAAKU,gBAAkBtC,EAAKiC,SAChC,MAEA,IAAK,WACDL,EAAKW,iBAAmBvC,EAAKiC,SACjC,MAEA,IAAK,eACDL,EAAKY,qBAAuBxC,EAAKiC,SACrC,MAEA,IAAK,gBACDL,EAAKa,sBAAwBzC,EAAKiC,SACtC,MAEA,IAAK,iBACDL,EAAKc,uBAAyB1C,EAAKiC,SACvC,MAEA,IAAK,eACDL,EAAKe,qBAAuB3C,EAAKiC,SACrC,MAEA,IAAK,aACDL,EAAKgB,mBAAqB5C,EAAKiC,SACnC,MAEA,IAAK,eACDL,EAAKiB,qBAAuB7C,EAAKiC,SACrC,MAEA,IAAK,iBACDL,EAAKkB,uBAAyB9C,EAAKiC,SACvC,MAEA,IAAK,wBACDL,EAAKmB,8BAAgC/C,EAAKiC,cAQ1D5D,EAAAZ,UAAAuF,YAAA,SAAYC,GACJA,EAAahF,QACbrB,KAAKuE,OAAS8B,EAAahF,MAAMiF,aAE5BtG,KAAK6B,OACN7B,KAAKuG,aAAgBvG,KAAKuE,OAASvE,KAAKuE,OAAOiC,OAAS,EAEnC,UAAjBxG,KAAKsC,UAAwBtC,KAAKyG,UAClCzG,KAAK0G,aACiB,YAAjB1G,KAAKsC,UAA0BtC,KAAK2G,cACzC3G,KAAK4G,eACA5G,KAAK6G,aACV7G,KAAK8G,WAGb9G,KAAK+G,wBACL/G,KAAK4B,aAAaR,WAAWpB,KAAKqB,QAGlCgF,EAAaI,YACbzG,KAAKgH,WAAaX,EAAaI,UAAUH,aAGnCtG,KAAK6B,OAAQ7B,KAAK8E,aACE,WAAlB9E,KAAKsC,UACLtC,KAAK0G,cAKbL,EAAaY,YACbjH,KAAKyE,WAAa4B,EAAaY,UAAUX,aAGnCtG,KAAK6B,OAAQ7B,KAAK8E,aACE,WAAlB9E,KAAKsC,UACLtC,KAAK0G,cAKbL,EAAaM,gBACb3G,KAAKkH,eAAiBb,EAAaM,cAAcL,aAC3B,aAAlBtG,KAAKsC,UACLtC,KAAK4G,gBAITP,EAAac,YACbnH,KAAKoH,WAAaf,EAAac,UAAUb,aAEpCtG,KAAKqH,oCACNrH,KAAKsH,sBACLtH,KAAK4B,aAAaX,qBAEtBjB,KAAKqH,mCAAoC,IAIxCE,OAAAC,eAAI/F,EAAAZ,UAAA,QAAK,KAAT,WACL,OAAOb,KAAKuE,YAEhB,SAAUkD,GACNzH,KAAKuE,OAASkD,mCAGlBhG,EAAAZ,UAAAkG,sBAAA,WACI/G,KAAK0H,gBAAkB,GAEnB1H,KAAK2H,UACL3H,KAAK4H,qBAEL5H,KAAK6H,eAAe,KAAM7H,KAAK8H,eAAe9H,KAAKqB,MAAO,GAAG,IAGrEI,EAAAZ,UAAAgH,eAAA,SAAeE,EAAQC,EAAOC,EAAOC,WACjC,GAAIF,GAASA,EAAMxB,WACf,IAAgB,IAAA2B,EAAAC,EAAAJ,GAAKK,EAAAF,EAAAnH,QAAAqH,EAAAC,KAAAD,EAAAF,EAAAnH,OAAE,CAAnB,IAAIG,EAAIkH,EAAAhH,MACRF,EAAK4G,OAASA,EACd,IAAMQ,EAAU,CACZpH,KAAMA,EACN4G,OAAQA,EACRE,MAAOA,EACPC,QAASA,KAAYH,GAASA,EAAOS,WAEzCxI,KAAK0H,gBAAgBe,KAAKF,GAEtBA,EAAQL,SAAW/G,EAAKqH,UACxBxI,KAAK6H,eAAe1G,EAAMA,EAAKuH,SAAUT,EAAQ,EAAGM,EAAQL,6GAM5EzG,EAAAZ,UAAA+G,mBAAA,WACI,IAAIe,EAAO3I,KAAK8H,eAAiB9H,KAAKqB,MAEtC,GADArB,KAAK0H,gBAAkB,GACnBiB,GAAQA,EAAKnC,OAGb,IAFA,IAAMzE,EAAQ/B,KAAK6B,KAAO,EAAI7B,KAAK+B,MAE3B6G,EAAI7G,EAAO6G,EAAK7G,EAAQ/B,KAAK6I,KAAOD,IAAK,CAC7C,IAAIzH,EAAOwH,EAAKC,GACZzH,IACAnB,KAAK0H,gBAAgBe,KAAK,CACtBtH,KAAMA,EACN4G,OAAQ,KACRE,MAAO,EACPC,SAAS,IAGblI,KAAK6H,eAAe1G,EAAMA,EAAKuH,SAAU,GAAG,MAMnDnB,OAAAC,eAAI/F,EAAAZ,UAAA,eAAY,KAAhB,WACL,OAAOb,KAAKwE,mBAEhB,SAAiBiD,GACbzH,KAAKwE,cAAgBiD,EACrBzH,KAAK4B,aAAaN,qBAAqBtB,KAAKwE,gDAGvC+C,OAAAC,eAAI/F,EAAAZ,UAAA,YAAS,KAAb,WACL,OAAOb,KAAKgH,gBAGhB,SAAcS,GACVzH,KAAKgH,WAAaS,mCAGbF,OAAAC,eAAI/F,EAAAZ,UAAA,YAAS,KAAb,WACL,OAAOb,KAAKyE,gBAEhB,SAAcgD,GACVzH,KAAKyE,WAAagD,mCAGbF,OAAAC,eAAI/F,EAAAZ,UAAA,gBAAa,KAAjB,WACL,OAAOb,KAAKkH,oBAGhB,SAAkBO,GACdzH,KAAKkH,eAAiBO,mCAGjBF,OAAAC,eAAI/F,EAAAZ,UAAA,YAAS,KAAb,WACL,OAAOb,KAAKoH,gBAGhB,SAAcK,GACVzH,KAAKoH,WAAaK,mCAGtBhG,EAAAZ,UAAAyG,oBAAA,mBACI,GAAItH,KAAK8I,SAAW9I,KAAKoH,WAErB,GADApH,KAAK0E,cAAgB,GACjBqE,MAAMC,QAAQhJ,KAAKoH,gBACnB,IAAgB,IAAA6B,EAAAb,EAAApI,KAAKoH,YAAU8B,EAAAD,EAAAjI,QAAAkI,EAAAZ,KAAAY,EAAAD,EAAAjI,OAAE,CAA7B,IAAIG,EAAI+H,EAAA7H,MACRrB,KAAK0E,cAAcyE,OAAOC,EAAAA,YAAYC,iBAAiBlI,EAAKwH,KAAM3I,KAAK8I,WAAa,yGAIxF9I,KAAK0E,cAAcyE,OAAOC,EAAAA,YAAYC,iBAAiBrJ,KAAKoH,WAAWuB,KAAM3I,KAAK8I,WAAa,GAK3GrH,EAAAZ,UAAAyI,aAAA,SAAaC,GACTvJ,KAAK+B,MAAQwH,EAAMxH,MACnB/B,KAAK6I,KAAOU,EAAMV,KAEd7I,KAAK6B,KACL7B,KAAK4D,WAAWgB,KAAK5E,KAAK6E,0BAE1B7E,KAAK4H,qBAET5H,KAAK2D,OAAOiB,KAAK,CACb7C,MAAO/B,KAAK+B,MACZ8G,KAAM7I,KAAK6I,OAGf7I,KAAK4B,aAAaR,WAAWpB,KAAKqB,OAE9BrB,KAAKwJ,YACLxJ,KAAKyJ,kBAIbhI,EAAAZ,UAAA6I,KAAA,SAAKH,GACD,IAAII,EAAgBJ,EAAMI,cAW1B,GATsB,WAAlB3J,KAAKsC,WACLtC,KAAKyE,WAAczE,KAAKyG,YAAc8C,EAAMK,OAA2B,EAAlB5J,KAAKiH,UAAiBjH,KAAKqC,iBAChFrC,KAAKgH,WAAauC,EAAMK,MACxB5J,KAAK0G,aAED1G,KAAKuC,iBAAmBvC,KAAKwJ,YAC7BxJ,KAAKyJ,kBAGS,aAAlBzJ,KAAKsC,SAAyB,CAC9B,IAAIuH,EAAUF,EAAcE,SAAWF,EAAcG,QACjD/I,EAAWf,KAAK+J,YAAYR,EAAMK,OAElC7I,EACK8I,EAQD9I,EAASiJ,OAA0B,EAAlBjJ,EAASiJ,OAP1BhK,KAAKkH,eAAiB,CAAC,CAAE0C,MAAOL,EAAMK,MAAOI,OAAyB,EAAlBjJ,EAASiJ,QAEzDhK,KAAKuC,iBAAmBvC,KAAKwJ,YAC7BxJ,KAAKyJ,mBAQRI,GAAY7J,KAAK2G,gBAClB3G,KAAKkH,eAAiB,GAElBlH,KAAKuC,iBAAmBvC,KAAKwJ,YAC7BxJ,KAAKyJ,kBAGbzJ,KAAK2G,cAAc8B,KAAK,CAAEmB,MAAOL,EAAMK,MAAOI,MAAOhK,KAAKqC,oBAG9DrC,KAAK4G,iBAIbnF,EAAAZ,UAAA6F,WAAA,WACI,GAAI1G,KAAKyG,WAAazG,KAAKiH,UAAW,CAC9BjH,KAAK6B,KACL7B,KAAK4D,WAAWgB,KAAK5E,KAAK6E,0BAErB7E,KAAKqB,QACVrB,KAAKiK,UAAUjK,KAAKqB,OAEhBrB,KAAK6G,aACL7G,KAAK8G,WAIb,IAAI/F,EAAqB,CACrB6I,MAAO5J,KAAKyG,UACZuD,MAAOhK,KAAKiH,WAGhBjH,KAAKc,OAAO8D,KAAK7D,GACjBf,KAAK4B,aAAad,OAAOC,GACzBf,KAAK+G,0BAIbtF,EAAAZ,UAAAoJ,UAAA,SAAUjC,WAAVhD,EAAAhF,KACI,GAAKgI,GAA0B,IAAjBA,EAAMxB,OAApB,CAIIxG,KAAKkK,WACLlK,KAAK6D,aAAae,KAAK,CACnB+D,KAAMX,EACNmC,KAAMnK,KAAKsC,SACXsH,MAAO5J,KAAKyG,UACZuD,MAAOhK,KAAKiH,YAIhBe,EAAM0B,MAAK,SAACU,EAAOC,GACf,IAAIC,EAASlB,EAAAA,YAAYC,iBAAiBe,EAAMzB,KAAM3D,EAAKyB,WACvD8D,EAASnB,EAAAA,YAAYC,iBAAiBgB,EAAM1B,KAAM3D,EAAKyB,WACvD+D,EAAS,KAab,OAVIA,EADU,MAAVF,GAA4B,MAAVC,GACR,EACK,MAAVD,GAA4B,MAAVC,EACd,EACM,MAAVD,GAA4B,MAAVC,EACd,EACc,iBAAXD,GAAyC,iBAAXC,EACjCD,EAAOG,cAAcF,OAAQG,EAAW,CAACC,SAAS,IAEjDL,EAASC,GAAW,EAAKD,EAASC,EAAU,EAAI,EAEtDvF,EAAKiC,UAAYuD,SAIjC,IAAgB,IAAAI,EAAAxC,EAAAJ,GAAK6C,EAAAD,EAAA5J,QAAA6J,EAAAvC,KAAAuC,EAAAD,EAAA5J,OAAE,CAAnB,IAAIG,EAAI0J,EAAAxJ,MACRrB,KAAKiK,UAAU9I,EAAKuH,+GAI5BjH,EAAAZ,UAAA+F,aAAA,WACQ5G,KAAK2G,gBACD3G,KAAK6B,KACL7B,KAAK4D,WAAWgB,KAAK5E,KAAK6E,0BAErB7E,KAAKqB,QACXrB,KAAK8K,kBAAkB9K,KAAKqB,OAEvBrB,KAAK6G,aACL7G,KAAK8G,WAIb9G,KAAKc,OAAO8D,KAAK,CACbmG,cAAe/K,KAAK2G,gBAExB3G,KAAK4B,aAAad,OAAOd,KAAK2G,eAC9B3G,KAAK+G,0BAIbtF,EAAAZ,UAAAiK,kBAAA,SAAkB9C,WAAlBhD,EAAAhF,KACI,GAAKgI,GAA0B,IAAjBA,EAAMxB,OAApB,CAIIxG,KAAKkK,WACLlK,KAAK6D,aAAae,KAAK,CACnB+D,KAAM3I,KAAKqB,MACX8I,KAAMnK,KAAKsC,SACXqE,cAAe3G,KAAK2G,gBAIxBqB,EAAM0B,MAAK,SAACU,EAAOC,GACf,OAAOrF,EAAKgG,eAAeZ,EAAOC,EAAOrF,EAAK2B,cAAe,UAIrE,IAAgB,IAAAsE,EAAA7C,EAAAJ,GAAKkD,EAAAD,EAAAjK,QAAAkK,EAAA5C,KAAA4C,EAAAD,EAAAjK,OAAE,CAAnB,IAAIG,EAAI+J,EAAA7J,MACRrB,KAAK8K,kBAAkB3J,EAAKuH,+GAIpCjH,EAAAZ,UAAAmK,eAAA,SAAeZ,EAAOC,EAAO1D,EAAexD,GACxC,IAAImH,EAASlB,EAAAA,YAAYC,iBAAiBe,EAAMzB,KAAMhC,EAAcxD,GAAOyG,OACvEW,EAASnB,EAAAA,YAAYC,iBAAiBgB,EAAM1B,KAAMhC,EAAcxD,GAAOyG,OACvEY,EAAS,KAQb,GANc,MAAVF,GAA4B,MAAVC,EAClBC,GAAU,EACK,MAAVF,GAA4B,MAAVC,EACvBC,EAAS,EACM,MAAVF,GAA4B,MAAVC,IACvBC,EAAS,GACQ,iBAAVF,GAAsBA,aAAkBnB,QAC/C,GAAImB,EAAOG,eAAkBH,GAAUC,EACnC,OAAQ5D,EAAcxD,GAAO6G,MAAQM,EAAOG,cAAcF,OAAQG,EAAW,CAACC,SAAS,SAI3FH,EAAUF,EAASC,GAAW,EAAI,EAGtC,OAAID,GAAUC,EACF5D,EAAcH,OAAS,EAAC,EAAexG,KAAKgL,eAAeZ,EAAOC,EAAO1D,EAAexD,EAAQ,GAAM,EAG1GwD,EAAcxD,GAAO6G,MAAQQ,GAGzC/I,EAAAZ,UAAAkJ,YAAA,SAAYH,GACR,GAAI5J,KAAK2G,eAAiB3G,KAAK2G,cAAcH,OACzC,IAAK,IAAIoC,EAAI,EAAGA,EAAI5I,KAAK2G,cAAcH,OAAQoC,IAC3C,GAAI5I,KAAK2G,cAAciC,GAAGgB,QAAUA,EAChC,OAAO5J,KAAK2G,cAAciC,GAKtC,OAAO,MAGXnH,EAAAZ,UAAAsK,SAAA,SAASvB,GACL,GAAsB,WAAlB5J,KAAKsC,SACL,OAAQtC,KAAKyG,WAAazG,KAAKyG,YAAcmD,EAE5C,GAAsB,aAAlB5J,KAAKsC,SAAyB,CACnC,IAAI8I,GAAS,EACb,GAAIpL,KAAK2G,cACL,IAAI,IAAIiC,EAAI,EAAGA,EAAI5I,KAAK2G,cAAcH,OAAQoC,IAC1C,GAAI5I,KAAK2G,cAAciC,GAAGgB,OAASA,EAAO,CACtCwB,GAAS,EACT,MAIZ,OAAOA,IAIf3J,EAAAZ,UAAAgE,uBAAA,WACI,MAAO,CACH9C,MAAO/B,KAAK+B,MACZ8G,KAAM7I,KAAK6I,KACXpC,UAAWzG,KAAKyG,UAChBQ,UAAWjH,KAAKiH,UAChB5D,QAASrD,KAAKqD,QACdgI,aAAcrL,KAAKqD,SAAWrD,KAAKqD,QAAgB,OAAIrD,KAAKqD,QAAgB,OAAEhC,MAAQ,KACtFsF,cAAe3G,KAAK2G,gBAIrBlF,EAAAZ,UAAA4I,eAAP,WACQzJ,KAAKsL,cACLtL,KAAKuL,qBAAqB,GAE1BvL,KAAKwL,SAAS,CAACC,IAAK,KAGrBhK,EAAAZ,UAAA0K,qBAAP,SAA4BpI,GACpBnD,KAAK0L,qBACL1L,KAAK0L,oBAAoBH,qBAAqBpI,GAG9CnD,KAAK2L,2BACL3L,KAAK2L,0BAA0BJ,qBAAqBpI,IAIrD1B,EAAAZ,UAAA2K,SAAP,SAAgBI,GACR5L,KAAK0L,qBACL1L,KAAK0L,oBAAoBF,SAASI,GAGlC5L,KAAK2L,2BACL3L,KAAK2L,0BAA0BH,SAASI,IAIhDnK,EAAAZ,UAAAgL,QAAA,WACI,IAAIlD,EAAO3I,KAAK8H,eAAe9H,KAAKqB,MACpC,OAAe,MAARsH,GAA+B,GAAfA,EAAKnC,QAGhC/E,EAAAZ,UAAAiL,oBAAA,WACI,OAAO9L,KAAK0B,GAAGqK,cAAcrD,SAAS,IAG1CjH,EAAAZ,UAAAmL,oBAAA,SAAoBzC,GAChB,IAAI0C,EAAgBC,EAAAA,WAAWC,UAAUnM,KAAKoM,mBAAmBL,eAAeM,KAChFrM,KAAKsM,mBAAsB/C,EAAMgD,MAAQN,EAAgBjM,KAAKoM,mBAAmBL,cAAcS,WAC/FjD,EAAMkD,kBAGVhL,EAAAZ,UAAA6L,eAAA,SAAenD,GACX,IAAI0C,EAAgBC,EAAAA,WAAWC,UAAUnM,KAAKoM,mBAAmBL,eAAeM,KAChFH,EAAAA,WAAWS,SAAS3M,KAAKoM,mBAAmBL,cAAe,wBAC3D/L,KAAK4M,sBAAsBb,cAAcc,MAAMC,OAAS9M,KAAKoM,mBAAmBL,cAAcgB,aAAe,KAC7G/M,KAAK4M,sBAAsBb,cAAcc,MAAMpB,IAAM,MACrDzL,KAAK4M,sBAAsBb,cAAcc,MAAMR,KAAQ9C,EAAMgD,MAAQN,EAAgBjM,KAAKoM,mBAAmBL,cAAcS,WAAc,KAEzIxM,KAAK4M,sBAAsBb,cAAcc,MAAMG,QAAU,SAG7DvL,EAAAZ,UAAAoM,kBAAA,SAAkB1D,EAAO2D,GACrB,IAAIC,EAAQnN,KAAK4M,sBAAsBb,cAAcqB,WAAapN,KAAKsM,mBACnEe,EAAcH,EAAOI,YACrBC,EAAiBF,EAAcF,EAC/BK,EAAWN,EAAOL,MAAMW,UAAY,GAExC,GAAIH,EAAcF,EAAQM,SAASD,GAAW,CAC1C,GAA8B,QAA1BxN,KAAKiD,iBAA4B,CAEjC,IADA,IAAIyK,EAAaR,EAAOS,oBAChBD,EAAWE,cACfF,EAAaA,EAAWC,mBAG5B,GAAID,EAAY,CACZ,IAAIG,EAAkBH,EAAWJ,YAAcH,EAC3CW,EAAqBJ,EAAWb,MAAMW,UAAY,GAEtD,GAAID,EAAiB,IAAMM,EAAkBJ,SAASK,GAClD,GAAI9N,KAAKwJ,WAAY,CACjB,IAAIuE,EAAiB/N,KAAKgO,yBAAyBd,GAC/Ce,EAAsB/B,EAAAA,WAAWgC,WAAWH,EAAgB,wCAA0C7B,EAAAA,WAAWgC,WAAWH,EAAgB,+CAC5II,EAAwBjC,EAAAA,WAAWgC,WAAWH,EAAgB,8CAC9DK,EAAwBlC,EAAAA,WAAWgC,WAAWH,EAAgB,8CAC9DM,EAAoBnC,EAAAA,WAAW/I,MAAM+J,GAEzClN,KAAKsO,eAAeH,EAAuBE,EAAmBd,EAAgBM,GAC9E7N,KAAKsO,eAAeL,EAAqBI,EAAmBd,EAAgBM,GAC5E7N,KAAKsO,eAAeF,EAAuBC,EAAmBd,EAAgBM,QAG9EX,EAAOL,MAAM0B,MAAQhB,EAAiB,KAClCG,IACAA,EAAWb,MAAM0B,MAAQV,EAAkB,YAM1D,GAA8B,WAA1B7N,KAAKiD,iBACV,GAAIjD,KAAKwJ,WAAY,CACbuE,EAAiB/N,KAAKgO,yBAAyBd,GAAnD,IACIsB,EAAiBtC,EAAAA,WAAWgC,WAAWH,EAAgB,kCAAoC7B,EAAAA,WAAWgC,WAAWH,EAAgB,+BAEjIU,GADAR,EAAsB/B,EAAAA,WAAWgC,WAAWH,EAAgB,wCAA2C7B,EAAAA,WAAWgC,WAAWH,EAAgB,qCAC1H7B,EAAAA,WAAWgC,WAAWH,EAAgB,oCACzDW,EAAmBxC,EAAAA,WAAWgC,WAAWH,EAAgB,mCACzDI,EAAwBjC,EAAAA,WAAWgC,WAAWH,EAAgB,8CAC9DK,EAAwBlC,EAAAA,WAAWgC,WAAWH,EAAgB,8CAClEE,EAAoBpB,MAAM0B,MAAQN,EAAoBX,YAAcH,EAAQ,KAC5EgB,EAAsBtB,MAAM0B,MAAQJ,EAAsBb,YAAcH,EAAQ,KAC5EiB,IACAA,EAAsBvB,MAAM0B,MAAQH,EAAsBd,YAAcH,EAAQ,MAEhFkB,EAAoBnC,EAAAA,WAAW/I,MAAM+J,GAAzC,IAEMyB,EAA2BzB,EAASe,EAAoBX,YAAcH,EAAQI,EAC9EqB,EAA6B1B,EAASiB,EAAsBb,YAAcH,EAAQI,EAClFsB,EAAwB7O,KAAKoM,mBAAmBL,cAAcuB,aAAeqB,EAE/EG,EAAW,SAACC,EAAWC,EAAOT,EAAOM,GACjCE,GAAaC,IACbD,EAAUlC,MAAM0B,MAAQM,EAAwBN,EAAQrC,EAAAA,WAAW+C,wBAAwBT,GAAkB,KAAO,OACpHQ,EAAMnC,MAAM0B,MAAQA,EAAQ,OAIpCO,EAASN,EAAgBP,EAAqBU,EAA0BE,GACxEC,EAASL,EAAkBN,EAAuBS,EAA4BC,GAC9EC,EAASJ,EAAkBN,EAAuBQ,EAA4BC,GAE9E7O,KAAKsO,eAAeH,EAAuBE,EAAmBd,EAAgB,MAC9EvN,KAAKsO,eAAeL,EAAqBI,EAAmBd,EAAgB,MAC5EvN,KAAKsO,eAAeF,EAAuBC,EAAmBd,EAAgB,UAE7E,CACDvN,KAAKkP,eAAenD,cAAcc,MAAM0B,MAAQvO,KAAKkP,eAAenD,cAAcuB,YAAcH,EAAQ,KACxGD,EAAOL,MAAM0B,MAAQhB,EAAiB,KACtC,IAAI4B,EAAiBnP,KAAKkP,eAAenD,cAAcc,MAAM0B,MAC7DvO,KAAKoM,mBAAmBL,cAAcc,MAAM0B,MAAQY,EAAiB,KAI7EnP,KAAK8D,YAAYc,KAAK,CAClBwK,QAASlC,EACTC,MAAOA,IAIfnN,KAAK4M,sBAAsBb,cAAcc,MAAMG,QAAU,OACzDd,EAAAA,WAAWmD,YAAYrP,KAAKoM,mBAAmBL,cAAe,yBAGlEtK,EAAAZ,UAAAmN,yBAAA,SAAyBd,GACrB,GAAIA,EAAQ,CAER,IADA,IAAIoC,EAASpC,EAAOqC,cACbD,IAAWpD,EAAAA,WAAWsD,SAASF,EAAQ,iCAC1CA,EAASA,EAAOC,cAGpB,OAAOD,EAGP,OAAO,MAIf7N,EAAAZ,UAAAyN,eAAA,SAAeU,EAAOX,EAAmBd,EAAgBM,GACrD,GAAImB,EAAO,CACP,IAAIS,EAA0C,aAA/BT,EAAMtG,SAAS,GAAGgH,SAA0BV,EAAMtG,SAAS,GAAK,KAE/E,IAAI+G,EAUA,KAAM,oEATN,IAAIE,EAAMF,EAAS/G,SAAS2F,GACxBuB,EAAUD,EAAIhC,mBAClBgC,EAAI9C,MAAM0B,MAAQhB,EAAiB,KAE/BqC,GAAW/B,IACX+B,EAAQ/C,MAAM0B,MAAQV,EAAkB,QASxDpM,EAAAZ,UAAAgP,kBAAA,SAAkBtG,EAAOuG,GACrB9P,KAAK+P,iBAAmB7D,EAAAA,WAAW8D,2BAA2BhQ,KAAKiQ,4BAA4BlE,eAC/F/L,KAAKkQ,kBAAoBhE,EAAAA,WAAWiE,4BAA4BnQ,KAAKoQ,8BAA8BrE,eACnG/L,KAAKqQ,cAAgBP,EACrBvG,EAAM+G,aAAaC,QAAQ,OAAQ,MAGvC9O,EAAAZ,UAAA2P,kBAAA,SAAkBjH,EAAOkH,GACrB,GAAIzQ,KAAK0Q,oBAAsB1Q,KAAKqQ,eAAiBI,EAAY,CAC7DlH,EAAMkD,iBACN,IAAIkE,EAAkBzE,EAAAA,WAAWC,UAAUnM,KAAKoM,mBAAmBL,eAC/D6E,EAAmB1E,EAAAA,WAAWC,UAAUsE,GAE5C,GAAIzQ,KAAKqQ,eAAiBI,EAAY,CAClC,IAAII,EAAaD,EAAiBvE,KAAOsE,EAAgBtE,KAErDyE,GADYH,EAAgBlF,IAAMmF,EAAiBnF,IACpCmF,EAAiBvE,KAAOoE,EAAWnD,YAAc,GAEpEtN,KAAKiQ,4BAA4BlE,cAAcc,MAAMpB,IAAMmF,EAAiBnF,IAAMkF,EAAgBlF,KAAOzL,KAAKkQ,kBAAoB,GAAK,KACvIlQ,KAAKoQ,8BAA8BrE,cAAcc,MAAMpB,IAAMmF,EAAiBnF,IAAMkF,EAAgBlF,IAAMgF,EAAW1D,aAAe,KAEhIxD,EAAMgD,MAAQuE,GACd9Q,KAAKiQ,4BAA4BlE,cAAcc,MAAMR,KAAQwE,EAAaJ,EAAWnD,YAAcyD,KAAKC,KAAKhR,KAAK+P,iBAAmB,GAAM,KAC3I/P,KAAKoQ,8BAA8BrE,cAAcc,MAAMR,KAAQwE,EAAaJ,EAAWnD,YAAcyD,KAAKC,KAAKhR,KAAK+P,iBAAmB,GAAM,KAC7I/P,KAAKiR,aAAe,IAGpBjR,KAAKiQ,4BAA4BlE,cAAcc,MAAMR,KAAQwE,EAAaE,KAAKC,KAAKhR,KAAK+P,iBAAmB,GAAM,KAClH/P,KAAKoQ,8BAA8BrE,cAAcc,MAAMR,KAAQwE,EAAaE,KAAKC,KAAKhR,KAAK+P,iBAAmB,GAAM,KACpH/P,KAAKiR,cAAgB,GAGzBjR,KAAKiQ,4BAA4BlE,cAAcc,MAAMG,QAAU,QAC/DhN,KAAKoQ,8BAA8BrE,cAAcc,MAAMG,QAAU,aAGjEzD,EAAM+G,aAAaY,WAAa,SAK5CzP,EAAAZ,UAAAsQ,kBAAA,SAAkB5H,GACVvJ,KAAK0Q,oBAAsB1Q,KAAKqQ,gBAChC9G,EAAMkD,iBACNzM,KAAKiQ,4BAA4BlE,cAAcc,MAAMG,QAAU,OAC/DhN,KAAKoQ,8BAA8BrE,cAAcc,MAAMG,QAAU,SAIzEvL,EAAAZ,UAAAuQ,aAAA,SAAa7H,EAAO8H,GAEhB,GADA9H,EAAMkD,iBACFzM,KAAKqQ,cAAe,CACpB,IAAIiB,EAAYpF,EAAAA,WAAWqF,iBAAiBvR,KAAKqQ,cAAe,uBAC5DmB,EAAYtF,EAAAA,WAAWqF,iBAAiBF,EAAY,uBACpDI,EAAaH,GAAaE,EAC1BC,IAAeD,EAAYF,GAAa,IAA4B,IAAvBtR,KAAKiR,cAAyBK,EAAYE,GAAa,GAA2B,IAAtBxR,KAAKiR,gBAC9GQ,GAAY,GAGZA,GAAeD,EAAYF,GAAmC,IAAtBtR,KAAKiR,eAC7CO,GAAwB,GAGxBC,GAAeD,EAAYF,IAAoC,IAAvBtR,KAAKiR,eAC7CO,GAAwB,GAGxBC,IACArI,EAAAA,YAAYsI,aAAa1R,KAAK2R,QAASL,EAAWE,GAElDxR,KAAK+D,aAAaa,KAAK,CACnB0M,UAAWA,EACXE,UAAWA,EACXG,QAAS3R,KAAK2R,WAItB3R,KAAKiQ,4BAA4BlE,cAAcc,MAAMG,QAAU,OAC/DhN,KAAKoQ,8BAA8BrE,cAAcc,MAAMG,QAAU,OACjEhN,KAAKqQ,cAAcuB,WAAY,EAC/B5R,KAAKqQ,cAAgB,KACrBrQ,KAAKiR,aAAe,OAI5BxP,EAAAZ,UAAAgR,eAAA,SAAetI,GACX,IAAIuI,EAA4BvI,EAAMI,cAAcoI,OAAQrC,SAC5D,GAAkB,SAAdoC,GAAuC,UAAdA,GAAwC,KAAdA,IAAsB5F,EAAAA,WAAWsD,SAASjG,EAAMI,cAAcoI,OAAQ,gBAA7H,CAIA,GAAI/R,KAAKgS,cAAe,CACpBhS,KAAKqH,mCAAoC,EACzC,IAAIkB,EAAUgB,EAAMhB,QAChB0J,EAAWjS,KAAKkS,WAAW3J,EAAQpH,MACnCgR,GAAgBnS,KAAKoS,YAAqBpS,KAAKqS,iBAC/CC,EAAetS,KAAK8I,QAAUK,OAAOC,EAAAA,YAAYC,iBAAiBd,EAAQpH,KAAKwH,KAAM3I,KAAK8I,UAAY,KAE1G,GAAIqJ,EAAe,CACf,IAAItI,EAAUN,EAAMI,cAAcE,SAASN,EAAMI,cAAcG,QAE/D,GAAImI,GAAYpI,EAAS,CACrB,GAAI7J,KAAKuS,wBACLvS,KAAKoH,WAAa,KAClBpH,KAAK0E,cAAgB,GACrB1E,KAAKwC,gBAAgBoC,KAAK,UAEzB,CACD,IAAI4N,EAAiBxS,KAAKyS,qBAAqBlK,EAAQpH,MACvDnB,KAAKoH,WAAapH,KAAKmH,UAAUuL,QAAO,SAACjL,EAAImB,GAAM,OAAAA,GAAK4J,KACxDxS,KAAKwC,gBAAgBoC,KAAK5E,KAAKmH,WAC3BmL,UACOtS,KAAK0E,cAAc4N,GAIlCtS,KAAKiE,eAAeW,KAAK,CAAC+E,cAAeJ,EAAMI,cAAexI,KAAMoH,EAAQpH,KAAMwR,KAAM,aAGpF3S,KAAKuS,yBACLvS,KAAKoH,WAAamB,EAAQpH,KAC1BnB,KAAKwC,gBAAgBoC,KAAK2D,EAAQpH,MAC9BmR,IACAtS,KAAK0E,cAAgB,GACrB1E,KAAK0E,cAAc4N,GAAgB,IAGlCtS,KAAK4S,4BACN/I,EACA7J,KAAKoH,WAAapH,KAAKmH,WAAW,IAGlCnH,KAAKoH,WAAa,GAClBpH,KAAK0E,cAAgB,IAGzB1E,KAAKoH,WAAUyL,EAAO7S,KAAKmH,UAAS,CAAEoB,EAAQpH,OAC9CnB,KAAKwC,gBAAgBoC,KAAK5E,KAAKmH,WAC3BmL,IACAtS,KAAK0E,cAAc4N,GAAgB,IAI3CtS,KAAKgE,aAAaY,KAAK,CAAC+E,cAAeJ,EAAMI,cAAexI,KAAMoH,EAAQpH,KAAMwR,KAAM,MAAOxP,MAAOoG,EAAMuJ,gBAI9G,GAA2B,WAAvB9S,KAAKgS,cACDC,GACAjS,KAAKoH,WAAa,KAClBpH,KAAK0E,cAAgB,GACrB1E,KAAKwC,gBAAgBoC,KAAK5E,KAAKmH,WAC/BnH,KAAKiE,eAAeW,KAAK,CAAE+E,cAAeJ,EAAMI,cAAexI,KAAMoH,EAAQpH,KAAMwR,KAAM,UAGzF3S,KAAKoH,WAAamB,EAAQpH,KAC1BnB,KAAKwC,gBAAgBoC,KAAK5E,KAAKmH,WAC/BnH,KAAKgE,aAAaY,KAAK,CAAE+E,cAAeJ,EAAMI,cAAexI,KAAMoH,EAAQpH,KAAMwR,KAAM,MAAOxP,MAAOoG,EAAMuJ,WACvGR,IACAtS,KAAK0E,cAAgB,GACrB1E,KAAK0E,cAAc4N,GAAgB,SAI1C,GAA2B,aAAvBtS,KAAKgS,cACV,GAAIC,EAAU,CACV,IAAIc,EAAiB/S,KAAKyS,qBAAqBlK,EAAQpH,MACvDnB,KAAKoH,WAAapH,KAAKmH,UAAUuL,QAAO,SAACjL,EAAKmB,GAAM,OAAAA,GAAKmK,KACzD/S,KAAKwC,gBAAgBoC,KAAK5E,KAAKmH,WAC/BnH,KAAKiE,eAAeW,KAAK,CAAE+E,cAAeJ,EAAMI,cAAexI,KAAMoH,EAAQpH,KAAMwR,KAAM,QACrFL,UACOtS,KAAK0E,cAAc4N,QAI9BtS,KAAKoH,WAAapH,KAAKmH,UAAS0L,EAAO7S,KAAKmH,UAAS,CAAEoB,EAAQpH,OAAQ,CAACoH,EAAQpH,MAChFnB,KAAKwC,gBAAgBoC,KAAK5E,KAAKmH,WAC/BnH,KAAKgE,aAAaY,KAAK,CAAE+E,cAAeJ,EAAMI,cAAexI,KAAMoH,EAAQpH,KAAMwR,KAAM,MAAOxP,MAAOoG,EAAMuJ,WACvGR,IACAtS,KAAK0E,cAAc4N,GAAgB,GAMnDtS,KAAK4B,aAAaX,oBAGtBjB,KAAKoS,YAAa,IAGtB3Q,EAAAZ,UAAAmS,kBAAA,SAAkBzJ,GACdvJ,KAAKoS,YAAa,GAGtB3Q,EAAAZ,UAAAoS,oBAAA,SAAoB1J,GAChB,GAAIvJ,KAAKkT,YAAa,CAClB,IAAM/R,EAAOoI,EAAMhB,QAAQpH,KAE3B,GAAsC,aAAlCnB,KAAK2C,yBACL3C,KAAKmT,qBAAuBhS,EAC5BnB,KAAK0C,2BAA2BkC,KAAKzD,GACrCnB,KAAKkE,oBAAoBU,KAAK,CAAC+E,cAAeJ,EAAMI,cAAexI,KAAMA,IACzEnB,KAAKkT,YAAYE,KAAK7J,EAAMI,eAC5B3J,KAAK4B,aAAaV,cAAcC,QAE/B,GAAsC,UAAlCnB,KAAK2C,yBAAsC,CAChD3C,KAAKqH,mCAAoC,EACzC,IAAI4K,EAAWjS,KAAKkS,WAAW/Q,GAC3BmR,EAAetS,KAAK8I,QAAUK,OAAOC,EAAAA,YAAYC,iBAAiBlI,EAAKwH,KAAM3I,KAAK8I,UAAY,KAE7FmJ,IACGjS,KAAKuS,yBACLvS,KAAKmH,UAAYhG,EACjBnB,KAAKwC,gBAAgBoC,KAAKzD,IAErBnB,KAAK4S,4BACV5S,KAAKmH,UAAY,CAAChG,GAClBnB,KAAKwC,gBAAgBoC,KAAK5E,KAAKmH,YAG/BmL,IACAtS,KAAK0E,cAAc4N,GAAgB,IAI3CtS,KAAKkT,YAAYE,KAAK7J,EAAMI,eAC5B3J,KAAKkE,oBAAoBU,KAAK,CAAC+E,cAAeJ,EAAMI,cAAexI,KAAMA,OAKrFM,EAAAZ,UAAAwS,uBAAA,SAAuB9J,GACnBvJ,KAAKmH,UAAYnH,KAAKmH,WAAW,GACjCnH,KAAKqH,mCAAoC,EACzC,IAAIlG,EAAOoI,EAAMhB,QAAQpH,KACVnB,KAAKkS,WAAW/Q,IAG3BnB,KAAKsT,uBAAuBnS,GAAM,GAC9BoI,EAAMhB,QAAQR,QACd/H,KAAKuT,qBAAqBpS,EAAK4G,QAAQ,GAE3C/H,KAAKwC,gBAAgBoC,KAAK5E,KAAKmH,WAC/BnH,KAAKiE,eAAeW,KAAK,CAAC+E,cAAeJ,EAAOpI,KAAMA,MAGtDnB,KAAKsT,uBAAuBnS,GAAM,GAC9BoI,EAAMhB,QAAQR,QACd/H,KAAKuT,qBAAqBpS,EAAK4G,QAAQ,GAE3C/H,KAAKwC,gBAAgBoC,KAAK5E,KAAKmH,WAC/BnH,KAAKgE,aAAaY,KAAK,CAAC+E,cAAeJ,EAAOpI,KAAMA,KAGxDnB,KAAK4B,aAAaX,qBAGtBQ,EAAAZ,UAAA2S,wBAAA,SAAwBjK,EAAckK,WAC9B9K,EAAO3I,KAAK8H,eAAiB9H,KAAKqB,MAEtC,GADArB,KAAKoH,WAAaqM,GAAS9K,EAAOA,EAAK+K,QAAU,GAC7CD,GACA,GAAI9K,GAAQA,EAAKnC,WACb,IAAiB,IAAAmN,EAAAvL,EAAAO,GAAIiL,EAAAD,EAAA3S,QAAA4S,EAAAtL,KAAAsL,EAAAD,EAAA3S,OAAE,CAAlB,IAAIG,EAAIyS,EAAAvS,MACTrB,KAAKsT,uBAAuBnS,GAAM,2GAK1CnB,KAAKoH,WAAa,GAClBpH,KAAK0E,cAAgB,GAGzB1E,KAAKqH,mCAAoC,EACzCrH,KAAKwC,gBAAgBoC,KAAK5E,KAAKoH,YAC/BpH,KAAK4B,aAAaX,oBAClBjB,KAAKmE,uBAAuBS,KAAK,CAAC+E,cAAeJ,EAAOsK,QAASJ,KAGrEhS,EAAAZ,UAAA0S,qBAAA,SAAqBpS,EAAgB2S,WACjC,GAAI3S,EAAKuH,UAAYvH,EAAKuH,SAASlC,OAAQ,CACvC,IAAIuN,EAA6B,EAC7BC,GAAgC,EAChC1B,EAAetS,KAAK8I,QAAUK,OAAOC,EAAAA,YAAYC,iBAAiBlI,EAAKwH,KAAM3I,KAAK8I,UAAY,SAElG,IAAkB,IAAAG,EAAAb,EAAAjH,EAAKuH,UAAQQ,EAAAD,EAAAjI,QAAAkI,EAAAZ,KAAAY,EAAAD,EAAAjI,OAAE,CAA5B,IAAIiT,EAAK/K,EAAA7H,MACNrB,KAAKkS,WAAW+B,GACpBF,IACSE,EAAMC,kBACXF,GAAuB,qGAG/B,GAAIF,GAAUC,GAAsB5S,EAAKuH,SAASlC,OAC9CxG,KAAKoH,WAAUyL,EAAQ7S,KAAKmH,WAAW,GAAE,CAAEhG,IAC3CA,EAAK+S,iBAAkB,EACnB5B,IACAtS,KAAK0E,cAAc4N,GAAgB,OAGtC,CACD,IAAKwB,EAAQ,CACT,IAAIK,EAAQnU,KAAKyS,qBAAqBtR,GAClCgT,GAAS,IACTnU,KAAKoH,WAAcpH,KAAKmH,UAAUuL,QAAO,SAACjL,EAAImB,GAAM,OAAAA,GAAGuL,KAEnD7B,UACOtS,KAAK0E,cAAc4N,IAKlC0B,GAAwBD,EAAqB,GAAKA,GAAsB5S,EAAKuH,SAASlC,OACtFrF,EAAK+S,iBAAkB,EAEvB/S,EAAK+S,iBAAkB,GAInC,IAAInM,EAAS5G,EAAK4G,OACdA,GACA/H,KAAKuT,qBAAqBxL,EAAQ+L,IAI1CrS,EAAAZ,UAAAyS,uBAAA,SAAuBnS,EAAgB2S,WAC/B3Q,EAAQnD,KAAKyS,qBAAqBtR,GAClCmR,EAAetS,KAAK8I,QAAUK,OAAOC,EAAAA,YAAYC,iBAAiBlI,EAAKwH,KAAM3I,KAAK8I,UAAY,KAiBlG,GAfIgL,IAAoB,GAAV3Q,GACVnD,KAAKoH,WAAUyL,EAAQ7S,KAAKmH,WAAW,GAAE,CAAChG,IACtCmR,IACAtS,KAAK0E,cAAc4N,GAAgB,KAGjCwB,GAAU3Q,GAAS,IACzBnD,KAAKoH,WAAcpH,KAAKmH,UAAUuL,QAAO,SAACjL,EAAImB,GAAM,OAAAA,GAAGzF,KACnDmP,UACOtS,KAAK0E,cAAc4N,IAIlCnR,EAAK+S,iBAAkB,EAEnB/S,EAAKuH,UAAYvH,EAAKuH,SAASlC,WAC/B,IAAkB,IAAAyC,EAAAb,EAAAjH,EAAKuH,UAAQQ,EAAAD,EAAAjI,QAAAkI,EAAAZ,KAAAY,EAAAD,EAAAjI,OAAE,CAA5B,IAAIiT,EAAK/K,EAAA7H,MACVrB,KAAKsT,uBAAuBW,EAAOH,uGAK/CrS,EAAAZ,UAAAqR,WAAA,SAAW/Q,GACP,SAAIA,IAAQnB,KAAKmH,aACTnH,KAAK8I,aACgF4B,IAA9E1K,KAAK0E,cAAc0E,EAAAA,YAAYC,iBAAiBlI,EAAKwH,KAAM3I,KAAK8I,UAGnE9I,KAAKmH,qBAAqB4B,MACnB/I,KAAKyS,qBAAqBtR,IAAS,EAEnCnB,KAAKoU,OAAOjT,EAAMnB,KAAKmH,aAO9C1F,EAAAZ,UAAA4R,qBAAA,SAAqBtR,GACjB,IAAIgC,GAAiB,EACrB,GAAInD,KAAKmH,WAAanH,KAAKmH,UAAUX,OACjC,IAAK,IAAIoC,EAAI,EAAGA,EAAI5I,KAAKmH,UAAUX,OAAQoC,IACvC,GAAI5I,KAAKoU,OAAOjT,EAAMnB,KAAKmH,UAAUyB,IAAK,CACtCzF,EAAQyF,EACR,MAKZ,OAAOzF,GAGX1B,EAAAZ,UAAA0R,sBAAA,WACI,MAA8B,WAAvBvS,KAAKgS,eAGhBvQ,EAAAZ,UAAA+R,wBAAA,WACI,MAA8B,aAAvB5S,KAAKgS,eAGhBvQ,EAAAZ,UAAAuT,OAAA,SAAOhK,EAAOC,GACV,MAAmC,WAA5BrK,KAAK4C,mBAAmCwH,IAAUC,EAASjB,EAAAA,YAAYgL,OAAOhK,EAAMzB,KAAM0B,EAAM1B,KAAM3I,KAAK8I,UAGtHrH,EAAAZ,UAAA6R,OAAA,SAAOrR,EAAOuI,EAAOyK,GAArB,IAAArP,EAAAhF,KACQA,KAAKsU,eACLC,aAAavU,KAAKsU,eAGjBtU,KAAKwU,cAAcnT,GAEbrB,KAAKqD,QAAQuG,WACb5J,KAAKqD,QAAQuG,GAFpB5J,KAAKqD,QAAQuG,GAAS,CAAEvI,MAAOA,EAAOgT,UAAWA,GAKrDrU,KAAKsU,cAAgBG,YAAW,WAC5BzP,EAAK8B,UACL9B,EAAKsP,cAAgB,OACtBtU,KAAKsD,cAGZ7B,EAAAZ,UAAA6T,aAAA,SAAarT,EAAOgT,GAChBrU,KAAK0S,OAAOrR,EAAO,SAAUgT,IAGjC5S,EAAAZ,UAAA2T,cAAA,SAAc9B,GACV,OAAIA,MAAAA,IACuB,iBAAXA,GAA+C,GAAxBA,EAAOiC,OAAOnO,QAAiBkM,aAAkB3J,OAA0B,GAAjB2J,EAAOlM,SAQ5G/E,EAAAZ,UAAAiG,QAAA,mBACI,GAAI9G,KAAK6B,KACL7B,KAAK4D,WAAWgB,KAAK5E,KAAK6E,8BAEzB,CACD,IAAK7E,KAAKqB,MACN,OAGJ,GAAKrB,KAAK6G,YAML,CACD,IAAI+N,OAAuB,EAC3B,GAAI5U,KAAKqD,QAAgB,OAAG,CACxB,IAAKrD,KAAK2R,UAAY3R,KAAK6U,mBACvB,MAAM,IAAIC,MAAM,kFAEhBF,EAA0B5U,KAAK6U,oBAAoB7U,KAAK2R,QAGhE3R,KAAK8H,cAAgB,GACrB,IAAMiN,EAAmC,WAApB/U,KAAKuD,WACtByR,GAAiB,MAErB,IAAiB,IAAA/L,EAAAb,EAAApI,KAAKqB,OAAK6H,EAAAD,EAAAjI,QAAAkI,EAAAZ,KAAAY,EAAAD,EAAAjI,OAAE,CAAxB,IAAIG,EAAI+H,EAAA7H,MACL4T,EAAQC,EAAA,GAAO/T,GACfgU,GAAa,EACbC,GAAc,EACdC,OAAiB,EAErB,IAAK,IAAIC,KAAQtV,KAAKqD,QAClB,GAAIrD,KAAKqD,QAAQkS,eAAeD,IAAkB,WAATA,EAAmB,CACxD,IAAIE,EAAaxV,KAAKqD,QAAQiS,GAC1BG,EAAcH,EACdI,EAAcF,EAAWnU,MACzBsU,EAAkBH,EAAWnB,WAAa,aAQ9C,GANAgB,EAAoB,CAACI,YAAWA,EAAEC,YAAWA,EAAEE,iBADxBC,EAAAA,YAAYF,GAC8BZ,aAAYA,KACxEA,GAAkB/U,KAAK8V,kBAAkBb,EAAUI,IAAsBrV,KAAK+V,gBAAgBd,EAAUI,MACvGN,GAAkB/U,KAAK+V,gBAAgBd,EAAUI,IAAsBrV,KAAK8V,kBAAkBb,EAAUI,MACtGF,GAAa,IAGhBA,EACD,MAKZ,GAAInV,KAAKqD,QAAgB,SAAM+R,GAAeR,EAC1C,IAAI,IAAIoB,EAAI,EAAGA,EAAIpB,EAAwBpO,OAAQwP,IAAK,CACpD,IAAIC,EAAiBf,EAAA,GAAOD,GAI5BI,EAAoB,CAACI,YAHjBA,EAAcb,EAAwBoB,GAAGpM,OAAOgL,EAAwBoB,GAG1CN,YAF9BA,EAAc1V,KAAKqD,QAAgB,OAAEhC,MAEMuU,iBADxBC,EAAAA,YAAY7V,KAAKqD,QAAgB,OAAEgR,WACOU,aAAYA,IAExEA,IAAiB/U,KAAK8V,kBAAkBG,EAAmBZ,IAAsBrV,KAAK+V,gBAAgBE,EAAmBZ,MACxHN,IAAiB/U,KAAK+V,gBAAgBE,EAAmBZ,IAAsBrV,KAAK8V,kBAAkBG,EAAmBZ,OACvHD,GAAc,EACdH,EAAWgB,GAK3B,IAAIC,EAAUf,EACVnV,KAAKqD,QAAgB,SACrB6S,EAAUf,GAAcC,GAGxBc,GACAlW,KAAK8H,cAAcW,KAAKwM,GAG5BD,EAAiBA,IAAmBG,GAAcC,GAAgBD,GAAcnV,KAAK8H,cAActB,OAAS,IAAQ4O,GAA6C,IAA9BpV,KAAK8H,cAActB,yGAGrJwO,IACDhV,KAAK8H,cAAgB,MAGrB9H,KAAK2H,YACL3H,KAAKuG,aAAevG,KAAK8H,cAAgB9H,KAAK8H,cAActB,OAASxG,KAAKqB,MAAQrB,KAAKqB,MAAMmF,OAAS,QA5E1GxG,KAAK8H,cAAgB,KACjB9H,KAAK2H,YACL3H,KAAKuG,aAAevG,KAAKqB,MAAQrB,KAAKqB,MAAMmF,OAAS,GA+EjExG,KAAK+B,MAAQ,EAEb,IAAMoU,EAAgBnW,KAAK8H,eAAiB9H,KAAKqB,MAEjDrB,KAAKwD,SAASoB,KAAK,CACfvB,QAASrD,KAAKqD,QACd8S,cAAeA,IAGnBnW,KAAK4B,aAAaR,WAAW+U,GAC7BnW,KAAK+G,wBAED/G,KAAKwJ,YACLxJ,KAAKyJ,kBAIbhI,EAAAZ,UAAAiV,kBAAA,SAAkB3U,EAAMkU,WACpB,GAAIlU,EAAM,CACN,IAAIiV,GAAU,EACd,GAAIjV,EAAKuH,SAAU,CACf,IAAI2N,EAAUxD,EAAO1R,EAAKuH,UAC1BvH,EAAKuH,SAAW,OAChB,IAAsB,IAAA4N,EAAAlO,EAAAiO,GAAUE,EAAAD,EAAAtV,QAAAuV,EAAAjO,KAAAiO,EAAAD,EAAAtV,OAAE,CAA7B,IAAIwV,EAASD,EAAAlV,MACVoV,EAAavB,EAAA,GAAOsB,GACpBxW,KAAK+V,gBAAgBU,EAAepB,KACpCe,GAAU,EACVjV,EAAKuH,SAASD,KAAKgO,uGAK/B,GAAIL,EACA,OAAO,IAKnB3U,EAAAZ,UAAAkV,gBAAA,SAAgB5U,EAAMuV,OAACjB,EAAAiB,EAAAjB,YAAaC,EAAAgB,EAAAhB,YAAaE,EAAAc,EAAAd,iBAAkBb,EAAA2B,EAAA3B,aAC3DqB,GAAU,EAUd,OARIR,EADiBxM,EAAAA,YAAYC,iBAAiBlI,EAAKwH,KAAM8M,GACxBC,EAAa1V,KAAK2W,gBACnDP,GAAU,KAGTA,GAAYrB,IAAiB/U,KAAK4W,WAAWzV,MAC9CiV,EAAUpW,KAAK8V,kBAAkB3U,EAAM,CAACsU,YAAWA,EAAEC,YAAWA,EAAEE,iBAAgBA,EAAEb,aAAYA,KAAMqB,GAGnGA,GAGX3U,EAAAZ,UAAA+V,WAAA,SAAWzV,GACP,OAAqB,IAAdA,EAAK0V,QAA2B1V,EAAKuH,UAAYvH,EAAKuH,SAASlC,SAG1E/E,EAAAZ,UAAAgG,UAAA,WACI,IAAIiQ,GAAQ,EACZ,IAAK,IAAIxB,KAAQtV,KAAKqD,QAClB,GAAIrD,KAAKqD,QAAQkS,eAAeD,GAAO,CACnCwB,GAAQ,EACR,MAIR,OAAQA,GAGLrV,EAAAZ,UAAAkW,MAAP,WACI/W,KAAKgH,WAAa,KAClBhH,KAAKyE,WAAa,EAClBzE,KAAKkH,eAAiB,KACtBlH,KAAK4B,aAAad,OAAO,MAEzBd,KAAK8H,cAAgB,KACrB9H,KAAKqD,QAAU,GAEfrD,KAAK+B,MAAQ,EAET/B,KAAK6B,KACL7B,KAAK4D,WAAWgB,KAAK5E,KAAK6E,0BAG1B7E,KAAKuG,aAAgBvG,KAAKuE,OAASvE,KAAKuE,OAAOiC,OAAS,GAIhE/E,EAAAZ,UAAAmW,kBAAA,SAAkBC,EAAMtO,EAAMiB,GAC1B5J,KAAKkX,YAAcD,EACnBjX,KAAKmX,gBAAkBxO,EACvB3I,KAAKoX,iBAAmBxN,EACxB5J,KAAKqX,4BAGT5V,EAAAZ,UAAAyW,mBAAA,WACI,OAAQtX,KAAKkX,aAAoF,IAArEhL,EAAAA,WAAWqL,KAAKvX,KAAKkX,YAAa,wBAAwB1Q,QAG1F/E,EAAAZ,UAAAwW,yBAAA,WAAA,IAAArS,EAAAhF,KACSA,KAAKwX,uBACNxX,KAAKwX,qBAAuB,SAACjO,GACrBvE,EAAKkS,cAAgBlS,EAAKyS,kBAAoBzS,EAAKsS,uBACnDpL,EAAAA,WAAWmD,YAAYrK,EAAKkS,YAAa,mBACzClS,EAAKkS,YAAc,KACnBlS,EAAKX,eAAeO,KAAK,CAAEgF,MAAO5E,EAAKoS,iBAAkBzO,KAAM3D,EAAKmS,kBACpEnS,EAAKoS,iBAAmB,KACxBpS,EAAKmS,gBAAkB,KACvBnS,EAAK0S,8BAGT1S,EAAKyS,kBAAmB,GAG5BE,SAASC,iBAAiB,QAAS5X,KAAKwX,wBAIhD/V,EAAAZ,UAAA6W,2BAAA,WACQ1X,KAAKwX,uBACLG,SAASE,oBAAoB,QAAS7X,KAAKwX,sBAC3CxX,KAAKwX,qBAAuB,OAIpC/V,EAAAZ,UAAAiX,YAAA,WACI9X,KAAK0X,6BACL1X,KAAKkX,YAAc,KACnBlX,KAAKoX,iBAAmB,KACxBpX,KAAKmX,gBAAkB,KACvBnX,KAAK8E,YAAc,+CA9sCAiT,EAAAA,kBAAyBC,EAAAA,cAA6BjY,KAnTpEwB,EAAA,CAAR0W,EAAAA,uCAEQ1W,EAAA,CAAR0W,EAAAA,qCAEQ1W,EAAA,CAAR0W,EAAAA,0CAEQ1W,EAAA,CAAR0W,EAAAA,0CAEQ1W,EAAA,CAAR0W,EAAAA,+CAEQ1W,EAAA,CAAR0W,EAAAA,0CAEQ1W,EAAA,CAAR0W,EAAAA,oCAEQ1W,EAAA,CAAR0W,EAAAA,8CAEQ1W,EAAA,CAAR0W,EAAAA,yCAEQ1W,EAAA,CAAR0W,EAAAA,oCAEQ1W,EAAA,CAAR0W,EAAAA,qCAEQ1W,EAAA,CAAR0W,EAAAA,yCAEQ1W,EAAA,CAAR0W,EAAAA,kDAEQ1W,EAAA,CAAR0W,EAAAA,mDAEQ1W,EAAA,CAAR0W,EAAAA,iDAEQ1W,EAAA,CAAR0W,EAAAA,yDAEQ1W,EAAA,CAAR0W,EAAAA,yDAEQ1W,EAAA,CAAR0W,EAAAA,qDAEQ1W,EAAA,CAAR0W,EAAAA,iDAEQ1W,EAAA,CAAR0W,EAAAA,gDAEQ1W,EAAA,CAAR0W,EAAAA,wCAEQ1W,EAAA,CAAR0W,EAAAA,+CAEQ1W,EAAA,CAAR0W,EAAAA,0CAEQ1W,EAAA,CAAR0W,EAAAA,6CAES1W,EAAA,CAAT2W,EAAAA,gDAEQ3W,EAAA,CAAR0W,EAAAA,oDAES1W,EAAA,CAAT2W,EAAAA,2DAEQ3W,EAAA,CAAR0W,EAAAA,wDAEQ1W,EAAA,CAAR0W,EAAAA,uCAEQ1W,EAAA,CAAR0W,EAAAA,gDAEQ1W,EAAA,CAAR0W,EAAAA,kDAEQ1W,EAAA,CAAR0W,EAAAA,wCAEQ1W,EAAA,CAAR0W,EAAAA,uCAEQ1W,EAAA,CAAR0W,EAAAA,2CAEQ1W,EAAA,CAAR0W,EAAAA,0CAEQ1W,EAAA,CAAR0W,EAAAA,0CAEQ1W,EAAA,CAAR0W,EAAAA,4CAEQ1W,EAAA,CAAR0W,EAAAA,6CAEQ1W,EAAA,CAAR0W,EAAAA,kDAEQ1W,EAAA,CAAR0W,EAAAA,gDAEQ1W,EAAA,CAAR0W,EAAAA,2CAEQ1W,EAAA,CAAR0W,EAAAA,2CAEQ1W,EAAA,CAAR0W,EAAAA,2CAEQ1W,EAAA,CAAR0W,EAAAA,6CAEQ1W,EAAA,CAAR0W,EAAAA,gDAEQ1W,EAAA,CAAR0W,EAAAA,gDAEQ1W,EAAA,CAAR0W,EAAAA,kDAEQ1W,EAAA,CAAR0W,EAAAA,2CAEQ1W,EAAA,CAAR0W,EAAAA,0CAEQ1W,EAAA,CAAR0W,EAAAA,uCAEQ1W,EAAA,CAAR0W,EAAAA,kDAEQ1W,EAAA,CAAR0W,EAAAA,2CAEQ1W,EAAA,CAAR0W,EAAAA,0CAEQ1W,EAAA,CAAR0W,EAAAA,4CAES1W,EAAA,CAAT2W,EAAAA,yCAES3W,EAAA,CAAT2W,EAAAA,6CAES3W,EAAA,CAAT2W,EAAAA,+CAES3W,EAAA,CAAT2W,EAAAA,uCAES3W,EAAA,CAAT2W,EAAAA,uCAES3W,EAAA,CAAT2W,EAAAA,2CAES3W,EAAA,CAAT2W,EAAAA,6CAES3W,EAAA,CAAT2W,EAAAA,4CAES3W,EAAA,CAAT2W,EAAAA,6CAES3W,EAAA,CAAT2W,EAAAA,6CAES3W,EAAA,CAAT2W,EAAAA,+CAES3W,EAAA,CAAT2W,EAAAA,oDAES3W,EAAA,CAAT2W,EAAAA,uDAES3W,EAAA,CAAT2W,EAAAA,2CAES3W,EAAA,CAAT2W,EAAAA,+CAES3W,EAAA,CAAT2W,EAAAA,6CAEuB3W,EAAA,CAAvB4W,EAAAA,UAAU,uDAEgB5W,EAAA,CAA1B4W,EAAAA,UAAU,6DAEsB5W,EAAA,CAAhC4W,EAAAA,UAAU,yEAEwB5W,EAAA,CAAlC4W,EAAAA,UAAU,6EAES5W,EAAA,CAAnB4W,EAAAA,UAAU,+CAEkB5W,EAAA,CAA5B4W,EAAAA,UAAU,6DAEwB5W,EAAA,CAAlC4W,EAAAA,UAAU,yEAEqB5W,EAAA,CAA/B6W,EAAAA,gBAAgBC,EAAAA,gDAsNR9W,EAAA,CAAR0W,EAAAA,mCAyDQ1W,EAAA,CAAR0W,EAAAA,0CAQQ1W,EAAA,CAAR0W,EAAAA,uCAQQ1W,EAAA,CAAR0W,EAAAA,uCAOQ1W,EAAA,CAAR0W,EAAAA,2CAQQ1W,EAAA,CAAR0W,EAAAA,uCA1cQxW,EAASF,EAAA,CArDrB+W,EAAAA,UAAU,CACPC,SAAU,cACVlT,SAAU,k+IAgDVmT,UAAW,CAACzY,GACZ0Y,gBAAiBC,EAAAA,wBAAwBC,WAEhClX,mBAwiDT,SAAAmX,EAAmBC,EAAsBC,EAA2CC,GAApF,IAAA/T,EAAAhF,KAAmBA,KAAA6Y,GAAAA,EAAsB7Y,KAAA8Y,iBAAAA,EAA2C9Y,KAAA+Y,GAAAA,EAChF/Y,KAAKgZ,aAAehZ,KAAK6Y,GAAGjX,aAAajB,gBAAgBsY,WAAU,WAC3DjU,EAAK6T,GAAGvN,eACRtG,EAAK+T,GAAGG,mBAUxB,OALIN,EAAA/X,UAAAiX,YAAA,WACQ9X,KAAKgZ,cACLhZ,KAAKgZ,aAAaG,wDAVH1X,SAAoC1B,SAA6BqZ,EAAAA,qBAR/D7X,EAAA,CAAxB0W,EAAAA,MAAM,iDAE0B1W,EAAA,CAAhC0W,EAAAA,MAAM,0DAEE1W,EAAA,CAAR0W,EAAAA,sCANQW,EAAMrX,EAAA,CAtBlB+W,EAAAA,UAAU,CACPC,SAAU,mBACVlT,SAAU,6yCAoBDuT,mBA6HT,SAAAS,EAAmBR,EAAsBnX,EAAuBC,GAAhE,IAAAqD,EAAAhF,KAAmBA,KAAA6Y,GAAAA,EAAsB7Y,KAAA0B,GAAAA,EAAuB1B,KAAA2B,KAAAA,EAC5D3B,KAAKgZ,aAAehZ,KAAK6Y,GAAGjX,aAAajB,gBAAgBsY,WAAU,WAC/DjU,EAAKrD,KAAK2X,mBAAkB,WACxB7E,YAAW,WACPzP,EAAKuU,iBACLvU,EAAKF,aAAc,IACpB,UAIX9E,KAAK8E,aAAc,EA0K3B,OAlMayC,OAAAC,eAAI6R,EAAAxY,UAAA,eAAY,KAAhB,WACL,OAAOb,KAAKwZ,mBAEhB,SAAiB/R,GACbzH,KAAKwZ,cAAgB/R,EACV,MAAPA,IAAgBA,EAAIgS,SAAS,MAAQhS,EAAIgS,SAAS,UAClDC,QAAQC,IAAI,yIAGZ3Z,KAAK6Y,GAAGvN,eAAiBtL,KAAK4Z,mBAC9B5Z,KAAK4Z,kBAAkBjV,4CAiB/B0U,EAAAxY,UAAAgZ,mBAAA,YACS7Z,KAAK8E,aAAe9E,KAAK0B,GAAGqK,cAAc6B,eAC3C5N,KAAKuZ,iBACLvZ,KAAK8E,aAAc,IAI3BuU,EAAAxY,UAAAiZ,gBAAA,WACI,GAAK9Z,KAAK+Z,OAcF/Z,KAAKga,4BAA8Bha,KAAKga,2BAA2BjO,gBACnE/L,KAAKga,2BAA2BjO,cAAcc,MAAMC,OAASZ,EAAAA,WAAW+N,2BAA6B,UAf3F,EACVja,KAAK6Y,GAAGqB,eAAiBla,KAAK6Y,GAAG7S,qBACjCkG,EAAAA,WAAWS,SAAS3M,KAAK0B,GAAGqK,cAAe,8BAG/C,IAAIoO,EAAana,KAAK0B,GAAGqK,cAAcqO,uBACnCD,IACIna,KAAK6Y,GAAGvN,cACRtL,KAAKqa,kBAAoBnO,EAAAA,WAAWgC,WAAWiM,EAAY,yCAE3Dna,KAAKqa,kBAAoBnO,EAAAA,WAAWgC,WAAWiM,EAAY,kCASvEna,KAAKsa,aACLta,KAAKuZ,kBAGTF,EAAAxY,UAAAyZ,WAAA,WAAA,IAAAtV,EAAAhF,KACIA,KAAK2B,KAAK2X,mBAAkB,WACHpN,EAAAA,WAAW+C,0BAE5BjK,EAAKuV,uBAAyBvV,EAAKuV,sBAAsBxO,gBACzD/G,EAAKwV,qBAAuBxV,EAAKyV,eAAeC,KAAK1V,GACrDA,EAAK2V,yBAAyB5O,cAAc6L,iBAAiB,SAAU5S,EAAKwV,uBAG5ExV,EAAK4V,uBAAyB5V,EAAK4V,sBAAsB7O,gBACzD/G,EAAK6V,qBAAuB7V,EAAK8V,eAAeJ,KAAK1V,GACrDA,EAAK4V,sBAAsB7O,cAAc6L,iBAAiB,SAAU5S,EAAK6V,uBAGxE7V,EAAK+U,SACN/U,EAAK+V,mBAAqB/V,EAAKgW,aAAaN,KAAK1V,GAE7CA,EAAK6T,GAAGvN,cACRtG,EAAK4U,kBAAkBqB,gBAAgBlP,cAAc6L,iBAAiB,SAAU5S,EAAK+V,oBAErF/V,EAAKkW,oBAAoBnP,cAAc6L,iBAAiB,SAAU5S,EAAK+V,yBAKvF1B,EAAAxY,UAAAsa,aAAA,WACQnb,KAAKua,uBAAyBva,KAAKua,sBAAsBxO,eACzD/L,KAAK2a,yBAAyB5O,cAAc8L,oBAAoB,SAAU7X,KAAKwa,sBAG/Exa,KAAK4a,uBAAyB5a,KAAK4a,sBAAsB7O,eACzD/L,KAAK4a,sBAAsB7O,cAAc8L,oBAAoB,SAAU7X,KAAK6a,sBAG5E7a,KAAKkb,qBAAuBlb,KAAKkb,oBAAoBnP,eACrD/L,KAAKkb,oBAAoBnP,cAAc8L,oBAAoB,SAAU7X,KAAK+a,oBAG1E/a,KAAK4Z,mBAAqB5Z,KAAK4Z,kBAAkBqB,iBACjDjb,KAAK4Z,kBAAkBqB,gBAAgBlP,cAAc8L,oBAAoB,SAAU7X,KAAK+a,qBAIhG1B,EAAAxY,UAAA4Z,eAAA,WACI,IAAMjO,EAAaxM,KAAKua,sBAAsBxO,cAAcS,WAE5DxM,KAAKkb,oBAAoBnP,cAAcS,WAAaA,EAEhDxM,KAAK4a,uBAAyB5a,KAAK4a,sBAAsB7O,gBACzD/L,KAAK4a,sBAAsB7O,cAAcS,WAAaA,GAG1DxM,KAAKob,8BAA+B,GAGxC/B,EAAAxY,UAAAia,eAAA,WACI,IAAMtO,EAAaxM,KAAK4a,sBAAsB7O,cAAcS,WAC5DxM,KAAKkb,oBAAoBnP,cAAcS,WAAaA,EAEhDxM,KAAKua,uBAAyBva,KAAKua,sBAAsBxO,gBACzD/L,KAAKua,sBAAsBxO,cAAcS,WAAaA,GAG1DxM,KAAKob,8BAA+B,GAGxC/B,EAAAxY,UAAAma,aAAA,SAAazR,GACLvJ,KAAKob,6BACLpb,KAAKob,8BAA+B,GAIpCpb,KAAKua,uBAAyBva,KAAKua,sBAAsBxO,gBACzD/L,KAAK2a,yBAAyB5O,cAAcc,MAAMwO,YAAc,EAAI9R,EAAMwI,OAAOvF,WAAa,MAG9FxM,KAAK4a,uBAAyB5a,KAAK4a,sBAAsB7O,gBACzD/L,KAAKsb,yBAAyBvP,cAAcc,MAAMwO,YAAc,EAAI9R,EAAMwI,OAAOvF,WAAa,MAG9FxM,KAAKqa,oBACLra,KAAKqa,kBAAkBkB,UAAYhS,EAAMwI,OAAOwJ,aAIxDlC,EAAAxY,UAAA0K,qBAAA,SAAqBpI,GACbnD,KAAK4Z,mBACL5Z,KAAK4Z,kBAAkB4B,cAAcrY,IAI7CkW,EAAAxY,UAAA2K,SAAA,SAASI,GACD5L,KAAK4Z,kBACL5Z,KAAK4Z,kBAAkBpO,SAASI,GAG5B5L,KAAKkb,oBAAoBnP,cAAcP,SACvCxL,KAAKkb,oBAAoBnP,cAAcP,SAASI,IAGhD5L,KAAKkb,oBAAoBnP,cAAcS,WAAaZ,EAAQS,KAC5DrM,KAAKkb,oBAAoBnP,cAAcwP,UAAY3P,EAAQH,MAKvE4N,EAAAxY,UAAA4a,oBAAA,WACI,OAAIzb,KAAK6Y,GAAGvN,cACAtL,KAAK4Z,kBAAkB8B,gBAAkB1b,KAAK6Y,GAAG7V,iBAAoBhD,KAAK4Z,kBAAkB+B,kBAE7FzP,EAAAA,WAAW0P,eAAe5b,KAAK6b,qBAAqB9P,eAAiBG,EAAAA,WAAW0P,eAAe5b,KAAKkb,oBAAoBnP,gBAGvIsN,EAAAxY,UAAA0Y,eAAA,WACI,IAAKvZ,KAAK+Z,OAAQ,CACd,IAAI+B,EAAiB9b,KAAKyb,sBAAwBvP,EAAAA,WAAW+C,0BAA4B,EACzFjP,KAAK2a,yBAAyB5O,cAAcc,MAAMkP,YAAcD,EAAiB,KAE7E9b,KAAKsb,0BAA4Btb,KAAKsb,yBAAyBvP,gBAC/D/L,KAAKsb,yBAAyBvP,cAAcc,MAAMkP,YAAcD,EAAiB,MAGzF9b,KAAK8E,aAAc,GAGvBuU,EAAAxY,UAAAiX,YAAA,WACI9X,KAAKmb,eAELnb,KAAKqa,kBAAoB,KAErBra,KAAKgZ,cACLhZ,KAAKgZ,aAAaG,cAGtBnZ,KAAK8E,aAAc,4CAlLArD,SAAsBsW,EAAAA,kBAAyBC,EAAAA,UAtD3CzW,EAAA,CAA1B0W,EAAAA,MAAM,mDAEE1W,EAAA,CAAR0W,EAAAA,sCAE0B1W,EAAA,CAA1B4W,EAAAA,UAAU,6DAEmB5W,EAAA,CAA7B4W,EAAAA,UAAU,mEAEc5W,EAAA,CAAxB4W,EAAAA,UAAU,yDAEe5W,EAAA,CAAzB4W,EAAAA,UAAU,2DAEgB5W,EAAA,CAA1B4W,EAAAA,UAAU,mEAEgB5W,EAAA,CAA1B4W,EAAAA,UAAU,6DAEmB5W,EAAA,CAA7B4W,EAAAA,UAAU,mEAEqB5W,EAAA,CAA/B4W,EAAAA,UAAU,uEAE0B5W,EAAA,CAApC4W,EAAAA,UAAU6D,EAAAA,mEAoBFza,EAAA,CAAR0W,EAAAA,0CA1CQoB,EAAgB9X,EAAA,CA5C5B+W,EAAAA,UAAU,CACPC,SAAU,qBACVlT,SAAU,y6GA0CDgU,mBAgQT,SAAA4C,EAAmBpD,GAAnB,IAAA7T,EAAAhF,KAAmBA,KAAA6Y,GAAAA,EACX7Y,KAAKkc,cACLlc,KAAKgZ,aAAehZ,KAAK6Y,GAAGjX,aAAarB,YAAY0Y,WAAU,SAAAlY,GAC3DiE,EAAKmX,sBA0CrB,OArCIF,EAAApb,UAAA8D,SAAA,WACQ3E,KAAKkc,aACLlc,KAAKmc,mBAIbF,EAAApb,UAAAsb,gBAAA,WACInc,KAAKoL,OAASpL,KAAK6Y,GAAG1N,SAASnL,KAAK4J,QAIxCqS,EAAApb,UAAAub,QAAA,SAAQ7S,GACAvJ,KAAKkc,cACLlc,KAAKmc,kBACLnc,KAAK6Y,GAAGnP,KAAK,CACTC,cAAeJ,EACfK,MAAO5J,KAAK4J,QAGhBsC,EAAAA,WAAWmQ,mBAKnBJ,EAAApb,UAAAyb,WAAA,SAAW/S,GACPvJ,KAAKoc,QAAQ7S,IAGjB0S,EAAApb,UAAAqb,UAAA,WACI,OAAyC,IAAlClc,KAAKuc,0BAGhBN,EAAApb,UAAAiX,YAAA,WACQ9X,KAAKgZ,cACLhZ,KAAKgZ,aAAaG,wDA1CH1X,KARIF,EAAA,CAA1B0W,EAAAA,MAAM,iDAEE1W,EAAA,CAAR0W,EAAAA,wDAyBD1W,EAAA,CADCib,EAAAA,aAAa,QAAS,CAAC,wCAcxBjb,EAAA,CADCib,EAAAA,aAAa,gBAAiB,CAAC,2CAzCvBP,EAAgB1a,EAAA,CAR5Bkb,EAAAA,UAAU,CACPlE,SAAU,qBACVmE,KAAM,CACFC,6BAA8B,cAC9BC,6BAA8B,SAC9BC,kBAAmB,+BAGdZ,mBA2ET,SAAAa,EAAmBjE,GAAnB,IAAA7T,EAAAhF,KAAmBA,KAAA6Y,GAAAA,EACf7Y,KAAKgZ,aAAehZ,KAAK6Y,GAAGjX,aAAarB,YAAY0Y,WAAU,SAAAlY,GAC3DiE,EAAKmX,qBA2BjB,OAvBIW,EAAAjc,UAAA8D,SAAA,WACI3E,KAAKmc,mBAGTW,EAAAjc,UAAAub,QAAA,SAAQ7S,GACJA,EAAMkD,kBAGVqQ,EAAAjc,UAAAsb,gBAAA,WACI,GAAyB,WAArBnc,KAAK6Y,GAAGvW,SACRtC,KAAKiH,UAAYjH,KAAK6Y,GAAG1N,SAASnL,KAAK4J,OAAS5J,KAAK6Y,GAAG5R,UAAY,OAEnE,GAAyB,aAArBjH,KAAK6Y,GAAGvW,SAAyB,CACtC,IAAIvB,EAAWf,KAAK6Y,GAAG9O,YAAY/J,KAAK4J,OACxC5J,KAAKiH,UAAYlG,EAAWA,EAASiJ,MAAO,IAIpD8S,EAAAjc,UAAAiX,YAAA,WACQ9X,KAAKgZ,cACLhZ,KAAKgZ,aAAaG,wDA1BH1X,KAVdF,EAAA,CAAR0W,EAAAA,qCAEQ1W,EAAA,CAAR0W,EAAAA,6CAEQ1W,EAAA,CAAR0W,EAAAA,4CANQ6E,EAAUvb,EAAA,CANtB+W,EAAAA,UAAU,CACPC,SAAU,sBACVlT,SAAU,0MAIDyX,mBA0DT,SAAAC,EAAmBlE,EAAsBnX,EAAuBC,GAA7C3B,KAAA6Y,GAAAA,EAAsB7Y,KAAA0B,GAAAA,EAAuB1B,KAAA2B,KAAAA,EA+DpE,OA7DIob,EAAAlc,UAAAiZ,gBAAA,WAAA,IAAA9U,EAAAhF,KACQA,KAAKkc,cACLhQ,EAAAA,WAAWS,SAAS3M,KAAK0B,GAAGqK,cAAe,uBAC3C/L,KAAKgd,QAAUrF,SAASsF,cAAc,QACtCjd,KAAKgd,QAAQE,UAAY,iCACzBld,KAAK0B,GAAGqK,cAAcoR,YAAYnd,KAAKgd,SAEvChd,KAAK2B,KAAK2X,mBAAkB,WACxBtU,EAAKoY,yBAA2BpY,EAAKqY,YAAY3C,KAAK1V,GACtDA,EAAKgY,QAAQpF,iBAAiB,YAAa5S,EAAKoY,+BAK5DL,EAAAlc,UAAAyc,mBAAA,WAAA,IAAAtY,EAAAhF,KACIA,KAAK2B,KAAK2X,mBAAkB,WACxBtU,EAAKuY,0BAA4BvY,EAAKwY,oBAAoB9C,KAAK1V,GAC/D2S,SAASC,iBAAiB,YAAa5S,EAAKuY,2BAE5CvY,EAAKyY,wBAA0BzY,EAAK0Y,kBAAkBhD,KAAK1V,GAC3D2S,SAASC,iBAAiB,UAAW5S,EAAKyY,6BAIlDV,EAAAlc,UAAA8c,qBAAA,WACQ3d,KAAKud,4BACL5F,SAASE,oBAAoB,YAAa7X,KAAKud,2BAC/Cvd,KAAKud,0BAA4B,MAGjCvd,KAAKyd,0BACL9F,SAASE,oBAAoB,UAAW7X,KAAKyd,yBAC7Czd,KAAKyd,wBAA0B,OAIvCV,EAAAlc,UAAAwc,YAAA,SAAY9T,GACRvJ,KAAK6Y,GAAG7M,oBAAoBzC,GAC5BvJ,KAAKsd,sBAGTP,EAAAlc,UAAA2c,oBAAA,SAAoBjU,GAChBvJ,KAAK6Y,GAAGnM,eAAenD,IAG3BwT,EAAAlc,UAAA6c,kBAAA,SAAkBnU,GACdvJ,KAAK6Y,GAAG5L,kBAAkB1D,EAAOvJ,KAAK0B,GAAGqK,eACzC/L,KAAK2d,wBAGTZ,EAAAlc,UAAAqb,UAAA,WACI,OAA0C,IAAnClc,KAAK4d,2BAGhBb,EAAAlc,UAAAiX,YAAA,WACQ9X,KAAKod,0BACLpd,KAAKgd,QAAQnF,oBAAoB,YAAa7X,KAAKod,0BAGvDpd,KAAK2d,iEA7Dclc,SAAsBsW,EAAAA,kBAAyBC,EAAAA,UAV7DzW,EAAA,CAAR0W,EAAAA,yDAFQ8E,EAAiBxb,EAAA,CAH7Bkb,EAAAA,UAAU,CACPlE,SAAU,yBAEDwE,mBA8FT,SAAAc,EAAmBhF,EAAsBnX,EAAuBC,GAA7C3B,KAAA6Y,GAAAA,EAAsB7Y,KAAA0B,GAAAA,EAAuB1B,KAAA2B,KAAAA,EA4FpE,OA1FIkc,EAAAhd,UAAAiZ,gBAAA,WACQ9Z,KAAKkc,aACLlc,KAAKsa,cAIbuD,EAAAhd,UAAAyZ,WAAA,WAAA,IAAAtV,EAAAhF,KACIA,KAAK2B,KAAK2X,mBAAkB,WACxBtU,EAAK8Y,kBAAoB9Y,EAAKqY,YAAY3C,KAAK1V,GAC/CA,EAAKtD,GAAGqK,cAAc6L,iBAAiB,YAAa5S,EAAK8Y,mBAEzD9Y,EAAK+Y,kBAAoB/Y,EAAKgZ,YAAYtD,KAAK1V,GAC/CA,EAAKtD,GAAGqK,cAAc6L,iBAAiB,YAAa5S,EAAK+Y,mBAEzD/Y,EAAKiZ,iBAAmBjZ,EAAKkZ,YAAYxD,KAAK1V,GAC9CA,EAAKtD,GAAGqK,cAAc6L,iBAAiB,WAAY5S,EAAKiZ,kBAExDjZ,EAAKmZ,kBAAoBnZ,EAAKkZ,YAAYxD,KAAK1V,GAC/CA,EAAKtD,GAAGqK,cAAc6L,iBAAiB,YAAa5S,EAAKmZ,mBAEzDnZ,EAAKoZ,kBAAoBpZ,EAAKqZ,YAAY3D,KAAK1V,GAC/CA,EAAKtD,GAAGqK,cAAc6L,iBAAiB,YAAa5S,EAAKoZ,uBAIjEP,EAAAhd,UAAAsa,aAAA,WACQnb,KAAK8d,oBACLnG,SAASE,oBAAoB,YAAa7X,KAAK8d,mBAC/C9d,KAAK8d,kBAAoB,MAGzB9d,KAAKie,mBACLtG,SAASE,oBAAoB,WAAY7X,KAAKie,kBAC9Cje,KAAKie,iBAAmB,MAGxBje,KAAKme,oBACLxG,SAASE,oBAAoB,YAAa7X,KAAKme,mBAC/Cne,KAAKme,kBAAoB,MAGzBne,KAAKme,oBACLxG,SAASE,oBAAoB,YAAa7X,KAAKme,mBAC/Cne,KAAKme,kBAAoB,MAGzBne,KAAKoe,oBACLzG,SAASE,oBAAoB,YAAa7X,KAAKoe,mBAC/Cpe,KAAKoe,kBAAoB,OAIjCP,EAAAhd,UAAAwc,YAAA,SAAY9T,GACsB,UAA1BA,EAAMwI,OAAOrC,UAAwBxD,EAAAA,WAAWsD,SAASjG,EAAMwI,OAAQ,qBACvE/R,KAAK0B,GAAGqK,cAAc6F,WAAY,EAElC5R,KAAK0B,GAAGqK,cAAc6F,WAAY,GAG1CiM,EAAAhd,UAAAmd,YAAA,SAAYzU,GACRvJ,KAAK6Y,GAAGhJ,kBAAkBtG,EAAOvJ,KAAK0B,GAAGqK,gBAG7C8R,EAAAhd,UAAAyd,WAAA,SAAW/U,GACPA,EAAMkD,kBAGVoR,EAAAhd,UAAAqd,YAAA,SAAY3U,GACRvJ,KAAK6Y,GAAGrI,kBAAkBjH,EAAOvJ,KAAK0B,GAAGqK,gBAG7C8R,EAAAhd,UAAAwd,YAAA,SAAY9U,GACRvJ,KAAK6Y,GAAG1H,kBAAkB5H,IAI9BsU,EAAAhd,UAAA0d,OAAA,SAAOhV,GACCvJ,KAAKkc,aACLlc,KAAK6Y,GAAGzH,aAAa7H,EAAOvJ,KAAK0B,GAAGqK,gBAI5C8R,EAAAhd,UAAAqb,UAAA,WACI,OAA4C,IAArClc,KAAKwe,6BAGhBX,EAAAhd,UAAAiX,YAAA,WACI9X,KAAKmb,yDAzFc1Z,SAAsBsW,EAAAA,kBAAyBC,EAAAA,UAZ7DzW,EAAA,CAAR0W,EAAAA,2DA0FD1W,EAAA,CADCib,EAAAA,aAAa,OAAQ,CAAC,uCA3FdqB,EAAmBtc,EAAA,CAH/Bkb,EAAAA,UAAU,CACPlE,SAAU,2BAEDsF,mBA4HT,SAAAY,EAAmB5F,EAAsBjX,GAAzC,IAAAoD,EAAAhF,KAAmBA,KAAA6Y,GAAAA,EAAsB7Y,KAAA4B,aAAAA,EACjC5B,KAAKkc,cACLlc,KAAKgZ,aAAehZ,KAAK6Y,GAAGjX,aAAanB,iBAAiBwY,WAAU,WAChEjU,EAAKiN,SAAWjN,EAAK6T,GAAG3G,WAAWlN,EAAKuD,QAAQpH,UA6ChE,OAxCIsd,EAAA5d,UAAA8D,SAAA,WACQ3E,KAAKkc,cACLlc,KAAKiS,SAAWjS,KAAK6Y,GAAG3G,WAAWlS,KAAKuI,QAAQpH,QAKxDsd,EAAA5d,UAAAub,QAAA,SAAQ7S,GACAvJ,KAAKkc,aACLlc,KAAK6Y,GAAGhH,eAAe,CACnBlI,cAAeJ,EACfhB,QAASvI,KAAKuI,WAM1BkW,EAAA5d,UAAAyb,WAAA,SAAW/S,GACa,KAAhBA,EAAMmV,OACN1e,KAAKoc,QAAQ7S,IAKrBkV,EAAA5d,UAAA8d,WAAA,SAAWpV,GACHvJ,KAAKkc,aACLlc,KAAK6Y,GAAG7F,kBAAkBzJ,IAIlCkV,EAAA5d,UAAAqb,UAAA,WACI,OAAwC,IAAjClc,KAAK4e,yBAGhBH,EAAA5d,UAAAiX,YAAA,WACQ9X,KAAKgZ,cACLhZ,KAAKgZ,aAAaG,wDA5CH1X,SAAgC1B,KAR7BwB,EAAA,CAAzB0W,EAAAA,MAAM,kDAEE1W,EAAA,CAAR0W,EAAAA,uDAqBD1W,EAAA,CADCib,EAAAA,aAAa,QAAS,CAAC,wCAWxBjb,EAAA,CADCib,EAAAA,aAAa,UAAW,CAAC,2CAQ1Bjb,EAAA,CADCib,EAAAA,aAAa,WAAY,CAAC,2CAzClBiC,EAAeld,EAAA,CAN3Bkb,EAAAA,UAAU,CACPlE,SAAU,oBACVmE,KAAM,CACFE,6BAA8B,eAGzB6B,mBA4ET,SAAAI,EAAmBhG,EAAsBjX,GAAzC,IAAAoD,EAAAhF,KAAmBA,KAAA6Y,GAAAA,EAAsB7Y,KAAA4B,aAAAA,EACjC5B,KAAKkc,cACLlc,KAAKgZ,aAAehZ,KAAK6Y,GAAGjX,aAAanB,iBAAiBwY,WAAU,WAChEjU,EAAKiN,SAAWjN,EAAK6T,GAAG3G,WAAWlN,EAAKuD,QAAQpH,UA+BhE,OA1BI0d,EAAAhe,UAAA8D,SAAA,WACQ3E,KAAKkc,cACLlc,KAAKiS,SAAWjS,KAAK6Y,GAAG3G,WAAWlS,KAAKuI,QAAQpH,QAKxD0d,EAAAhe,UAAAub,QAAA,SAAQ7S,GACAvJ,KAAKkc,aACLlc,KAAK6Y,GAAGhH,eAAe,CACnBlI,cAAeJ,EACfhB,QAASvI,KAAKuI,WAK1BsW,EAAAhe,UAAAqb,UAAA,WACI,OAAwC,IAAjClc,KAAK4e,yBAGhBC,EAAAhe,UAAAiX,YAAA,WACQ9X,KAAKgZ,cACLhZ,KAAKgZ,aAAaG,wDA9BH1X,SAAgC1B,KARrBwB,EAAA,CAAjC0W,EAAAA,MAAM,0DAEE1W,EAAA,CAAR0W,EAAAA,uDAqBD1W,EAAA,CADCib,EAAAA,aAAa,WAAY,CAAC,wCAxBlBqC,EAAuBtd,EAAA,CANnCkb,EAAAA,UAAU,CACPlE,SAAU,4BACVmE,KAAM,CACFE,6BAA8B,eAGzBiC,mBA+DT,SAAAC,EAAmBjG,EAAsBjX,EAAwCF,GAAjF,IAAAsD,EAAAhF,KAAmBA,KAAA6Y,GAAAA,EAAsB7Y,KAAA4B,aAAAA,EAAwC5B,KAAA0B,GAAAA,EACzE1B,KAAKkc,cACLlc,KAAKgZ,aAAehZ,KAAK6Y,GAAGjX,aAAalB,mBAAmBuY,WAAU,SAAC9X,GACnE6D,EAAKiN,SAAWjN,EAAK6T,GAAGzE,OAAOpP,EAAKuD,QAAQpH,KAAMA,OA6BlE,OAvBI2d,EAAAje,UAAAK,cAAA,SAAcqI,GACNvJ,KAAKkc,cACLlc,KAAK6Y,GAAG5F,oBAAoB,CACxBtJ,cAAeJ,EACfhB,QAASvI,KAAKuI,UAGlBvI,KAAK0B,GAAGqK,cAAcgT,QAEtBxV,EAAMkD,mBAIdqS,EAAAje,UAAAqb,UAAA,WACI,OAAyC,IAAlClc,KAAKgf,0BAGhBF,EAAAje,UAAAiX,YAAA,WACQ9X,KAAKgZ,cACLhZ,KAAKgZ,aAAaG,wDA5BH1X,SAAgC1B,SAA8BgY,EAAAA,cAR1DxW,EAAA,CAA1B0W,EAAAA,MAAM,mDAEE1W,EAAA,CAAR0W,EAAAA,wDAeD1W,EAAA,CADCib,EAAAA,aAAa,cAAe,CAAC,8CAlBrBsC,EAAgBvd,EAAA,CAP5Bkb,EAAAA,UAAU,CACPlE,SAAU,qBACVmE,KAAM,CACFuC,kCAAmC,WACnCpC,kBAAmB,kCAGdiC,mBAsET,SAAAI,EAAmBrG,EAAsBjX,GAAzC,IAAAoD,EAAAhF,KAAmBA,KAAA6Y,GAAAA,EAAsB7Y,KAAA4B,aAAAA,EACrC5B,KAAKgZ,aAAehZ,KAAK6Y,GAAGjX,aAAanB,iBAAiBwY,WAAU,WAChEjU,EAAK6O,QAAU7O,EAAK6T,GAAG3G,WAAWlN,EAAKuD,QAAQpH,SAgC3D,OA5BI+d,EAAAre,UAAA8D,SAAA,WACI3E,KAAK6T,QAAU7T,KAAK6Y,GAAG3G,WAAWlS,KAAKuI,QAAQpH,OAGnD+d,EAAAre,UAAAub,QAAA,SAAQ7S,GACCvJ,KAAKmf,UACNnf,KAAK6Y,GAAGxF,uBAAuB,CAC3B1J,cAAeJ,EACfhB,QAASvI,KAAKuI,UAGtB2D,EAAAA,WAAWmQ,kBAGf6C,EAAAre,UAAAue,QAAA,WACIlT,EAAAA,WAAWS,SAAS3M,KAAKqf,aAAatT,cAAe,mBAGzDmT,EAAAre,UAAAye,OAAA,WACIpT,EAAAA,WAAWmD,YAAYrP,KAAKqf,aAAatT,cAAe,mBAG5DmT,EAAAre,UAAAiX,YAAA,WACQ9X,KAAKgZ,cACLhZ,KAAKgZ,aAAaG,wDA9BH1X,SAAgC1B,KAV9CwB,EAAA,CAAR0W,EAAAA,wCAEe1W,EAAA,CAAf0W,EAAAA,MAAM,wCAEW1W,EAAA,CAAjB4W,EAAAA,UAAU,2CANF+G,EAAU3d,EAAA,CAdtB+W,EAAAA,UAAU,CACPC,SAAU,sBACVlT,SAAU,iqBAYD6Z,mBA0ET,SAAAK,EAAmB1G,EAAsBjX,GAAzC,IAAAoD,EAAAhF,KAAmBA,KAAA6Y,GAAAA,EAAsB7Y,KAAA4B,aAAAA,EACrC5B,KAAKwf,wBAA0Bxf,KAAK6Y,GAAGjX,aAAajB,gBAAgBsY,WAAU,WAC1EjU,EAAK6O,QAAU7O,EAAKya,wBAGxBzf,KAAK0f,4BAA8B1f,KAAK6Y,GAAGjX,aAAanB,iBAAiBwY,WAAU,WAC/EjU,EAAK6O,QAAU7O,EAAKya,wBAwDhC,OApDIF,EAAA1e,UAAA8D,SAAA,WACI3E,KAAK6T,QAAU7T,KAAKyf,sBAGxBF,EAAA1e,UAAAub,QAAA,SAAQ7S,EAAcsK,GACd7T,KAAK6Y,GAAGxX,OAASrB,KAAK6Y,GAAGxX,MAAMmF,OAAS,GACxCxG,KAAK6Y,GAAGrF,wBAAwBjK,GAAQsK,GAG5C3H,EAAAA,WAAWmQ,kBAGfkD,EAAA1e,UAAAue,QAAA,WACIlT,EAAAA,WAAWS,SAAS3M,KAAKqf,aAAatT,cAAe,mBAGzDwT,EAAA1e,UAAAye,OAAA,WACIpT,EAAAA,WAAWmD,YAAYrP,KAAKqf,aAAatT,cAAe,mBAG5DwT,EAAA1e,UAAAiX,YAAA,WACQ9X,KAAK0f,6BACL1f,KAAK0f,4BAA4BvG,cAGjCnZ,KAAKwf,yBACLxf,KAAKwf,wBAAwBrG,eAIrCoG,EAAA1e,UAAA4e,mBAAA,mBACQ5L,EACElL,EAAO3I,KAAK6Y,GAAG/Q,eAAe9H,KAAK6Y,GAAGxX,MAE5C,GAAIsH,MACA,IAAiB,IAAAgX,EAAAvX,EAAAO,GAAIiX,EAAAD,EAAA3e,QAAA4e,EAAAtX,KAAAsX,EAAAD,EAAA3e,OAAE,CAAlB,IAAIG,EAAIye,EAAAve,MACT,IAAIrB,KAAK6Y,GAAG3G,WAAW/Q,GAGjB,CACF0S,GAAU,EACV,MAJAA,GAAU,yGASlBA,GAAU,EAGd,OAAOA,4CA3DYpS,SAAgC1B,KAVrCwB,EAAA,CAAjB4W,EAAAA,UAAU,2CAFFoH,EAAgBhe,EAAA,CAd5B+W,EAAAA,UAAU,CACPC,SAAU,4BACVlT,SAAU,utBAYDka,mBAuFT,SAAAM,EAAmBhH,EAAsBnX,EAAuBC,GAA7C3B,KAAA6Y,GAAAA,EAAsB7Y,KAAA0B,GAAAA,EAAuB1B,KAAA2B,KAAAA,EAyKpE,OAvKIke,EAAAhf,UAAAiZ,gBAAA,WACQ9Z,KAAKkc,aACLhQ,EAAAA,WAAWS,SAAS3M,KAAK0B,GAAGqK,cAAe,uBAKnD8T,EAAAhf,UAAAub,QAAA,SAAQ7S,GACJ,GAAIvJ,KAAKkc,YAGL,GAFAlc,KAAK6Y,GAAGpB,kBAAmB,EAEvBzX,KAAK6Y,GAAG3B,aACR,GAAIlX,KAAK6Y,GAAG3B,cAAgBlX,KAAK0B,GAAGqK,cAAe,CAC/C,IAAK/L,KAAK6Y,GAAGvB,qBACT,OAGJpL,EAAAA,WAAWmD,YAAYrP,KAAK6Y,GAAG3B,YAAa,mBAC5ClX,KAAK8f,iBAIT9f,KAAK8f,YAKjBD,EAAAhf,UAAAif,SAAA,WAAA,IAAA9a,EAAAhF,KACIA,KAAK6Y,GAAG7B,kBAAkBhX,KAAK0B,GAAGqK,cAAe/L,KAAK2I,KAAM3I,KAAK4J,OACjEsC,EAAAA,WAAWS,SAAS3M,KAAK0B,GAAGqK,cAAe,mBAC3C/L,KAAK6Y,GAAGzU,WAAWQ,KAAK,CAAEgF,MAAO5J,KAAK4J,MAAOjB,KAAM3I,KAAK2I,OACxD3I,KAAK6Y,GAAGpB,kBAAmB,EAC3BzX,KAAK2B,KAAK2X,mBAAkB,WACxB7E,YAAW,WACP,IAAIsL,EAAY7T,EAAAA,WAAWgC,WAAWlJ,EAAKtD,GAAGqK,cAAe,mBACzDgU,GACAA,EAAUhB,UAEf,QAIXc,EAAAhf,UAAAmf,iBAAA,WACI9T,EAAAA,WAAWmD,YAAYrP,KAAK6Y,GAAG3B,YAAa,mBAC5ClX,KAAK6Y,GAAG3B,YAAc,KACtBlX,KAAK6Y,GAAGnB,8BAIZmI,EAAAhf,UAAAof,UAAA,SAAU1W,GACFvJ,KAAKkc,cAEgB,IAAjB3S,EAAM2W,SACFlgB,KAAK6Y,GAAGvB,uBACRpL,EAAAA,WAAWmD,YAAYrP,KAAK6Y,GAAG3B,YAAa,mBAC5ClX,KAAKggB,mBACLhgB,KAAK6Y,GAAGxU,eAAeO,KAAK,CAAEgF,MAAO5J,KAAK4J,MAAOjB,KAAM3I,KAAK2I,QAGhEY,EAAMkD,kBAIgB,IAAjBlD,EAAM2W,SACPlgB,KAAK6Y,GAAGvB,uBACRpL,EAAAA,WAAWmD,YAAYrP,KAAK6Y,GAAG3B,YAAa,mBAC5ClX,KAAKggB,mBACLhgB,KAAK6Y,GAAGvU,aAAaM,KAAK,CAAEgF,MAAO5J,KAAK4J,MAAOjB,KAAM3I,KAAK2I,QAG9DY,EAAMkD,kBAIgB,GAAjBlD,EAAM2W,UACXlgB,KAAK6Y,GAAGxU,eAAeO,KAAK,CAAEgF,MAAO5J,KAAK4J,MAAOjB,KAAM3I,KAAK2I,OAExDY,EAAM4W,SACNngB,KAAKogB,mBAAmB7W,GAExBvJ,KAAKqgB,eAAe9W,MAKpCsW,EAAAhf,UAAAyf,SAAA,SAASlR,GACL,GAAIA,EAAS,CAET,IADA,IAAI6H,EAAO7H,EACJ6H,IAAS/K,EAAAA,WAAWsD,SAASyH,EAAM,oBACtCA,EAAOA,EAAK1H,cAGhB,OAAO0H,EAGP,OAAO,MAIf4I,EAAAhf,UAAAuf,mBAAA,SAAmB7W,GACf,IAAIgX,EAAcvgB,KAAKsgB,SAAS/W,EAAMwI,QAElCyO,GADMD,EAAYhR,cACLvP,KAAKygB,2BAA2BF,IAE7CC,IACAtU,EAAAA,WAAWwU,oBAAoBF,EAAY,SAC3CjX,EAAMkD,mBAIdoT,EAAAhf,UAAAwf,eAAA,SAAe9W,GACX,IAAIgX,EAAcvgB,KAAKsgB,SAAS/W,EAAMwI,QAElCyO,GADMD,EAAYhR,cACLvP,KAAK2gB,uBAAuBJ,IAEzCC,IACAtU,EAAAA,WAAWwU,oBAAoBF,EAAY,SAC3CjX,EAAMkD,mBAIdoT,EAAAhf,UAAA4f,2BAAA,SAA2BxJ,GACvB,IAAI2J,EAAW3J,EAAKmD,uBAEpB,IAAKwG,EAAU,CACX,IAAIC,EAAc5J,EAAK1H,cAAgB0H,EAAK1H,cAAc6K,uBAAyB,KAC/EyG,IACAD,EAAWC,EAAYC,kBAI/B,OAAIF,EACI1U,EAAAA,WAAWsD,SAASoR,EAAU,sBACvBA,EAEA5gB,KAAKygB,2BAA2BG,GAGpC,MAIff,EAAAhf,UAAA8f,uBAAA,SAAuB1J,GACnB,IAAI8J,EAAW9J,EAAKtJ,mBAEpB,IAAKoT,EAAU,CACX,IAAIC,EAAU/J,EAAK1H,cAAgB0H,EAAK1H,cAAc5B,mBAAqB,KACvEqT,IACAD,EAAWC,EAAQC,mBAI3B,OAAIF,EACI7U,EAAAA,WAAWsD,SAASuR,EAAU,sBACvBA,EAEA/gB,KAAK2gB,uBAAuBI,GAGhC,MAIflB,EAAAhf,UAAAqb,UAAA,WACI,OAAyC,IAAlClc,KAAKkhB,mEAtKOzf,SAAsBsW,EAAAA,kBAAyBC,EAAAA,UAN3CzW,EAAA,CAA1B0W,EAAAA,MAAM,gDAEyB1W,EAAA,CAA/B0W,EAAAA,MAAM,sDAEE1W,EAAA,CAAR0W,EAAAA,wDAWD1W,EAAA,CADCib,EAAAA,aAAa,QAAS,CAAC,wCA2CxBjb,EAAA,CADCib,EAAAA,aAAa,UAAW,CAAC,0CA1DjBqD,EAAgBte,EAAA,CAH5Bkb,EAAAA,UAAU,CACPlE,SAAU,wBAEDsH,mBAsMT,SAAAsB,EAAmBtI,EAAsBuI,GAAtBphB,KAAA6Y,GAAAA,EAAsB7Y,KAAAohB,eAAAA,EAe7C,OAbID,EAAAtgB,UAAAkE,mBAAA,WAAA,IAAAC,EAAAhF,KACIA,KAAKiF,UAAUC,SAAQ,SAAC9B,GACpB,OAAQA,EAAK+B,WACT,IAAK,QACDH,EAAKqc,cAAgBje,EAAKiC,SAC1B,MAEJ,IAAK,SACDL,EAAKsc,eAAiBle,EAAKiC,uDAVpB5D,SAAkCoe,KANzBte,EAAA,CAA/B6W,EAAAA,gBAAgBC,EAAAA,gDAFR8I,EAAmB5f,EAAA,CAX/B+W,EAAAA,UAAU,CACPC,SAAU,wBACVlT,SAAU,kZASD8b,mBAmCT,SAAAI,EAAmB1I,EAAsBnX,EAAuBC,GAA7C3B,KAAA6Y,GAAAA,EAAsB7Y,KAAA0B,GAAAA,EAAuB1B,KAAA2B,KAAAA,EAuEpE,OApEI4f,EAAA1gB,UAAAof,UAAA,SAAU1W,GACN,OAAQA,EAAMmV,OAEV,KAAK,GACD,IAAIsC,EAAUhhB,KAAK0B,GAAGqK,cAAc4B,mBAChCqT,GACAA,EAAQjC,QAGZxV,EAAMkD,iBACV,MAGA,KAAK,GACD,IAAI+U,EAAUxhB,KAAK0B,GAAGqK,cAAcqO,uBAChCoH,GACAA,EAAQzC,QAGZxV,EAAMkD,iBACV,MAGA,KAAK,GACGzM,KAAKuI,QAAQpH,KAAKqH,WAClBxI,KAAK6Y,GAAG4I,eAAiBvV,EAAAA,WAAW/I,MAAMnD,KAAK0B,GAAGqK,eAClD/L,KAAKuI,QAAQpH,KAAKqH,UAAW,EAE7BxI,KAAK6Y,GAAGnV,eAAekB,KAAK,CACxB+E,cAAeJ,EACfpI,KAAMnB,KAAKuI,QAAQpH,OAGvBnB,KAAK6Y,GAAG9R,wBACR/G,KAAK6Y,GAAGjX,aAAaR,WAAWpB,KAAK6Y,GAAGxX,OACxCrB,KAAK0hB,gBAEb,MAGA,KAAK,GACI1hB,KAAKuI,QAAQpH,KAAKqH,WACnBxI,KAAK6Y,GAAG4I,eAAiBvV,EAAAA,WAAW/I,MAAMnD,KAAK0B,GAAGqK,eAClD/L,KAAKuI,QAAQpH,KAAKqH,UAAW,EAE7BxI,KAAK6Y,GAAGpV,aAAamB,KAAK,CACtB+E,cAAeJ,EACfpI,KAAMnB,KAAKuI,QAAQpH,OAGvBnB,KAAK6Y,GAAG9R,wBACR/G,KAAK6Y,GAAGjX,aAAaR,WAAWpB,KAAK6Y,GAAGxX,OACxCrB,KAAK0hB,kBAMrBH,EAAA1gB,UAAA6gB,aAAA,WAAA,IAAA1c,EAAAhF,KACIA,KAAK2B,KAAK2X,mBAAkB,WACxB7E,YAAW,WACP,IAAIkN,EAAMzV,EAAAA,WAAWgC,WAAWlJ,EAAK6T,GAAGzM,mBAAmBL,cAAe,uBAAuBrD,SAAS1D,EAAK6T,GAAG4I,gBAC9GE,GACAA,EAAI5C,UAET,iDApEYtd,SAAsBsW,EAAAA,kBAAyBC,EAAAA,UAFtDzW,EAAA,CAAf0W,EAAAA,MAAM,wCAKP1W,EAAA,CADCib,EAAAA,aAAa,UAAW,CAAC,0CANjB+E,EAAKhgB,EAAA,CANjBkb,EAAAA,UAAU,CACPlE,SAAU,UACVmE,KAAM,CACFG,kBAAmB,UAGd0E,mBA0FT,SAAAK,EAAmB/I,GAAA7Y,KAAA6Y,GAAAA,EAuBvB,OArBI+I,EAAA/gB,UAAAub,QAAA,SAAQ7S,GACJvJ,KAAKuI,QAAQpH,KAAKqH,UAAYxI,KAAKuI,QAAQpH,KAAKqH,SAE5CxI,KAAKuI,QAAQpH,KAAKqH,SAClBxI,KAAK6Y,GAAGpV,aAAamB,KAAK,CACtB+E,cAAeJ,EACfpI,KAAMnB,KAAKuI,QAAQpH,OAIvBnB,KAAK6Y,GAAGnV,eAAekB,KAAK,CACxB+E,cAAeJ,EACfpI,KAAMnB,KAAKuI,QAAQpH,OAI3BnB,KAAK6Y,GAAG9R,wBACR/G,KAAK6Y,GAAGjX,aAAaR,WAAWpB,KAAK6Y,GAAGxX,OAExCkI,EAAMkD,2DArBahL,KAFdF,EAAA,CAAR0W,EAAAA,uCAFQ2J,EAAgBrgB,EAAA,CAT5B+W,EAAAA,UAAU,CACPC,SAAU,qBACVlT,SAAU,8aAODuc,mBAkCb,SAAAC,KAA+B,OAAlBA,EAAetgB,EAAA,CAL3BugB,EAAAA,SAAS,CACNC,QAAS,CAACC,EAAAA,aAAaC,EAAAA,gBAAgBC,EAAAA,iBACvCC,QAAS,CAAC1gB,EAAU2gB,EAAAA,aAAaR,EAAiB3F,EAAiBa,EAAWC,EAAkBwE,EAAM1D,EAAoBY,EAAgBI,EAAwBC,EAAiBI,EAAWK,EAAiBM,EAAiBsB,EAAoBe,EAAAA,iBACpPG,aAAc,CAAC5gB,EAAUmgB,EAAiBvI,EAAiBT,EAAOqD,EAAiBa,EAAWC,EAAkBwE,EAAM1D,EAAoBY,EAAgBI,EAAwBC,EAAiBI,EAAWK,EAAiBM,EAAiBsB,MAEvOU","sourcesContent":["import { NgModule, AfterContentInit, OnInit, OnDestroy, HostListener, Injectable, Directive, Component, Input, Output, EventEmitter, ContentChildren, TemplateRef, QueryList, ElementRef, NgZone, ViewChild, AfterViewInit, AfterViewChecked, OnChanges, SimpleChanges, ChangeDetectionStrategy, ChangeDetectorRef} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TreeNode } from 'primeng-lts/api';\nimport { Subject, Subscription } from 'rxjs';\nimport { DomHandler } from 'primeng-lts/dom';\nimport { PaginatorModule } from 'primeng-lts/paginator';\nimport { PrimeTemplate, SharedModule } from 'primeng-lts/api';\nimport { SortMeta } from 'primeng-lts/api';\nimport { BlockableUI } from 'primeng-lts/api';\nimport { FilterMetadata } from 'primeng-lts/api';\nimport { ObjectUtils } from 'primeng-lts/utils';\nimport { FilterUtils } from 'primeng-lts/utils';\nimport { ScrollingModule, CdkVirtualScrollViewport } from '@angular/cdk/scrolling';\n\n@Injectable()\nexport class TreeTableService {\n\n    private sortSource = new Subject<SortMeta|SortMeta[]>();\n    private selectionSource = new Subject();\n    private contextMenuSource = new Subject<any>();\n    private uiUpdateSource = new Subject<any>();\n    private totalRecordsSource = new Subject<any>();\n\n    sortSource$ = this.sortSource.asObservable();\n    selectionSource$ = this.selectionSource.asObservable();\n    contextMenuSource$ = this.contextMenuSource.asObservable();\n    uiUpdateSource$ = this.uiUpdateSource.asObservable();\n    totalRecordsSource$ = this.totalRecordsSource.asObservable();\n\n    onSort(sortMeta: SortMeta|SortMeta[]) {\n        this.sortSource.next(sortMeta);\n    }\n\n    onSelectionChange() {\n        this.selectionSource.next();\n    }\n\n    onContextMenu(node: any) {\n        this.contextMenuSource.next(node);\n    }\n\n    onUIUpdate(value: any) {\n        this.uiUpdateSource.next(value);\n    }\n\n    onTotalRecordsChange(value: number) {\n        this.totalRecordsSource.next(value);\n    }\n}\n\n@Component({\n    selector: 'p-treeTable',\n    template: `\n        <div #container [ngStyle]=\"style\" [class]=\"styleClass\"\n                [ngClass]=\"{'ui-treetable ui-widget': true, 'ui-treetable-auto-layout': autoLayout, 'ui-treetable-hoverable-rows': (rowHover||(selectionMode === 'single' || selectionMode === 'multiple')),\n                'ui-treetable-resizable': resizableColumns, 'ui-treetable-resizable-fit': (resizableColumns && columnResizeMode === 'fit'), 'ui-treetable-flex-scrollable': (scrollable && scrollHeight === 'flex')}\">\n            <div class=\"ui-treetable-loading ui-widget-overlay\" *ngIf=\"loading && showLoader\"></div>\n            <div class=\"ui-treetable-loading-content\" *ngIf=\"loading && showLoader\">\n                <i [class]=\"'ui-treetable-loading-icon pi-spin ' + loadingIcon\"></i>\n            </div>\n            <div *ngIf=\"captionTemplate\" class=\"ui-treetable-caption ui-widget-header\">\n                <ng-container *ngTemplateOutlet=\"captionTemplate\"></ng-container>\n            </div>\n            <p-paginator [rows]=\"rows\" [first]=\"first\" [totalRecords]=\"totalRecords\" [pageLinkSize]=\"pageLinks\" styleClass=\"ui-paginator-top\" [alwaysShow]=\"alwaysShowPaginator\"\n                (onPageChange)=\"onPageChange($event)\" [rowsPerPageOptions]=\"rowsPerPageOptions\" *ngIf=\"paginator && (paginatorPosition === 'top' || paginatorPosition =='both')\"\n                [templateLeft]=\"paginatorLeftTemplate\" [templateRight]=\"paginatorRightTemplate\" [dropdownAppendTo]=\"paginatorDropdownAppendTo\"\n                [currentPageReportTemplate]=\"currentPageReportTemplate\" [showFirstLastIcon]=\"showFirstLastIcon\" [dropdownItemTemplate]=\"paginatorDropdownItemTemplate\" [showCurrentPageReport]=\"showCurrentPageReport\"></p-paginator>\n\n            <div class=\"ui-treetable-wrapper\" *ngIf=\"!scrollable\">\n                <table #table class=\"ui-treetable-table\" [ngClass]=\"tableStyleClass\" [ngStyle]=\"tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                    <thead class=\"ui-treetable-thead\">\n                        <ng-container *ngTemplateOutlet=\"headerTemplate; context: {$implicit: columns}\"></ng-container>\n                    </thead>\n                    <tfoot class=\"ui-treetable-tfoot\">\n                        <ng-container *ngTemplateOutlet=\"footerTemplate; context {$implicit: columns}\"></ng-container>\n                    </tfoot>\n                    <tbody class=\"ui-treetable-tbody\" [pTreeTableBody]=\"columns\" [pTreeTableBodyTemplate]=\"bodyTemplate\"></tbody>\n                </table>\n            </div>\n\n            <div class=\"ui-treetable-scrollable-wrapper\" *ngIf=\"scrollable\">\n               <div class=\"ui-treetable-scrollable-view ui-treetable-frozen-view\" *ngIf=\"frozenColumns||frozenBodyTemplate\" #scrollableFrozenView [ttScrollableView]=\"frozenColumns\" [frozen]=\"true\" [ngStyle]=\"{width: frozenWidth}\" [scrollHeight]=\"scrollHeight\"></div>\n               <div class=\"ui-treetable-scrollable-view\" #scrollableView [ttScrollableView]=\"columns\" [frozen]=\"false\" [scrollHeight]=\"scrollHeight\" [ngStyle]=\"{left: frozenWidth, width: 'calc(100% - '+frozenWidth+')'}\"></div>\n            </div>\n\n            <p-paginator [rows]=\"rows\" [first]=\"first\" [totalRecords]=\"totalRecords\" [pageLinkSize]=\"pageLinks\" styleClass=\"ui-paginator-bottom\" [alwaysShow]=\"alwaysShowPaginator\"\n                (onPageChange)=\"onPageChange($event)\" [rowsPerPageOptions]=\"rowsPerPageOptions\" *ngIf=\"paginator && (paginatorPosition === 'bottom' || paginatorPosition =='both')\"\n                [templateLeft]=\"paginatorLeftTemplate\" [templateRight]=\"paginatorRightTemplate\" [dropdownAppendTo]=\"paginatorDropdownAppendTo\"\n                [currentPageReportTemplate]=\"currentPageReportTemplate\" [showFirstLastIcon]=\"showFirstLastIcon\" [dropdownItemTemplate]=\"paginatorDropdownItemTemplate\" [showCurrentPageReport]=\"showCurrentPageReport\"></p-paginator>\n            <div *ngIf=\"summaryTemplate\" class=\"ui-treetable-summary ui-widget-header\">\n                <ng-container *ngTemplateOutlet=\"summaryTemplate\"></ng-container>\n            </div>\n\n            <div #resizeHelper class=\"ui-column-resizer-helper ui-state-highlight\" style=\"display:none\" *ngIf=\"resizableColumns\"></div>\n\n            <span #reorderIndicatorUp class=\"pi pi-arrow-down ui-table-reorder-indicator-up\" *ngIf=\"reorderableColumns\"></span>\n            <span #reorderIndicatorDown class=\"pi pi-arrow-up ui-table-reorder-indicator-down\" *ngIf=\"reorderableColumns\"></span>\n        </div>\n    `,\n    providers: [TreeTableService],\n    changeDetection: ChangeDetectionStrategy.Default\n})\nexport class TreeTable implements AfterContentInit, OnInit, OnDestroy, BlockableUI, OnChanges {\n\n    @Input() columns: any[];\n\n    @Input() style: any;\n\n    @Input() styleClass: string;\n\n    @Input() tableStyle: any;\n\n    @Input() tableStyleClass: string;\n\n    @Input() autoLayout: boolean;\n\n    @Input() lazy: boolean = false;\n\n    @Input() lazyLoadOnInit: boolean = true;\n\n    @Input() paginator: boolean;\n\n    @Input() rows: number;\n\n    @Input() first: number = 0;\n\n    @Input() pageLinks: number = 5;\n\n    @Input() rowsPerPageOptions: any[];\n\n    @Input() alwaysShowPaginator: boolean = true;\n\n    @Input() paginatorPosition: string = 'bottom';\n\n    @Input() paginatorDropdownAppendTo: any;\n\n    @Input() currentPageReportTemplate: string = '{currentPage} of {totalPages}';\n\n    @Input() showCurrentPageReport: boolean;\n\n    @Input() showFirstLastIcon: boolean = true;\n\n    @Input() defaultSortOrder: number = 1;\n\n    @Input() sortMode: string = 'single';\n\n    @Input() resetPageOnSort: boolean = true;\n\n    @Input() customSort: boolean;\n\n    @Input() selectionMode: string;\n\n    @Output() selectionChange: EventEmitter<any> = new EventEmitter();\n\n    @Input() contextMenuSelection: any;\n\n    @Output() contextMenuSelectionChange: EventEmitter<any> = new EventEmitter();\n\n    @Input() contextMenuSelectionMode: string = \"separate\";\n\n    @Input() dataKey: string;\n\n    @Input() metaKeySelection: boolean;\n\n    @Input() compareSelectionBy: string = 'deepEquals';\n\n    @Input() rowHover: boolean;\n\n    @Input() loading: boolean;\n\n    @Input() loadingIcon: string = 'pi pi-spinner';\n\n    @Input() showLoader: boolean = true;\n\n    @Input() scrollable: boolean;\n\n    @Input() scrollHeight: string;\n\n    @Input() virtualScroll: boolean;\n\n    @Input() virtualScrollDelay: number = 150;\n\n    @Input() virtualRowHeight: number = 28;\n\n    @Input() minBufferPx: number;\n\n    @Input() maxBufferPx: number;\n\n    @Input() frozenWidth: string;\n\n    @Input() frozenColumns: any[];\n\n    @Input() resizableColumns: boolean;\n\n    @Input() columnResizeMode: string = 'fit';\n\n    @Input() reorderableColumns: boolean;\n\n    @Input() contextMenu: any;\n\n    @Input() rowTrackBy: Function = (index: number, item: any) => item;\n\n    @Input() filters: { [s: string]: FilterMetadata; } = {};\n\n    @Input() globalFilterFields: string[];\n\n    @Input() filterDelay: number = 300;\n\n    @Input() filterMode: string = 'lenient';\n\n    @Input() filterLocale: string;\n\n    @Output() onFilter: EventEmitter<any> = new EventEmitter();\n\n    @Output() onNodeExpand: EventEmitter<any> = new EventEmitter();\n\n    @Output() onNodeCollapse: EventEmitter<any> = new EventEmitter();\n\n    @Output() onPage: EventEmitter<any> = new EventEmitter();\n\n    @Output() onSort: EventEmitter<any> = new EventEmitter();\n\n    @Output() onLazyLoad: EventEmitter<any> = new EventEmitter();\n\n    @Output() sortFunction: EventEmitter<any> = new EventEmitter();\n\n    @Output() onColResize: EventEmitter<any> = new EventEmitter();\n\n    @Output() onColReorder: EventEmitter<any> = new EventEmitter();\n\n    @Output() onNodeSelect: EventEmitter<any> = new EventEmitter();\n\n    @Output() onNodeUnselect: EventEmitter<any> = new EventEmitter();\n\n    @Output() onContextMenuSelect: EventEmitter<any> = new EventEmitter();\n\n    @Output() onHeaderCheckboxToggle: EventEmitter<any> = new EventEmitter();\n\n    @Output() onEditInit: EventEmitter<any> = new EventEmitter();\n\n    @Output() onEditComplete: EventEmitter<any> = new EventEmitter();\n\n    @Output() onEditCancel: EventEmitter<any> = new EventEmitter();\n\n    @ViewChild('container') containerViewChild: ElementRef;\n\n    @ViewChild('resizeHelper') resizeHelperViewChild: ElementRef;\n\n    @ViewChild('reorderIndicatorUp') reorderIndicatorUpViewChild: ElementRef;\n\n    @ViewChild('reorderIndicatorDown') reorderIndicatorDownViewChild: ElementRef;\n\n    @ViewChild('table') tableViewChild: ElementRef;\n\n    @ViewChild('scrollableView') scrollableViewChild;\n\n    @ViewChild('scrollableFrozenView') scrollableFrozenViewChild;\n\n    @ContentChildren(PrimeTemplate) templates: QueryList<PrimeTemplate>;\n\n    _value: TreeNode[] = [];\n\n    serializedValue: any[];\n\n    _totalRecords: number = 0;\n\n    _multiSortMeta: SortMeta[];\n\n    _sortField: string;\n\n    _sortOrder: number = 1;\n\n    filteredNodes: any[];\n\n    filterTimeout: any;\n\n    colGroupTemplate: TemplateRef<any>;\n\n    captionTemplate: TemplateRef<any>;\n\n    headerTemplate: TemplateRef<any>;\n\n    bodyTemplate: TemplateRef<any>;\n\n    loadingBodyTemplate: TemplateRef<any>;\n\n    footerTemplate: TemplateRef<any>;\n\n    summaryTemplate: TemplateRef<any>;\n\n    emptyMessageTemplate: TemplateRef<any>;\n\n    paginatorLeftTemplate: TemplateRef<any>;\n\n    paginatorRightTemplate: TemplateRef<any>;\n\n    paginatorDropdownItemTemplate: TemplateRef<any>;\n\n    frozenHeaderTemplate: TemplateRef<any>;\n\n    frozenBodyTemplate: TemplateRef<any>;\n\n    frozenFooterTemplate: TemplateRef<any>;\n\n    frozenColGroupTemplate: TemplateRef<any>;\n\n    lastResizerHelperX: number;\n\n    reorderIconWidth: number;\n\n    reorderIconHeight: number;\n\n    draggedColumn: any;\n\n    dropPosition: number;\n\n    preventSelectionSetterPropagation: boolean;\n\n    _selection: any;\n\n    selectionKeys: any = {};\n\n    rowTouched: boolean;\n\n    editingCell: Element;\n\n    editingCellData: any;\n\n    editingCellField: any;\n\n    editingCellClick: boolean;\n\n    documentEditListener: any;\n\n    initialized: boolean;\n\n    toggleRowIndex: number;\n\n    ngOnInit() {\n        if (this.lazy && this.lazyLoadOnInit) {\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\n        }\n        this.initialized = true;\n    }\n\n    ngAfterContentInit() {\n        this.templates.forEach((item) => {\n            switch (item.getType()) {\n                case 'caption':\n                    this.captionTemplate = item.template;\n                break;\n\n                case 'header':\n                    this.headerTemplate = item.template;\n                break;\n\n                case 'body':\n                    this.bodyTemplate = item.template;\n                break;\n\n                case 'loadingbody':\n                    this.loadingBodyTemplate = item.template;\n                break;\n\n                case 'footer':\n                    this.footerTemplate = item.template;\n                break;\n\n                case 'summary':\n                    this.summaryTemplate = item.template;\n                break;\n\n                case 'colgroup':\n                    this.colGroupTemplate = item.template;\n                break;\n\n                case 'emptymessage':\n                    this.emptyMessageTemplate = item.template;\n                break;\n\n                case 'paginatorleft':\n                    this.paginatorLeftTemplate = item.template;\n                break;\n\n                case 'paginatorright':\n                    this.paginatorRightTemplate = item.template;\n                break;\n\n                case 'frozenheader':\n                    this.frozenHeaderTemplate = item.template;\n                break;\n\n                case 'frozenbody':\n                    this.frozenBodyTemplate = item.template;\n                break;\n\n                case 'frozenfooter':\n                    this.frozenFooterTemplate = item.template;\n                break;\n\n                case 'frozencolgroup':\n                    this.frozenColGroupTemplate = item.template;\n                break;\n\n                case 'paginatordropdownitem':\n                    this.paginatorDropdownItemTemplate = item.template;\n                break;\n            }\n        });\n    }\n\n    constructor(public el: ElementRef, public zone: NgZone, public tableService: TreeTableService) {}\n\n    ngOnChanges(simpleChange: SimpleChanges) {\n        if (simpleChange.value) {\n            this._value = simpleChange.value.currentValue;\n\n            if (!this.lazy) {\n                this.totalRecords = (this._value ? this._value.length : 0);\n\n                if (this.sortMode == 'single' && this.sortField)\n                    this.sortSingle();\n                else if (this.sortMode == 'multiple' && this.multiSortMeta)\n                    this.sortMultiple();\n                else if (this.hasFilter())       //sort already filters\n                    this._filter();\n            }\n\n            this.updateSerializedValue();\n            this.tableService.onUIUpdate(this.value);\n        }\n\n        if (simpleChange.sortField) {\n            this._sortField = simpleChange.sortField.currentValue;\n\n            //avoid triggering lazy load prior to lazy initialization at onInit\n            if ( !this.lazy || this.initialized ) {\n                if (this.sortMode === 'single') {\n                    this.sortSingle();\n                }\n            }\n        }\n\n        if (simpleChange.sortOrder) {\n            this._sortOrder = simpleChange.sortOrder.currentValue;\n\n            //avoid triggering lazy load prior to lazy initialization at onInit\n            if ( !this.lazy || this.initialized ) {\n                if (this.sortMode === 'single') {\n                    this.sortSingle();\n                }\n            }\n        }\n\n        if (simpleChange.multiSortMeta) {\n            this._multiSortMeta = simpleChange.multiSortMeta.currentValue;\n            if (this.sortMode === 'multiple') {\n                this.sortMultiple();\n            }\n        }\n\n        if (simpleChange.selection) {\n            this._selection = simpleChange.selection.currentValue;\n\n            if (!this.preventSelectionSetterPropagation) {\n                this.updateSelectionKeys();\n                this.tableService.onSelectionChange();\n            }\n            this.preventSelectionSetterPropagation = false;\n        }\n    }\n\n    @Input() get value(): any[] {\n        return this._value;\n    }\n    set value(val: any[]) {\n        this._value = val;\n    }\n\n    updateSerializedValue() {\n        this.serializedValue = [];\n\n        if (this.paginator)\n            this.serializePageNodes();\n        else\n            this.serializeNodes(null, this.filteredNodes||this.value, 0, true);\n    }\n\n    serializeNodes(parent, nodes, level, visible) {\n        if (nodes && nodes.length) {\n            for(let node of nodes) {\n                node.parent = parent;\n                const rowNode = {\n                    node: node,\n                    parent: parent,\n                    level: level,\n                    visible: visible && (parent ? parent.expanded : true)\n                };\n                this.serializedValue.push(rowNode);\n\n                if (rowNode.visible && node.expanded) {\n                    this.serializeNodes(node, node.children, level + 1, rowNode.visible);\n                }\n            }\n        }\n    }\n\n    serializePageNodes() {\n        let data = this.filteredNodes || this.value;\n        this.serializedValue = [];\n        if (data && data.length) {\n            const first = this.lazy ? 0 : this.first;\n\n            for(let i = first; i < (first + this.rows); i++) {\n                let node = data[i];\n                if (node) {\n                    this.serializedValue.push({\n                        node: node,\n                        parent: null,\n                        level: 0,\n                        visible: true\n                    });\n\n                    this.serializeNodes(node, node.children, 1, true);\n                }\n            }\n        }\n    }\n\n    @Input() get totalRecords(): number {\n        return this._totalRecords;\n    }\n    set totalRecords(val: number) {\n        this._totalRecords = val;\n        this.tableService.onTotalRecordsChange(this._totalRecords);\n    }\n\n    @Input() get sortField(): string {\n        return this._sortField;\n    }\n\n    set sortField(val: string) {\n        this._sortField = val;\n    }\n\n    @Input() get sortOrder(): number {\n        return this._sortOrder;\n    }\n    set sortOrder(val: number) {\n        this._sortOrder = val;\n    }\n\n    @Input() get multiSortMeta(): SortMeta[] {\n        return this._multiSortMeta;\n    }\n\n    set multiSortMeta(val: SortMeta[]) {\n        this._multiSortMeta = val;\n    }\n\n    @Input() get selection(): any {\n        return this._selection;\n    }\n\n    set selection(val: any) {\n        this._selection = val;\n    }\n\n    updateSelectionKeys() {\n        if (this.dataKey && this._selection) {\n            this.selectionKeys = {};\n            if (Array.isArray(this._selection)) {\n                for(let node of this._selection) {\n                    this.selectionKeys[String(ObjectUtils.resolveFieldData(node.data, this.dataKey))] = 1;\n                }\n            }\n            else {\n                this.selectionKeys[String(ObjectUtils.resolveFieldData(this._selection.data, this.dataKey))] = 1;\n            }\n        }\n    }\n\n    onPageChange(event) {\n        this.first = event.first;\n        this.rows = event.rows;\n\n        if (this.lazy)\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\n        else\n            this.serializePageNodes();\n\n        this.onPage.emit({\n            first: this.first,\n            rows: this.rows\n        });\n\n        this.tableService.onUIUpdate(this.value);\n\n        if (this.scrollable) {\n            this.resetScrollTop();\n        }\n    }\n\n    sort(event) {\n        let originalEvent = event.originalEvent;\n\n        if (this.sortMode === 'single') {\n            this._sortOrder = (this.sortField === event.field) ? this.sortOrder * -1 : this.defaultSortOrder;\n            this._sortField = event.field;\n            this.sortSingle();\n\n            if (this.resetPageOnSort && this.scrollable) {\n                this.resetScrollTop();\n            }\n        }\n        if (this.sortMode === 'multiple') {\n            let metaKey = originalEvent.metaKey || originalEvent.ctrlKey;\n            let sortMeta = this.getSortMeta(event.field);\n\n            if (sortMeta) {\n                if (!metaKey) {\n                    this._multiSortMeta = [{ field: event.field, order: sortMeta.order * -1 }]\n                \n                    if (this.resetPageOnSort && this.scrollable) {\n                        this.resetScrollTop();\n                    }\n                }\n                else {\n                    sortMeta.order = sortMeta.order * -1;\n                }\n            }\n            else {\n                if (!metaKey || !this.multiSortMeta) {\n                    this._multiSortMeta = [];\n\n                    if (this.resetPageOnSort && this.scrollable) {\n                        this.resetScrollTop();\n                    }\n                }\n                this.multiSortMeta.push({ field: event.field, order: this.defaultSortOrder });\n            }\n\n            this.sortMultiple();\n        }\n    }\n\n    sortSingle() {\n        if (this.sortField && this.sortOrder) {\n            if (this.lazy) {\n                this.onLazyLoad.emit(this.createLazyLoadMetadata());\n            }\n            else if (this.value) {\n                this.sortNodes(this.value);\n\n                if (this.hasFilter()) {\n                    this._filter();\n                }\n            }\n\n            let sortMeta: SortMeta = {\n                field: this.sortField,\n                order: this.sortOrder\n            };\n\n            this.onSort.emit(sortMeta);\n            this.tableService.onSort(sortMeta);\n            this.updateSerializedValue();\n        }\n    }\n\n    sortNodes(nodes) {\n        if (!nodes || nodes.length === 0) {\n            return;\n        }\n\n        if (this.customSort) {\n            this.sortFunction.emit({\n                data: nodes,\n                mode: this.sortMode,\n                field: this.sortField,\n                order: this.sortOrder\n            });\n        }\n        else {\n            nodes.sort((node1, node2) => {\n                let value1 = ObjectUtils.resolveFieldData(node1.data, this.sortField);\n                let value2 = ObjectUtils.resolveFieldData(node2.data, this.sortField);\n                let result = null;\n\n                if (value1 == null && value2 != null)\n                    result = -1;\n                else if (value1 != null && value2 == null)\n                    result = 1;\n                else if (value1 == null && value2 == null)\n                    result = 0;\n                else if (typeof value1 === 'string' && typeof value2 === 'string')\n                    result = value1.localeCompare(value2, undefined, {numeric: true});\n                else\n                    result = (value1 < value2) ? -1 : (value1 > value2) ? 1 : 0;\n\n                return (this.sortOrder * result);\n            });\n        }\n\n        for(let node of nodes) {\n            this.sortNodes(node.children);\n        }\n    }\n\n    sortMultiple() {\n        if (this.multiSortMeta) {\n            if (this.lazy) {\n                this.onLazyLoad.emit(this.createLazyLoadMetadata());\n            }\n            else if (this.value) {\n               this.sortMultipleNodes(this.value);\n\n                if (this.hasFilter()) {\n                    this._filter();\n                }\n            }\n\n            this.onSort.emit({\n                multisortmeta: this.multiSortMeta\n            });\n            this.tableService.onSort(this.multiSortMeta);\n            this.updateSerializedValue();\n        }\n    }\n\n    sortMultipleNodes(nodes) {\n        if (!nodes || nodes.length === 0) {\n            return;\n        }\n\n        if (this.customSort) {\n            this.sortFunction.emit({\n                data: this.value,\n                mode: this.sortMode,\n                multiSortMeta: this.multiSortMeta\n            });\n        }\n        else {\n            nodes.sort((node1, node2) => {\n                return this.multisortField(node1, node2, this.multiSortMeta, 0);\n            });\n        }\n\n        for(let node of nodes) {\n            this.sortMultipleNodes(node.children);\n        }\n    }\n\n    multisortField(node1, node2, multiSortMeta, index) {\n        let value1 = ObjectUtils.resolveFieldData(node1.data, multiSortMeta[index].field);\n        let value2 = ObjectUtils.resolveFieldData(node2.data, multiSortMeta[index].field);\n        let result = null;\n\n        if (value1 == null && value2 != null)\n            result = -1;\n        else if (value1 != null && value2 == null)\n            result = 1;\n        else if (value1 == null && value2 == null)\n            result = 0;\n        if (typeof value1 == 'string' || value1 instanceof String) {\n            if (value1.localeCompare && (value1 != value2)) {\n                return (multiSortMeta[index].order * value1.localeCompare(value2, undefined, {numeric: true}));\n            }\n        }\n        else {\n            result = (value1 < value2) ? -1 : 1;\n        }\n\n        if (value1 == value2) {\n            return (multiSortMeta.length - 1) > (index) ? (this.multisortField(node1, node2, multiSortMeta, index + 1)) : 0;\n        }\n\n        return (multiSortMeta[index].order * result);\n    }\n\n    getSortMeta(field: string) {\n        if (this.multiSortMeta && this.multiSortMeta.length) {\n            for (let i = 0; i < this.multiSortMeta.length; i++) {\n                if (this.multiSortMeta[i].field === field) {\n                    return this.multiSortMeta[i];\n                }\n            }\n        }\n\n        return null;\n    }\n\n    isSorted(field: string) {\n        if (this.sortMode === 'single') {\n            return (this.sortField && this.sortField === field);\n        }\n        else if (this.sortMode === 'multiple') {\n            let sorted = false;\n            if (this.multiSortMeta) {\n                for(let i = 0; i < this.multiSortMeta.length; i++) {\n                    if (this.multiSortMeta[i].field == field) {\n                        sorted = true;\n                        break;\n                    }\n                }\n            }\n            return sorted;\n        }\n    }\n\n    createLazyLoadMetadata(): any {\n        return {\n            first: this.first,\n            rows: this.rows,\n            sortField: this.sortField,\n            sortOrder: this.sortOrder,\n            filters: this.filters,\n            globalFilter: this.filters && this.filters['global'] ? this.filters['global'].value : null,\n            multiSortMeta: this.multiSortMeta\n        };\n    }\n\n    public resetScrollTop() {\n        if (this.virtualScroll)\n            this.scrollToVirtualIndex(0);\n        else\n            this.scrollTo({top: 0});\n    }\n\n    public scrollToVirtualIndex(index: number) {\n        if (this.scrollableViewChild) {\n            this.scrollableViewChild.scrollToVirtualIndex(index);\n        }\n\n        if (this.scrollableFrozenViewChild) {\n            this.scrollableFrozenViewChild.scrollToVirtualIndex(index);\n        }\n    }\n\n    public scrollTo(options) {\n        if (this.scrollableViewChild) {\n            this.scrollableViewChild.scrollTo(options);\n        }\n\n        if (this.scrollableFrozenViewChild) {\n            this.scrollableFrozenViewChild.scrollTo(options);\n        }\n    }\n\n    isEmpty() {\n        let data = this.filteredNodes||this.value;\n        return data == null || data.length == 0;\n    }\n\n    getBlockableElement(): HTMLElement {\n        return this.el.nativeElement.children[0];\n    }\n\n    onColumnResizeBegin(event) {\n        let containerLeft = DomHandler.getOffset(this.containerViewChild.nativeElement).left;\n        this.lastResizerHelperX = (event.pageX - containerLeft + this.containerViewChild.nativeElement.scrollLeft);\n        event.preventDefault();\n    }\n\n    onColumnResize(event) {\n        let containerLeft = DomHandler.getOffset(this.containerViewChild.nativeElement).left;\n        DomHandler.addClass(this.containerViewChild.nativeElement, 'ui-unselectable-text');\n        this.resizeHelperViewChild.nativeElement.style.height = this.containerViewChild.nativeElement.offsetHeight + 'px';\n        this.resizeHelperViewChild.nativeElement.style.top = 0 + 'px';\n        this.resizeHelperViewChild.nativeElement.style.left = (event.pageX - containerLeft + this.containerViewChild.nativeElement.scrollLeft) + 'px';\n\n        this.resizeHelperViewChild.nativeElement.style.display = 'block';\n    }\n\n    onColumnResizeEnd(event, column) {\n        let delta = this.resizeHelperViewChild.nativeElement.offsetLeft - this.lastResizerHelperX;\n        let columnWidth = column.offsetWidth;\n        let newColumnWidth = columnWidth + delta;\n        let minWidth = column.style.minWidth || 15;\n\n        if (columnWidth + delta > parseInt(minWidth)) {\n            if (this.columnResizeMode === 'fit') {\n                let nextColumn = column.nextElementSibling;\n                while (!nextColumn.offsetParent) {\n                    nextColumn = nextColumn.nextElementSibling;\n                }\n\n                if (nextColumn) {\n                    let nextColumnWidth = nextColumn.offsetWidth - delta;\n                    let nextColumnMinWidth = nextColumn.style.minWidth || 15;\n\n                    if (newColumnWidth > 15 && nextColumnWidth > parseInt(nextColumnMinWidth)) {\n                        if (this.scrollable) {\n                            let scrollableView = this.findParentScrollableView(column);\n                            let scrollableBodyTable = DomHandler.findSingle(scrollableView, '.ui-treetable-scrollable-body table') || DomHandler.findSingle(scrollableView, '.ui-treetable-virtual-scrollable-body table');\n                            let scrollableHeaderTable = DomHandler.findSingle(scrollableView, 'table.ui-treetable-scrollable-header-table');\n                            let scrollableFooterTable = DomHandler.findSingle(scrollableView, 'table.ui-treetable-scrollable-footer-table');\n                            let resizeColumnIndex = DomHandler.index(column);\n\n                            this.resizeColGroup(scrollableHeaderTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\n                            this.resizeColGroup(scrollableBodyTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\n                            this.resizeColGroup(scrollableFooterTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\n                        }\n                        else {\n                            column.style.width = newColumnWidth + 'px';\n                            if (nextColumn) {\n                                nextColumn.style.width = nextColumnWidth + 'px';\n                            }\n                        }\n                    }\n                }\n            }\n            else if (this.columnResizeMode === 'expand') {\n                if (this.scrollable) {\n                    let scrollableView = this.findParentScrollableView(column);\n                    let scrollableBody = DomHandler.findSingle(scrollableView, '.ui-treetable-scrollable-body') || DomHandler.findSingle(scrollableView, 'cdk-virtual-scroll-viewport');\n                    let scrollableBodyTable = DomHandler.findSingle(scrollableView, '.ui-treetable-scrollable-body table')  || DomHandler.findSingle(scrollableView, 'cdk-virtual-scroll-viewport table');\n                    let scrollableHeader = DomHandler.findSingle(scrollableView, '.ui-treetable-scrollable-header');\n                    let scrollableFooter = DomHandler.findSingle(scrollableView, '.ui-treetable-scrollable-footer');\n                    let scrollableHeaderTable = DomHandler.findSingle(scrollableView, 'table.ui-treetable-scrollable-header-table');\n                    let scrollableFooterTable = DomHandler.findSingle(scrollableView, 'table.ui-treetable-scrollable-footer-table');\n                    scrollableBodyTable.style.width = scrollableBodyTable.offsetWidth + delta + 'px';\n                    scrollableHeaderTable.style.width = scrollableHeaderTable.offsetWidth + delta + 'px';\n                    if (scrollableFooterTable) {\n                        scrollableFooterTable.style.width = scrollableFooterTable.offsetWidth + delta + 'px';\n                    }\n                    let resizeColumnIndex = DomHandler.index(column);\n\n                    const scrollableBodyTableWidth = column ? scrollableBodyTable.offsetWidth + delta : newColumnWidth;\n                    const scrollableHeaderTableWidth = column ? scrollableHeaderTable.offsetWidth + delta : newColumnWidth;\n                    const isContainerInViewport = this.containerViewChild.nativeElement.offsetWidth >= scrollableBodyTableWidth;\n\n                    let setWidth = (container, table, width, isContainerInViewport) => {\n                        if (container && table) {\n                            container.style.width = isContainerInViewport ? width + DomHandler.calculateScrollbarWidth(scrollableBody) + 'px' : 'auto'\n                            table.style.width = width + 'px';\n                        }\n                    };\n            \n                    setWidth(scrollableBody, scrollableBodyTable, scrollableBodyTableWidth, isContainerInViewport);\n                    setWidth(scrollableHeader, scrollableHeaderTable, scrollableHeaderTableWidth, isContainerInViewport);\n                    setWidth(scrollableFooter, scrollableFooterTable, scrollableHeaderTableWidth, isContainerInViewport);\n\n                    this.resizeColGroup(scrollableHeaderTable, resizeColumnIndex, newColumnWidth, null);\n                    this.resizeColGroup(scrollableBodyTable, resizeColumnIndex, newColumnWidth, null);\n                    this.resizeColGroup(scrollableFooterTable, resizeColumnIndex, newColumnWidth, null);\n                }\n                else {\n                    this.tableViewChild.nativeElement.style.width = this.tableViewChild.nativeElement.offsetWidth + delta + 'px';\n                    column.style.width = newColumnWidth + 'px';\n                    let containerWidth = this.tableViewChild.nativeElement.style.width;\n                    this.containerViewChild.nativeElement.style.width = containerWidth + 'px';\n                }\n            }\n\n            this.onColResize.emit({\n                element: column,\n                delta: delta\n            });\n        }\n\n        this.resizeHelperViewChild.nativeElement.style.display = 'none';\n        DomHandler.removeClass(this.containerViewChild.nativeElement, 'ui-unselectable-text');\n    }\n\n    findParentScrollableView(column) {\n        if (column) {\n            let parent = column.parentElement;\n            while (parent && !DomHandler.hasClass(parent, 'ui-treetable-scrollable-view')) {\n                parent = parent.parentElement;\n            }\n\n            return parent;\n        }\n        else {\n            return null;\n        }\n    }\n\n    resizeColGroup(table, resizeColumnIndex, newColumnWidth, nextColumnWidth) {\n        if (table) {\n            let colGroup = table.children[0].nodeName === 'COLGROUP' ? table.children[0] : null;\n\n            if (colGroup) {\n                let col = colGroup.children[resizeColumnIndex];\n                let nextCol = col.nextElementSibling;\n                col.style.width = newColumnWidth + 'px';\n\n                if (nextCol && nextColumnWidth) {\n                    nextCol.style.width = nextColumnWidth + 'px';\n                }\n            }\n            else {\n                throw \"Scrollable tables require a colgroup to support resizable columns\";\n            }\n        }\n    }\n\n    onColumnDragStart(event, columnElement) {\n        this.reorderIconWidth = DomHandler.getHiddenElementOuterWidth(this.reorderIndicatorUpViewChild.nativeElement);\n        this.reorderIconHeight = DomHandler.getHiddenElementOuterHeight(this.reorderIndicatorDownViewChild.nativeElement);\n        this.draggedColumn = columnElement;\n        event.dataTransfer.setData('text', 'b');    // For firefox\n    }\n\n    onColumnDragEnter(event, dropHeader) {\n        if (this.reorderableColumns && this.draggedColumn && dropHeader) {\n            event.preventDefault();\n            let containerOffset = DomHandler.getOffset(this.containerViewChild.nativeElement);\n            let dropHeaderOffset = DomHandler.getOffset(dropHeader);\n\n            if (this.draggedColumn != dropHeader) {\n                let targetLeft = dropHeaderOffset.left - containerOffset.left;\n                let targetTop = containerOffset.top - dropHeaderOffset.top;\n                let columnCenter = dropHeaderOffset.left + dropHeader.offsetWidth / 2;\n\n                this.reorderIndicatorUpViewChild.nativeElement.style.top = dropHeaderOffset.top - containerOffset.top - (this.reorderIconHeight - 1) + 'px';\n                this.reorderIndicatorDownViewChild.nativeElement.style.top = dropHeaderOffset.top - containerOffset.top + dropHeader.offsetHeight + 'px';\n\n                if (event.pageX > columnCenter) {\n                    this.reorderIndicatorUpViewChild.nativeElement.style.left = (targetLeft + dropHeader.offsetWidth - Math.ceil(this.reorderIconWidth / 2)) + 'px';\n                    this.reorderIndicatorDownViewChild.nativeElement.style.left = (targetLeft + dropHeader.offsetWidth - Math.ceil(this.reorderIconWidth / 2)) + 'px';\n                    this.dropPosition = 1;\n                }\n                else {\n                    this.reorderIndicatorUpViewChild.nativeElement.style.left = (targetLeft - Math.ceil(this.reorderIconWidth / 2)) + 'px';\n                    this.reorderIndicatorDownViewChild.nativeElement.style.left = (targetLeft - Math.ceil(this.reorderIconWidth / 2)) + 'px';\n                    this.dropPosition = -1;\n                }\n\n                this.reorderIndicatorUpViewChild.nativeElement.style.display = 'block';\n                this.reorderIndicatorDownViewChild.nativeElement.style.display = 'block';\n            }\n            else {\n                event.dataTransfer.dropEffect = 'none';\n            }\n        }\n    }\n\n    onColumnDragLeave(event) {\n        if (this.reorderableColumns && this.draggedColumn) {\n            event.preventDefault();\n            this.reorderIndicatorUpViewChild.nativeElement.style.display = 'none';\n            this.reorderIndicatorDownViewChild.nativeElement.style.display = 'none';\n        }\n    }\n\n    onColumnDrop(event, dropColumn) {\n        event.preventDefault();\n        if (this.draggedColumn) {\n            let dragIndex = DomHandler.indexWithinGroup(this.draggedColumn, 'ttreorderablecolumn');\n            let dropIndex = DomHandler.indexWithinGroup(dropColumn, 'ttreorderablecolumn');\n            let allowDrop = (dragIndex != dropIndex);\n            if (allowDrop && ((dropIndex - dragIndex == 1 && this.dropPosition === -1) || (dragIndex - dropIndex == 1 && this.dropPosition === 1))) {\n                allowDrop = false;\n            }\n\n            if (allowDrop && ((dropIndex < dragIndex && this.dropPosition === 1))) {\n                dropIndex = dropIndex + 1;\n            }\n\n            if (allowDrop && ((dropIndex > dragIndex && this.dropPosition === -1))) {\n                dropIndex = dropIndex - 1;\n            }\n\n            if (allowDrop) {\n                ObjectUtils.reorderArray(this.columns, dragIndex, dropIndex);\n\n                this.onColReorder.emit({\n                    dragIndex: dragIndex,\n                    dropIndex: dropIndex,\n                    columns: this.columns\n                });\n            }\n\n            this.reorderIndicatorUpViewChild.nativeElement.style.display = 'none';\n            this.reorderIndicatorDownViewChild.nativeElement.style.display = 'none';\n            this.draggedColumn.draggable = false;\n            this.draggedColumn = null;\n            this.dropPosition = null;\n        }\n    }\n\n    handleRowClick(event) {\n        let targetNode = (<HTMLElement> event.originalEvent.target).nodeName;\n        if (targetNode == 'INPUT' || targetNode == 'BUTTON' || targetNode == 'A' || (DomHandler.hasClass(event.originalEvent.target, 'ui-clickable'))) {\n            return;\n        }\n\n        if (this.selectionMode) {\n            this.preventSelectionSetterPropagation = true;\n            let rowNode = event.rowNode;\n            let selected = this.isSelected(rowNode.node);\n            let metaSelection = this.rowTouched ? false : this.metaKeySelection;\n            let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(rowNode.node.data, this.dataKey)) : null;\n\n            if (metaSelection) {\n                let metaKey = event.originalEvent.metaKey||event.originalEvent.ctrlKey;\n\n                if (selected && metaKey) {\n                    if (this.isSingleSelectionMode()) {\n                        this._selection = null;\n                        this.selectionKeys = {};\n                        this.selectionChange.emit(null);\n                    }\n                    else {\n                        let selectionIndex = this.findIndexInSelection(rowNode.node);\n                        this._selection = this.selection.filter((val,i) => i != selectionIndex);\n                        this.selectionChange.emit(this.selection);\n                        if (dataKeyValue) {\n                            delete this.selectionKeys[dataKeyValue];\n                        }\n                    }\n\n                    this.onNodeUnselect.emit({originalEvent: event.originalEvent, node: rowNode.node, type: 'row'});\n                }\n                else {\n                    if (this.isSingleSelectionMode()) {\n                        this._selection = rowNode.node;\n                        this.selectionChange.emit(rowNode.node);\n                        if (dataKeyValue) {\n                            this.selectionKeys = {};\n                            this.selectionKeys[dataKeyValue] = 1;\n                        }\n                    }\n                    else if (this.isMultipleSelectionMode()) {\n                        if (metaKey) {\n                            this._selection = this.selection||[];\n                        }\n                        else {\n                            this._selection = [];\n                            this.selectionKeys = {};\n                        }\n\n                        this._selection = [...this.selection, rowNode.node];\n                        this.selectionChange.emit(this.selection);\n                        if (dataKeyValue) {\n                            this.selectionKeys[dataKeyValue] = 1;\n                        }\n                    }\n\n                    this.onNodeSelect.emit({originalEvent: event.originalEvent, node: rowNode.node, type: 'row', index: event.rowIndex});\n                }\n            }\n            else {\n                if (this.selectionMode === 'single') {\n                    if (selected) {\n                        this._selection = null;\n                        this.selectionKeys = {};\n                        this.selectionChange.emit(this.selection);\n                        this.onNodeUnselect.emit({ originalEvent: event.originalEvent, node: rowNode.node, type: 'row' });\n                    }\n                    else {\n                        this._selection = rowNode.node;\n                        this.selectionChange.emit(this.selection);\n                        this.onNodeSelect.emit({ originalEvent: event.originalEvent, node: rowNode.node, type: 'row', index: event.rowIndex });\n                        if (dataKeyValue) {\n                            this.selectionKeys = {};\n                            this.selectionKeys[dataKeyValue] = 1;\n                        }\n                    }\n                }\n                else if (this.selectionMode === 'multiple') {\n                    if (selected) {\n                        let selectionIndex = this.findIndexInSelection(rowNode.node);\n                        this._selection = this.selection.filter((val, i) => i != selectionIndex);\n                        this.selectionChange.emit(this.selection);\n                        this.onNodeUnselect.emit({ originalEvent: event.originalEvent, node: rowNode.node, type: 'row' });\n                        if (dataKeyValue) {\n                            delete this.selectionKeys[dataKeyValue];\n                        }\n                    }\n                    else {\n                        this._selection = this.selection ? [...this.selection, rowNode.node] : [rowNode.node];\n                        this.selectionChange.emit(this.selection);\n                        this.onNodeSelect.emit({ originalEvent: event.originalEvent, node: rowNode.node, type: 'row', index: event.rowIndex });\n                        if (dataKeyValue) {\n                            this.selectionKeys[dataKeyValue] = 1;\n                        }\n                    }\n                }\n            }\n\n            this.tableService.onSelectionChange();\n        }\n\n        this.rowTouched = false;\n    }\n\n    handleRowTouchEnd(event) {\n        this.rowTouched = true;\n    }\n\n    handleRowRightClick(event) {\n        if (this.contextMenu) {\n            const node = event.rowNode.node;\n\n            if (this.contextMenuSelectionMode === 'separate') {\n                this.contextMenuSelection = node;\n                this.contextMenuSelectionChange.emit(node);\n                this.onContextMenuSelect.emit({originalEvent: event.originalEvent, node: node});\n                this.contextMenu.show(event.originalEvent);\n                this.tableService.onContextMenu(node);\n            }\n            else if (this.contextMenuSelectionMode === 'joint') {\n                this.preventSelectionSetterPropagation = true;\n                let selected = this.isSelected(node);\n                let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(node.data, this.dataKey)) : null;\n\n                if (!selected) {\n                    if (this.isSingleSelectionMode()) {\n                        this.selection = node;\n                        this.selectionChange.emit(node);\n                    }\n                    else if (this.isMultipleSelectionMode()) {\n                        this.selection = [node];\n                        this.selectionChange.emit(this.selection);\n                    }\n\n                    if (dataKeyValue) {\n                        this.selectionKeys[dataKeyValue] = 1;\n                    }\n                }\n\n                this.contextMenu.show(event.originalEvent);\n                this.onContextMenuSelect.emit({originalEvent: event.originalEvent, node: node});\n            }\n        }\n    }\n\n    toggleNodeWithCheckbox(event) {\n        this.selection = this.selection||[];\n        this.preventSelectionSetterPropagation = true;\n        let node = event.rowNode.node;\n        let selected = this.isSelected(node);\n\n        if (selected) {\n            this.propagateSelectionDown(node, false);\n            if (event.rowNode.parent) {\n                this.propagateSelectionUp(node.parent, false);\n            }\n            this.selectionChange.emit(this.selection);\n            this.onNodeUnselect.emit({originalEvent: event, node: node});\n        }\n        else {\n            this.propagateSelectionDown(node, true);\n            if (event.rowNode.parent) {\n                this.propagateSelectionUp(node.parent, true);\n            }\n            this.selectionChange.emit(this.selection);\n            this.onNodeSelect.emit({originalEvent: event, node: node});\n        }\n\n        this.tableService.onSelectionChange();\n    }\n\n    toggleNodesWithCheckbox(event: Event, check: boolean) {\n        let data = this.filteredNodes || this.value;\n        this._selection = check && data ? data.slice() : [];\n        if (check) {\n            if (data && data.length) {\n                for (let node of data) {\n                    this.propagateSelectionDown(node, true);\n                }\n            }\n        }\n        else {\n            this._selection = [];\n            this.selectionKeys = {};\n        }\n\n        this.preventSelectionSetterPropagation = true;\n        this.selectionChange.emit(this._selection);\n        this.tableService.onSelectionChange();\n        this.onHeaderCheckboxToggle.emit({originalEvent: event, checked: check});\n    }\n\n    propagateSelectionUp(node: TreeNode, select: boolean) {\n        if (node.children && node.children.length) {\n            let selectedChildCount: number = 0;\n            let childPartialSelected: boolean = false;\n            let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(node.data, this.dataKey)) : null;\n\n            for (let child of node.children) {\n                if (this.isSelected(child))\n                selectedChildCount++;\n                else if (child.partialSelected)\n                    childPartialSelected = true;\n            }\n\n            if (select && selectedChildCount == node.children.length) {\n                this._selection =  [...this.selection||[], node];\n                node.partialSelected = false;\n                if (dataKeyValue) {\n                    this.selectionKeys[dataKeyValue] = 1;\n                }\n            }\n            else {\n                if (!select) {\n                    let index = this.findIndexInSelection(node);\n                    if (index >= 0) {\n                        this._selection =  this.selection.filter((val,i) => i!=index);\n\n                        if (dataKeyValue) {\n                            delete this.selectionKeys[dataKeyValue];\n                        }\n                    }\n                }\n\n                if (childPartialSelected || selectedChildCount > 0 && selectedChildCount != node.children.length)\n                    node.partialSelected = true;\n                else\n                    node.partialSelected = false;\n            }\n        }\n\n        let parent = node.parent;\n        if (parent) {\n            this.propagateSelectionUp(parent, select);\n        }\n    }\n\n    propagateSelectionDown(node: TreeNode, select: boolean) {\n        let index = this.findIndexInSelection(node);\n        let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(node.data, this.dataKey)) : null;\n\n        if (select && index == -1) {\n            this._selection =  [...this.selection||[],node]\n            if (dataKeyValue) {\n                this.selectionKeys[dataKeyValue] = 1;\n            }\n        }\n        else if (!select && index > -1) {\n            this._selection =  this.selection.filter((val,i) => i!=index);\n            if (dataKeyValue) {\n                delete this.selectionKeys[dataKeyValue];\n            }\n        }\n\n        node.partialSelected = false;\n\n        if (node.children && node.children.length) {\n            for (let child of node.children) {\n                this.propagateSelectionDown(child, select);\n            }\n        }\n    }\n\n    isSelected(node) {\n        if (node && this.selection) {\n            if (this.dataKey) {\n                return this.selectionKeys[ObjectUtils.resolveFieldData(node.data, this.dataKey)] !== undefined;\n            }\n            else {\n                if (this.selection instanceof Array)\n                    return this.findIndexInSelection(node) > -1;\n                else\n                    return this.equals(node, this.selection);\n            }\n        }\n\n        return false;\n    }\n\n    findIndexInSelection(node: any) {\n        let index: number = -1;\n        if (this.selection && this.selection.length) {\n            for (let i = 0; i < this.selection.length; i++) {\n                if (this.equals(node, this.selection[i])) {\n                    index = i;\n                    break;\n                }\n            }\n        }\n\n        return index;\n    }\n\n    isSingleSelectionMode() {\n        return this.selectionMode === 'single';\n    }\n\n    isMultipleSelectionMode() {\n        return this.selectionMode === 'multiple';\n    }\n\n    equals(node1, node2) {\n        return this.compareSelectionBy === 'equals' ? (node1 === node2) : ObjectUtils.equals(node1.data, node2.data, this.dataKey);\n    }\n\n    filter(value, field, matchMode) {\n        if (this.filterTimeout) {\n            clearTimeout(this.filterTimeout);\n        }\n\n        if (!this.isFilterBlank(value)) {\n            this.filters[field] = { value: value, matchMode: matchMode };\n        } else if (this.filters[field]) {\n            delete this.filters[field];\n        }\n\n        this.filterTimeout = setTimeout(() => {\n            this._filter();\n            this.filterTimeout = null;\n        }, this.filterDelay);\n    }\n\n    filterGlobal(value, matchMode) {\n        this.filter(value, 'global', matchMode);\n    }\n\n    isFilterBlank(filter: any): boolean {\n        if (filter !== null && filter !== undefined) {\n            if ((typeof filter === 'string' && filter.trim().length == 0) || (filter instanceof Array && filter.length == 0))\n                return true;\n            else\n                return false;\n        }\n        return true;\n    }\n\n    _filter() {\n        if (this.lazy) {\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\n        }\n        else {\n            if (!this.value) {\n                return;\n            }\n\n            if (!this.hasFilter()) {\n                this.filteredNodes = null;\n                if (this.paginator) {\n                    this.totalRecords = this.value ? this.value.length : 0;\n                }\n            }\n            else {\n                let globalFilterFieldsArray;\n                if (this.filters['global']) {\n                    if (!this.columns && !this.globalFilterFields)\n                        throw new Error('Global filtering requires dynamic columns or globalFilterFields to be defined.');\n                    else\n                        globalFilterFieldsArray = this.globalFilterFields||this.columns;\n                }\n\n                this.filteredNodes = [];\n                const isStrictMode = this.filterMode === 'strict';\n                let isValueChanged = false;\n\n                for (let node of this.value) {\n                    let copyNode = {...node};\n                    let localMatch = true;\n                    let globalMatch = false;\n                    let paramsWithoutNode;\n\n                    for (let prop in this.filters) {\n                        if (this.filters.hasOwnProperty(prop) && prop !== 'global') {\n                            let filterMeta = this.filters[prop];\n                            let filterField = prop;\n                            let filterValue = filterMeta.value;\n                            let filterMatchMode = filterMeta.matchMode || 'startsWith';\n                            let filterConstraint = FilterUtils[filterMatchMode];\n                            paramsWithoutNode = {filterField, filterValue, filterConstraint, isStrictMode};\n                            if ((isStrictMode && !(this.findFilteredNodes(copyNode, paramsWithoutNode) || this.isFilterMatched(copyNode, paramsWithoutNode))) ||\n                                (!isStrictMode && !(this.isFilterMatched(copyNode, paramsWithoutNode) || this.findFilteredNodes(copyNode, paramsWithoutNode)))) {\n                                    localMatch = false;\n                            }\n\n                            if (!localMatch) {\n                                break;\n                            }\n                        }\n                    }\n\n                    if (this.filters['global'] && !globalMatch && globalFilterFieldsArray) {\n                        for(let j = 0; j < globalFilterFieldsArray.length; j++) {\n                            let copyNodeForGlobal = {...copyNode};\n                            let filterField = globalFilterFieldsArray[j].field||globalFilterFieldsArray[j];\n                            let filterValue = this.filters['global'].value;\n                            let filterConstraint = FilterUtils[this.filters['global'].matchMode];\n                            paramsWithoutNode = {filterField, filterValue, filterConstraint, isStrictMode};\n\n                            if ((isStrictMode && (this.findFilteredNodes(copyNodeForGlobal, paramsWithoutNode) || this.isFilterMatched(copyNodeForGlobal, paramsWithoutNode))) ||\n                                (!isStrictMode && (this.isFilterMatched(copyNodeForGlobal, paramsWithoutNode) || this.findFilteredNodes(copyNodeForGlobal, paramsWithoutNode)))) {\n                                    globalMatch = true;\n                                    copyNode = copyNodeForGlobal;\n                            }\n                        }\n                    }\n\n                    let matches = localMatch;\n                    if (this.filters['global']) {\n                        matches = localMatch && globalMatch;\n                    }\n\n                    if (matches) {\n                        this.filteredNodes.push(copyNode);\n                    }\n\n                    isValueChanged = isValueChanged || !localMatch || globalMatch || (localMatch && this.filteredNodes.length > 0) || (!globalMatch && this.filteredNodes.length === 0)\n                }\n\n                if (!isValueChanged) {\n                    this.filteredNodes = null;\n                }\n\n                if (this.paginator) {\n                    this.totalRecords = this.filteredNodes ? this.filteredNodes.length : this.value ? this.value.length : 0;\n                }\n            }\n        }\n\n        this.first = 0;\n\n        const filteredValue = this.filteredNodes || this.value;\n\n        this.onFilter.emit({\n            filters: this.filters,\n            filteredValue: filteredValue\n        });\n\n        this.tableService.onUIUpdate(filteredValue);\n        this.updateSerializedValue();\n\n        if (this.scrollable) {\n            this.resetScrollTop();\n        }\n    }\n\n    findFilteredNodes(node, paramsWithoutNode) {\n        if (node) {\n            let matched = false;\n            if (node.children) {\n                let childNodes = [...node.children];\n                node.children = [];\n                for (let childNode of childNodes) {\n                    let copyChildNode = {...childNode};\n                    if (this.isFilterMatched(copyChildNode, paramsWithoutNode)) {\n                        matched = true;\n                        node.children.push(copyChildNode);\n                    }\n                }\n            }\n\n            if (matched) {\n                return true;\n            }\n        }\n    }\n\n    isFilterMatched(node, {filterField, filterValue, filterConstraint, isStrictMode}) {\n        let matched = false;\n        let dataFieldValue = ObjectUtils.resolveFieldData(node.data, filterField);\n        if (filterConstraint(dataFieldValue, filterValue, this.filterLocale)) {\n            matched = true;\n        }\n\n        if (!matched || (isStrictMode && !this.isNodeLeaf(node))) {\n            matched = this.findFilteredNodes(node, {filterField, filterValue, filterConstraint, isStrictMode}) || matched;\n        }\n\n        return matched;\n    }\n\n    isNodeLeaf(node) {\n        return node.leaf === false ? false : !(node.children && node.children.length);\n    }\n\n    hasFilter() {\n        let empty = true;\n        for (let prop in this.filters) {\n            if (this.filters.hasOwnProperty(prop)) {\n                empty = false;\n                break;\n            }\n        }\n\n        return !empty;\n    }\n\n    public reset() {\n        this._sortField = null;\n        this._sortOrder = 1;\n        this._multiSortMeta = null;\n        this.tableService.onSort(null);\n\n        this.filteredNodes = null;\n        this.filters = {};\n\n        this.first = 0;\n\n        if (this.lazy) {\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\n        }\n        else {\n            this.totalRecords = (this._value ? this._value.length : 0);\n        }\n    }\n\n    updateEditingCell(cell, data, field) {\n        this.editingCell = cell;\n        this.editingCellData = data;\n        this.editingCellField = field;\n        this.bindDocumentEditListener();\n    }\n\n    isEditingCellValid() {\n        return (this.editingCell && DomHandler.find(this.editingCell, '.ng-invalid.ng-dirty').length === 0);\n    }\n\n    bindDocumentEditListener() {\n        if (!this.documentEditListener) {\n            this.documentEditListener = (event) => {\n                if (this.editingCell && !this.editingCellClick && this.isEditingCellValid()) {\n                    DomHandler.removeClass(this.editingCell, 'ui-editing-cell');\n                    this.editingCell = null;\n                    this.onEditComplete.emit({ field: this.editingCellField, data: this.editingCellData });\n                    this.editingCellField = null;\n                    this.editingCellData = null;\n                    this.unbindDocumentEditListener();\n                }\n\n                this.editingCellClick = false;\n            };\n\n            document.addEventListener('click', this.documentEditListener);\n        }\n    }\n\n    unbindDocumentEditListener() {\n        if (this.documentEditListener) {\n            document.removeEventListener('click', this.documentEditListener);\n            this.documentEditListener = null;\n        }\n    }\n\n    ngOnDestroy() {\n        this.unbindDocumentEditListener();\n        this.editingCell = null;\n        this.editingCellField = null;\n        this.editingCellData = null;\n        this.initialized = null;\n    }\n\n}\n\n@Component({\n    selector: '[pTreeTableBody]',\n    template: `\n        <ng-container *ngIf=\"!tt.virtualScroll\">\n            <ng-template ngFor let-serializedNode let-rowIndex=\"index\" [ngForOf]=\"tt.serializedValue\" [ngForTrackBy]=\"tt.rowTrackBy\">\n                <ng-container *ngIf=\"serializedNode.visible\">\n                    <ng-container *ngTemplateOutlet=\"template; context: {$implicit: serializedNode, node: serializedNode.node, rowData: serializedNode.node.data, columns: columns}\"></ng-container>\n                </ng-container>\n            </ng-template>\n        </ng-container>\n        <ng-container *ngIf=\"tt.virtualScroll\">\n            <ng-template cdkVirtualFor let-serializedNode let-rowIndex=\"index\" [cdkVirtualForOf]=\"tt.serializedValue\" [cdkVirtualForTrackBy]=\"tt.rowTrackBy\"  [cdkVirtualForTemplateCacheSize]=\"0\">\n                <ng-container *ngIf=\"serializedNode.visible\">\n                    <ng-container *ngTemplateOutlet=\"template; context: {$implicit: serializedNode, node: serializedNode.node, rowData: serializedNode.node.data, columns: columns}\"></ng-container>\n                </ng-container>\n            </ng-template>\n        </ng-container>\n        <ng-container *ngIf=\"tt.isEmpty()\">\n            <ng-container *ngTemplateOutlet=\"tt.emptyMessageTemplate; context: {$implicit: columns}\"></ng-container>\n        </ng-container>\n    `\n})\nexport class TTBody {\n\n    @Input(\"pTreeTableBody\") columns: any[];\n\n    @Input(\"pTreeTableBodyTemplate\") template: TemplateRef<any>;\n\n    @Input() frozen: boolean;\n\n    subscription: Subscription;\n\n    constructor(public tt: TreeTable, public treeTableService: TreeTableService, public cd: ChangeDetectorRef) {\n        this.subscription = this.tt.tableService.uiUpdateSource$.subscribe(() => {\n            if (this.tt.virtualScroll) {\n                this.cd.detectChanges();\n            }\n        });\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n}\n\n@Component({\n    selector: '[ttScrollableView]',\n    template: `\n        <div #scrollHeader class=\"ui-treetable-scrollable-header ui-widget-header\">\n            <div #scrollHeaderBox class=\"ui-treetable-scrollable-header-box\">\n                <table class=\"ui-treetable-scrollable-header-table\" [ngClass]=\"tt.tableStyleClass\" [ngStyle]=\"tt.tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate||tt.colGroupTemplate : tt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                    <thead class=\"ui-treetable-thead\">\n                        <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenHeaderTemplate||tt.headerTemplate : tt.headerTemplate; context {$implicit: columns}\"></ng-container>\n                    </thead>\n                </table>\n            </div>\n        </div>\n        <ng-container *ngIf=\"!tt.virtualScroll; else virtualScrollTemplate\">\n            <div #scrollBody class=\"ui-treetable-scrollable-body\" [ngStyle]=\"{'max-height': tt.scrollHeight !== 'flex' ? scrollHeight : undefined}\">\n                <table #scrollTable [class]=\"tt.tableStyleClass\" [ngStyle]=\"tt.tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate||tt.colGroupTemplate : tt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                    <tbody class=\"ui-treetable-tbody\" [pTreeTableBody]=\"columns\" [pTreeTableBodyTemplate]=\"frozen ? tt.frozenBodyTemplate||tt.bodyTemplate : tt.bodyTemplate\" [frozen]=\"frozen\"></tbody>\n                </table>\n                <div #scrollableAligner style=\"background-color:transparent\" *ngIf=\"frozen\"></div>\n            </div>\n        </ng-container>\n        <ng-template #virtualScrollTemplate>\n            <cdk-virtual-scroll-viewport [itemSize]=\"tt.virtualRowHeight\" [style.height]=\"tt.scrollHeight !== 'flex' ? scrollHeight : undefined\" \n                    [minBufferPx]=\"tt.minBufferPx\" [maxBufferPx]=\"tt.maxBufferPx\" class=\"ui-treetable-virtual-scrollable-body\">\n                <table #scrollTable [class]=\"tt.tableStyleClass\" [ngStyle]=\"tt.tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate||tt.colGroupTemplate : tt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                    <tbody class=\"ui-treetable-tbody\" [pTreeTableBody]=\"columns\" [pTreeTableBodyTemplate]=\"frozen ? tt.frozenBodyTemplate||tt.bodyTemplate : tt.bodyTemplate\" [frozen]=\"frozen\"></tbody>\n                </table>\n                <div #scrollableAligner style=\"background-color:transparent\" *ngIf=\"frozen\"></div>\n            </cdk-virtual-scroll-viewport>\n        </ng-template>\n        <div #scrollFooter *ngIf=\"tt.footerTemplate\" class=\"ui-treetable-scrollable-footer ui-widget-header\">\n            <div #scrollFooterBox class=\"ui-treetable-scrollable-footer-box\">\n                <table class=\"ui-treetable-scrollable-footer-table\" [ngClass]=\"tt.tableStyleClass\" [ngStyle]=\"tt.tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate||tt.colGroupTemplate : tt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                    <tfoot class=\"ui-treetable-tfoot\">\n                        <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenFooterTemplate||tt.footerTemplate : tt.footerTemplate; context {$implicit: columns}\"></ng-container>\n                    </tfoot>\n                </table>\n            </div>\n        </div>\n    `\n})\nexport class TTScrollableView implements AfterViewInit, OnDestroy, AfterViewChecked {\n\n    @Input(\"ttScrollableView\") columns: any[];\n\n    @Input() frozen: boolean;\n\n    @ViewChild('scrollHeader') scrollHeaderViewChild: ElementRef;\n\n    @ViewChild('scrollHeaderBox') scrollHeaderBoxViewChild: ElementRef;\n\n    @ViewChild('scrollBody') scrollBodyViewChild: ElementRef;\n\n    @ViewChild('scrollTable') scrollTableViewChild: ElementRef;\n\n    @ViewChild('loadingTable') scrollLoadingTableViewChild: ElementRef;\n\n    @ViewChild('scrollFooter') scrollFooterViewChild: ElementRef;\n\n    @ViewChild('scrollFooterBox') scrollFooterBoxViewChild: ElementRef;\n\n    @ViewChild('scrollableAligner') scrollableAlignerViewChild: ElementRef;\n\n    @ViewChild(CdkVirtualScrollViewport) virtualScrollBody: CdkVirtualScrollViewport;\n\n    headerScrollListener;\n\n    bodyScrollListener;\n\n    footerScrollListener;\n\n    frozenSiblingBody: Element;\n\n    subscription: Subscription;\n\n    totalRecordsSubscription: Subscription;\n\n    initialized: boolean;\n\n    _scrollHeight: string;\n\n    preventBodyScrollPropagation: boolean;\n\n    @Input() get scrollHeight(): string {\n        return this._scrollHeight;\n    }\n    set scrollHeight(val: string) {\n        this._scrollHeight = val;\n        if (val != null && (val.includes('%') || val.includes('calc'))) {\n            console.log('Percentage scroll height calculation is removed in favor of the more performant CSS based flex mode, use scrollHeight=\"flex\" instead.')\n        }\n\n        if (this.tt.virtualScroll && this.virtualScrollBody) {\n            this.virtualScrollBody.ngOnInit();\n        }\n    }\n\n    constructor(public tt: TreeTable, public el: ElementRef, public zone: NgZone) {\n        this.subscription = this.tt.tableService.uiUpdateSource$.subscribe(() => {\n            this.zone.runOutsideAngular(() => {\n                setTimeout(() => {\n                    this.alignScrollBar();\n                    this.initialized = true;\n                }, 50);\n            });\n        });\n\n        this.initialized = false;\n     }\n\n    ngAfterViewChecked() {\n        if (!this.initialized && this.el.nativeElement.offsetParent) {\n            this.alignScrollBar();\n            this.initialized = true;\n        }\n    }\n\n    ngAfterViewInit() {\n        if (!this.frozen) {\n            if (this.tt.frozenColumns || this.tt.frozenBodyTemplate) {\n                DomHandler.addClass(this.el.nativeElement, 'ui-treetable-unfrozen-view');\n            }\n\n            let frozenView = this.el.nativeElement.previousElementSibling;\n            if (frozenView) {\n                if (this.tt.virtualScroll)\n                    this.frozenSiblingBody = DomHandler.findSingle(frozenView, '.ui-treetable-virtual-scrollable-body');\n                else\n                    this.frozenSiblingBody = DomHandler.findSingle(frozenView, '.ui-treetable-scrollable-body');\n            }\n        }\n        else {\n            if (this.scrollableAlignerViewChild && this.scrollableAlignerViewChild.nativeElement) {\n                this.scrollableAlignerViewChild.nativeElement.style.height = DomHandler.calculateScrollbarHeight() + 'px';\n            }\n        }\n\n        this.bindEvents();\n        this.alignScrollBar();\n    }\n\n    bindEvents() {\n        this.zone.runOutsideAngular(() => {\n            let scrollBarWidth = DomHandler.calculateScrollbarWidth();\n\n            if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n                this.headerScrollListener = this.onHeaderScroll.bind(this);\n                this.scrollHeaderBoxViewChild.nativeElement.addEventListener('scroll', this.headerScrollListener);\n            }\n\n            if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n                this.footerScrollListener = this.onFooterScroll.bind(this);\n                this.scrollFooterViewChild.nativeElement.addEventListener('scroll', this.footerScrollListener);\n            }\n\n            if (!this.frozen) {\n                this.bodyScrollListener = this.onBodyScroll.bind(this);\n\n                if (this.tt.virtualScroll)\n                    this.virtualScrollBody.getElementRef().nativeElement.addEventListener('scroll', this.bodyScrollListener);\n                else\n                    this.scrollBodyViewChild.nativeElement.addEventListener('scroll', this.bodyScrollListener);\n            }\n        });\n    }\n\n    unbindEvents() {\n        if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n            this.scrollHeaderBoxViewChild.nativeElement.removeEventListener('scroll', this.headerScrollListener);\n        }\n\n        if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n            this.scrollFooterViewChild.nativeElement.removeEventListener('scroll', this.footerScrollListener);\n        }\n\n        if (this.scrollBodyViewChild && this.scrollBodyViewChild.nativeElement) {\n            this.scrollBodyViewChild.nativeElement.removeEventListener('scroll', this.bodyScrollListener);\n        }\n\n        if (this.virtualScrollBody && this.virtualScrollBody.getElementRef()) {\n            this.virtualScrollBody.getElementRef().nativeElement.removeEventListener('scroll', this.bodyScrollListener);\n        }\n    }\n\n    onHeaderScroll() {\n        const scrollLeft = this.scrollHeaderViewChild.nativeElement.scrollLeft;\n\n        this.scrollBodyViewChild.nativeElement.scrollLeft = scrollLeft;\n\n        if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n            this.scrollFooterViewChild.nativeElement.scrollLeft = scrollLeft;\n        }\n\n        this.preventBodyScrollPropagation = true;\n    }\n\n    onFooterScroll() {\n        const scrollLeft = this.scrollFooterViewChild.nativeElement.scrollLeft;\n        this.scrollBodyViewChild.nativeElement.scrollLeft = scrollLeft;\n\n        if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n            this.scrollHeaderViewChild.nativeElement.scrollLeft = scrollLeft;\n        }\n\n        this.preventBodyScrollPropagation = true;\n    }\n\n    onBodyScroll(event) {\n        if (this.preventBodyScrollPropagation) {\n            this.preventBodyScrollPropagation = false;\n            return;\n        }\n\n        if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n            this.scrollHeaderBoxViewChild.nativeElement.style.marginLeft = -1 * event.target.scrollLeft + 'px';\n        }\n\n        if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n            this.scrollFooterBoxViewChild.nativeElement.style.marginLeft = -1 * event.target.scrollLeft + 'px';\n        }\n\n        if (this.frozenSiblingBody) {\n            this.frozenSiblingBody.scrollTop = event.target.scrollTop;\n        }\n    }\n\n    scrollToVirtualIndex(index: number): void {\n        if (this.virtualScrollBody) {\n            this.virtualScrollBody.scrollToIndex(index);\n        }\n    }\n\n    scrollTo(options): void {\n        if (this.virtualScrollBody) {\n            this.virtualScrollBody.scrollTo(options);\n        }\n        else {\n            if (this.scrollBodyViewChild.nativeElement.scrollTo) {\n                this.scrollBodyViewChild.nativeElement.scrollTo(options);\n            }\n            else {\n                this.scrollBodyViewChild.nativeElement.scrollLeft = options.left;\n                this.scrollBodyViewChild.nativeElement.scrollTop = options.top;\n            }\n        }\n    }\n\n    hasVerticalOverflow() {\n        if (this.tt.virtualScroll)\n            return (this.virtualScrollBody.getDataLength() * this.tt.virtualRowHeight) > this.virtualScrollBody.getViewportSize();\n        else\n            return DomHandler.getOuterHeight(this.scrollTableViewChild.nativeElement) > DomHandler.getOuterHeight(this.scrollBodyViewChild.nativeElement);\n    }\n\n    alignScrollBar() {\n        if (!this.frozen) {\n            let scrollBarWidth = this.hasVerticalOverflow() ? DomHandler.calculateScrollbarWidth() : 0;\n            this.scrollHeaderBoxViewChild.nativeElement.style.marginRight = scrollBarWidth + 'px';\n\n            if (this.scrollFooterBoxViewChild && this.scrollFooterBoxViewChild.nativeElement) {\n                this.scrollFooterBoxViewChild.nativeElement.style.marginRight = scrollBarWidth + 'px';\n            }\n        }\n        this.initialized = false;\n    }\n\n    ngOnDestroy() {\n        this.unbindEvents();\n\n        this.frozenSiblingBody = null;\n\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n\n        this.initialized = false;\n    }\n}\n\n@Directive({\n    selector: '[ttSortableColumn]',\n    host: {\n        '[class.ui-sortable-column]': 'isEnabled()',\n        '[class.ui-state-highlight]': 'sorted',\n        '[attr.tabindex]': 'isEnabled() ? \"0\" : null'\n    }\n})\nexport class TTSortableColumn implements OnInit, OnDestroy {\n\n    @Input(\"ttSortableColumn\") field: string;\n\n    @Input() ttSortableColumnDisabled: boolean;\n\n    sorted: boolean;\n\n    subscription: Subscription;\n\n    constructor(public tt: TreeTable) {\n        if (this.isEnabled()) {\n            this.subscription = this.tt.tableService.sortSource$.subscribe(sortMeta => {\n                this.updateSortState();\n            });\n        }\n    }\n\n    ngOnInit() {\n        if (this.isEnabled()) {\n            this.updateSortState();\n        }\n    }\n\n    updateSortState() {\n        this.sorted = this.tt.isSorted(this.field);\n    }\n\n    @HostListener('click', ['$event'])\n    onClick(event: MouseEvent) {\n        if (this.isEnabled()) {\n            this.updateSortState();\n            this.tt.sort({\n                originalEvent: event,\n                field: this.field\n            });\n\n            DomHandler.clearSelection();\n        }\n    }\n\n    @HostListener('keydown.enter', ['$event'])\n    onEnterKey(event: MouseEvent) {\n        this.onClick(event);\n    }\n\n    isEnabled() {\n        return this.ttSortableColumnDisabled !== true;\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n}\n\n@Component({\n    selector: 'p-treeTableSortIcon',\n    template: `\n        <i class=\"ui-sortable-column-icon pi pi-fw\" [ngClass]=\"{'pi-sort-amount-up-alt': sortOrder === 1, 'pi-sort-amount-down': sortOrder === -1, 'pi-sort-alt': sortOrder === 0}\"></i>\n    `\n})\nexport class TTSortIcon implements OnInit, OnDestroy {\n\n    @Input() field: string;\n\n    @Input() ariaLabelDesc: string;\n\n    @Input() ariaLabelAsc: string;\n\n    subscription: Subscription;\n\n    sortOrder: number;\n\n    constructor(public tt: TreeTable) {\n        this.subscription = this.tt.tableService.sortSource$.subscribe(sortMeta => {\n            this.updateSortState();\n        });\n    }\n\n    ngOnInit() {\n        this.updateSortState();\n    }\n\n    onClick(event){\n        event.preventDefault();\n    }\n\n    updateSortState() {\n        if (this.tt.sortMode === 'single') {\n            this.sortOrder = this.tt.isSorted(this.field) ? this.tt.sortOrder : 0;\n        }\n        else if (this.tt.sortMode === 'multiple') {\n            let sortMeta = this.tt.getSortMeta(this.field);\n            this.sortOrder = sortMeta ? sortMeta.order: 0;\n        }\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n}\n\n@Directive({\n    selector: '[ttResizableColumn]'\n})\nexport class TTResizableColumn implements AfterViewInit, OnDestroy {\n\n    @Input() ttResizableColumnDisabled: boolean;\n\n    resizer: HTMLSpanElement;\n\n    resizerMouseDownListener: any;\n\n    documentMouseMoveListener: any;\n\n    documentMouseUpListener: any;\n\n    constructor(public tt: TreeTable, public el: ElementRef, public zone: NgZone) { }\n\n    ngAfterViewInit() {\n        if (this.isEnabled()) {\n            DomHandler.addClass(this.el.nativeElement, 'ui-resizable-column');\n            this.resizer = document.createElement('span');\n            this.resizer.className = 'ui-column-resizer ui-clickable';\n            this.el.nativeElement.appendChild(this.resizer);\n\n            this.zone.runOutsideAngular(() => {\n                this.resizerMouseDownListener = this.onMouseDown.bind(this);\n                this.resizer.addEventListener('mousedown', this.resizerMouseDownListener);\n            });\n        }\n    }\n\n    bindDocumentEvents() {\n        this.zone.runOutsideAngular(() => {\n            this.documentMouseMoveListener = this.onDocumentMouseMove.bind(this);\n            document.addEventListener('mousemove', this.documentMouseMoveListener);\n\n            this.documentMouseUpListener = this.onDocumentMouseUp.bind(this);\n            document.addEventListener('mouseup', this.documentMouseUpListener);\n        });\n    }\n\n    unbindDocumentEvents() {\n        if (this.documentMouseMoveListener) {\n            document.removeEventListener('mousemove', this.documentMouseMoveListener);\n            this.documentMouseMoveListener = null;\n        }\n\n        if (this.documentMouseUpListener) {\n            document.removeEventListener('mouseup', this.documentMouseUpListener);\n            this.documentMouseUpListener = null;\n        }\n    }\n\n    onMouseDown(event: Event) {\n        this.tt.onColumnResizeBegin(event);\n        this.bindDocumentEvents();\n    }\n\n    onDocumentMouseMove(event: Event) {\n        this.tt.onColumnResize(event);\n    }\n\n    onDocumentMouseUp(event: Event) {\n        this.tt.onColumnResizeEnd(event, this.el.nativeElement);\n        this.unbindDocumentEvents();\n    }\n\n    isEnabled() {\n        return this.ttResizableColumnDisabled !== true;\n    }\n\n    ngOnDestroy() {\n        if (this.resizerMouseDownListener) {\n            this.resizer.removeEventListener('mousedown', this.resizerMouseDownListener);\n        }\n\n        this.unbindDocumentEvents();\n    }\n}\n\n@Directive({\n    selector: '[ttReorderableColumn]'\n})\nexport class TTReorderableColumn implements AfterViewInit, OnDestroy {\n\n    @Input() ttReorderableColumnDisabled: boolean;\n\n    dragStartListener: any;\n\n    dragOverListener: any;\n\n    dragEnterListener: any;\n\n    dragLeaveListener: any;\n\n    mouseDownListener: any;\n\n    constructor(public tt: TreeTable, public el: ElementRef, public zone: NgZone) { }\n\n    ngAfterViewInit() {\n        if (this.isEnabled()) {\n            this.bindEvents();\n        }\n    }\n\n    bindEvents() {\n        this.zone.runOutsideAngular(() => {\n            this.mouseDownListener = this.onMouseDown.bind(this);\n            this.el.nativeElement.addEventListener('mousedown', this.mouseDownListener);\n\n            this.dragStartListener = this.onDragStart.bind(this);\n            this.el.nativeElement.addEventListener('dragstart', this.dragStartListener);\n\n            this.dragOverListener = this.onDragEnter.bind(this);\n            this.el.nativeElement.addEventListener('dragover', this.dragOverListener);\n\n            this.dragEnterListener = this.onDragEnter.bind(this);\n            this.el.nativeElement.addEventListener('dragenter', this.dragEnterListener);\n\n            this.dragLeaveListener = this.onDragLeave.bind(this);\n            this.el.nativeElement.addEventListener('dragleave', this.dragLeaveListener);\n        });\n    }\n\n    unbindEvents() {\n        if (this.mouseDownListener) {\n            document.removeEventListener('mousedown', this.mouseDownListener);\n            this.mouseDownListener = null;\n        }\n\n        if (this.dragOverListener) {\n            document.removeEventListener('dragover', this.dragOverListener);\n            this.dragOverListener = null;\n        }\n\n        if (this.dragEnterListener) {\n            document.removeEventListener('dragenter', this.dragEnterListener);\n            this.dragEnterListener = null;\n        }\n\n        if (this.dragEnterListener) {\n            document.removeEventListener('dragenter', this.dragEnterListener);\n            this.dragEnterListener = null;\n        }\n\n        if (this.dragLeaveListener) {\n            document.removeEventListener('dragleave', this.dragLeaveListener);\n            this.dragLeaveListener = null;\n        }\n    }\n\n    onMouseDown(event) {\n        if (event.target.nodeName === 'INPUT' || DomHandler.hasClass(event.target, 'ui-column-resizer'))\n            this.el.nativeElement.draggable = false;\n        else\n            this.el.nativeElement.draggable = true;\n    }\n\n    onDragStart(event) {\n        this.tt.onColumnDragStart(event, this.el.nativeElement);\n    }\n\n    onDragOver(event) {\n        event.preventDefault();\n    }\n\n    onDragEnter(event) {\n        this.tt.onColumnDragEnter(event, this.el.nativeElement);\n    }\n\n    onDragLeave(event) {\n        this.tt.onColumnDragLeave(event);\n    }\n\n    @HostListener('drop', ['$event'])\n    onDrop(event) {\n        if (this.isEnabled()) {\n            this.tt.onColumnDrop(event, this.el.nativeElement);\n        }\n    }\n\n    isEnabled() {\n        return this.ttReorderableColumnDisabled !== true;\n    }\n\n    ngOnDestroy() {\n        this.unbindEvents();\n    }\n\n}\n\n@Directive({\n    selector: '[ttSelectableRow]',\n    host: {\n        '[class.ui-state-highlight]': 'selected'\n    }\n})\nexport class TTSelectableRow implements OnInit, OnDestroy {\n\n    @Input(\"ttSelectableRow\") rowNode: any;\n\n    @Input() ttSelectableRowDisabled: boolean;\n\n    selected: boolean;\n\n    subscription: Subscription;\n\n    constructor(public tt: TreeTable, public tableService: TreeTableService) {\n        if (this.isEnabled()) {\n            this.subscription = this.tt.tableService.selectionSource$.subscribe(() => {\n                this.selected = this.tt.isSelected(this.rowNode.node);\n            });\n        }\n    }\n\n    ngOnInit() {\n        if (this.isEnabled()) {\n            this.selected = this.tt.isSelected(this.rowNode.node);\n        }\n    }\n\n    @HostListener('click', ['$event'])\n    onClick(event: Event) {\n        if (this.isEnabled()) {\n            this.tt.handleRowClick({\n                originalEvent: event,\n                rowNode: this.rowNode\n            });\n        }\n    }\n\n    @HostListener('keydown', ['$event'])\n    onEnterKey(event: KeyboardEvent) {\n        if (event.which === 13) {\n            this.onClick(event);\n        }\n    }\n\n    @HostListener('touchend', ['$event'])\n    onTouchEnd(event: Event) {\n        if (this.isEnabled()) {\n            this.tt.handleRowTouchEnd(event);\n        }\n    }\n\n    isEnabled() {\n        return this.ttSelectableRowDisabled !== true;\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n\n}\n\n@Directive({\n    selector: '[ttSelectableRowDblClick]',\n    host: {\n        '[class.ui-state-highlight]': 'selected'\n    }\n})\nexport class TTSelectableRowDblClick implements OnInit, OnDestroy {\n\n    @Input(\"ttSelectableRowDblClick\") rowNode: any;\n\n    @Input() ttSelectableRowDisabled: boolean;\n\n    selected: boolean;\n\n    subscription: Subscription;\n\n    constructor(public tt: TreeTable, public tableService: TreeTableService) {\n        if (this.isEnabled()) {\n            this.subscription = this.tt.tableService.selectionSource$.subscribe(() => {\n                this.selected = this.tt.isSelected(this.rowNode.node);\n            });\n        }\n    }\n\n    ngOnInit() {\n        if (this.isEnabled()) {\n            this.selected = this.tt.isSelected(this.rowNode.node);\n        }\n    }\n\n    @HostListener('dblclick', ['$event'])\n    onClick(event: Event) {\n        if (this.isEnabled()) {\n            this.tt.handleRowClick({\n                originalEvent: event,\n                rowNode: this.rowNode\n            });\n        }\n    }\n\n    isEnabled() {\n        return this.ttSelectableRowDisabled !== true;\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n\n}\n\n@Directive({\n    selector: '[ttContextMenuRow]',\n    host: {\n        '[class.ui-contextmenu-selected]': 'selected',\n        '[attr.tabindex]': 'isEnabled() ? 0 : undefined'\n    }\n})\nexport class TTContextMenuRow {\n\n    @Input(\"ttContextMenuRow\") rowNode: any;\n\n    @Input() ttContextMenuRowDisabled: boolean;\n\n    selected: boolean;\n\n    subscription: Subscription;\n\n    constructor(public tt: TreeTable, public tableService: TreeTableService, private el: ElementRef) {\n        if (this.isEnabled()) {\n            this.subscription = this.tt.tableService.contextMenuSource$.subscribe((node) => {\n                this.selected = this.tt.equals(this.rowNode.node, node);\n            });\n        }\n    }\n\n    @HostListener('contextmenu', ['$event'])\n    onContextMenu(event: Event) {\n        if (this.isEnabled()) {\n            this.tt.handleRowRightClick({\n                originalEvent: event,\n                rowNode: this.rowNode\n            });\n\n            this.el.nativeElement.focus();\n\n            event.preventDefault();\n        }\n    }\n\n    isEnabled() {\n        return this.ttContextMenuRowDisabled !== true;\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n\n}\n\n@Component({\n    selector: 'p-treeTableCheckbox',\n    template: `\n        <div class=\"ui-chkbox ui-treetable-chkbox ui-widget\" (click)=\"onClick($event)\">\n            <div class=\"ui-helper-hidden-accessible\">\n                <input type=\"checkbox\" [checked]=\"checked\" (focus)=\"onFocus()\" (blur)=\"onBlur()\">\n            </div>\n            <div #box [ngClass]=\"{'ui-chkbox-box ui-widget ui-state-default':true,\n                'ui-state-active':checked, 'ui-state-disabled':disabled}\"  role=\"checkbox\" [attr.aria-checked]=\"checked\">\n                <span class=\"ui-chkbox-icon ui-clickable pi\" [ngClass]=\"{'pi-check':checked, 'pi-minus': rowNode.node.partialSelected}\"></span>\n            </div>\n        </div>\n    `\n})\nexport class TTCheckbox  {\n\n    @Input() disabled: boolean;\n\n    @Input(\"value\") rowNode: any;\n\n    @ViewChild('box') boxViewChild: ElementRef;\n\n    checked: boolean;\n\n    subscription: Subscription;\n\n    constructor(public tt: TreeTable, public tableService: TreeTableService) {\n        this.subscription = this.tt.tableService.selectionSource$.subscribe(() => {\n            this.checked = this.tt.isSelected(this.rowNode.node);\n        });\n    }\n\n    ngOnInit() {\n        this.checked = this.tt.isSelected(this.rowNode.node);\n    }\n\n    onClick(event: Event) {\n        if (!this.disabled) {\n            this.tt.toggleNodeWithCheckbox({\n                originalEvent: event,\n                rowNode: this.rowNode\n            });\n        }\n        DomHandler.clearSelection();\n    }\n\n    onFocus() {\n        DomHandler.addClass(this.boxViewChild.nativeElement, 'ui-state-focus');\n    }\n\n    onBlur() {\n        DomHandler.removeClass(this.boxViewChild.nativeElement, 'ui-state-focus');\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n\n}\n\n@Component({\n    selector: 'p-treeTableHeaderCheckbox',\n    template: `\n        <div class=\"ui-chkbox ui-treetable-header-chkbox ui-widget\" (click)=\"onClick($event, cb.checked)\">\n            <div class=\"ui-helper-hidden-accessible\">\n                <input #cb type=\"checkbox\" [checked]=\"checked\" (focus)=\"onFocus()\" (blur)=\"onBlur()\" [disabled]=\"!tt.value||tt.value.length === 0\">\n            </div>\n            <div #box [ngClass]=\"{'ui-chkbox-box ui-widget ui-state-default':true,\n                'ui-state-active':checked, 'ui-state-disabled': (!tt.value || tt.value.length === 0)}\"  role=\"checkbox\" [attr.aria-checked]=\"checked\">\n                <span class=\"ui-chkbox-icon ui-clickable\" [ngClass]=\"{'pi pi-check':checked}\"></span>\n            </div>\n        </div>\n    `\n})\nexport class TTHeaderCheckbox  {\n\n    @ViewChild('box') boxViewChild: ElementRef;\n\n    checked: boolean;\n\n    disabled: boolean;\n\n    selectionChangeSubscription: Subscription;\n\n    valueChangeSubscription: Subscription;\n\n    constructor(public tt: TreeTable, public tableService: TreeTableService) {\n        this.valueChangeSubscription = this.tt.tableService.uiUpdateSource$.subscribe(() => {\n            this.checked = this.updateCheckedState();\n        });\n\n        this.selectionChangeSubscription = this.tt.tableService.selectionSource$.subscribe(() => {\n            this.checked = this.updateCheckedState();\n        });\n    }\n\n    ngOnInit() {\n        this.checked = this.updateCheckedState();\n    }\n\n    onClick(event: Event, checked) {\n        if (this.tt.value && this.tt.value.length > 0) {\n            this.tt.toggleNodesWithCheckbox(event, !checked);\n        }\n\n        DomHandler.clearSelection();\n    }\n\n    onFocus() {\n        DomHandler.addClass(this.boxViewChild.nativeElement, 'ui-state-focus');\n    }\n\n    onBlur() {\n        DomHandler.removeClass(this.boxViewChild.nativeElement, 'ui-state-focus');\n    }\n\n    ngOnDestroy() {\n        if (this.selectionChangeSubscription) {\n            this.selectionChangeSubscription.unsubscribe();\n        }\n\n        if (this.valueChangeSubscription) {\n            this.valueChangeSubscription.unsubscribe();\n        }\n    }\n\n    updateCheckedState() {\n        let checked: boolean;\n        const data = this.tt.filteredNodes||this.tt.value;\n\n        if (data) {\n            for (let node of data) {\n                if (this.tt.isSelected(node)) {\n                    checked = true;\n                }\n                else  {\n                    checked = false;\n                    break;\n                }\n            }\n        }\n        else {\n            checked = false;\n        }\n\n        return checked;\n    }\n\n}\n\n@Directive({\n    selector: '[ttEditableColumn]'\n})\nexport class TTEditableColumn implements AfterViewInit {\n\n    @Input(\"ttEditableColumn\") data: any;\n\n    @Input(\"ttEditableColumnField\") field: any;\n\n    @Input() ttEditableColumnDisabled: boolean;\n\n    constructor(public tt: TreeTable, public el: ElementRef, public zone: NgZone) {}\n\n    ngAfterViewInit() {\n        if (this.isEnabled()) {\n            DomHandler.addClass(this.el.nativeElement, 'ui-editable-column');\n        }\n    }\n\n    @HostListener('click', ['$event'])\n    onClick(event: MouseEvent) {\n        if (this.isEnabled()) {\n            this.tt.editingCellClick = true;\n\n            if (this.tt.editingCell) {\n                if (this.tt.editingCell !== this.el.nativeElement) {\n                    if (!this.tt.isEditingCellValid()) {\n                        return;\n                    }\n\n                    DomHandler.removeClass(this.tt.editingCell, 'ui-editing-cell');\n                    this.openCell();\n                }\n            }\n            else {\n                this.openCell();\n            }\n        }\n    }\n\n    openCell() {\n        this.tt.updateEditingCell(this.el.nativeElement, this.data, this.field);\n        DomHandler.addClass(this.el.nativeElement, 'ui-editing-cell');\n        this.tt.onEditInit.emit({ field: this.field, data: this.data});\n        this.tt.editingCellClick = true;\n        this.zone.runOutsideAngular(() => {\n            setTimeout(() => {\n                let focusable = DomHandler.findSingle(this.el.nativeElement, 'input, textarea');\n                if (focusable) {\n                    focusable.focus();\n                }\n            }, 50);\n        });\n    }\n\n    closeEditingCell() {\n        DomHandler.removeClass(this.tt.editingCell, 'ui-editing-cell');\n        this.tt.editingCell = null;\n        this.tt.unbindDocumentEditListener();\n    }\n\n    @HostListener('keydown', ['$event'])\n    onKeyDown(event: KeyboardEvent) {\n        if (this.isEnabled()) {\n            //enter\n            if (event.keyCode == 13) {\n                if (this.tt.isEditingCellValid()) {\n                    DomHandler.removeClass(this.tt.editingCell, 'ui-editing-cell');\n                    this.closeEditingCell();\n                    this.tt.onEditComplete.emit({ field: this.field, data: this.data });\n                }\n\n                event.preventDefault();\n            }\n\n            //escape\n            else if (event.keyCode == 27) {\n                if (this.tt.isEditingCellValid()) {\n                    DomHandler.removeClass(this.tt.editingCell, 'ui-editing-cell');\n                    this.closeEditingCell();\n                    this.tt.onEditCancel.emit({ field: this.field, data: this.data });\n                }\n\n                event.preventDefault();\n            }\n\n            //tab\n            else if (event.keyCode == 9) {\n                this.tt.onEditComplete.emit({ field: this.field, data: this.data });\n\n                if (event.shiftKey)\n                    this.moveToPreviousCell(event);\n                else\n                    this.moveToNextCell(event);\n            }\n        }\n    }\n\n    findCell(element) {\n        if (element) {\n            let cell = element;\n            while (cell && !DomHandler.hasClass(cell, 'ui-editing-cell')) {\n                cell = cell.parentElement;\n            }\n\n            return cell;\n        }\n        else {\n            return null;\n        }\n    }\n\n    moveToPreviousCell(event: KeyboardEvent) {\n        let currentCell = this.findCell(event.target);\n        let row = currentCell.parentElement;\n        let targetCell = this.findPreviousEditableColumn(currentCell);\n\n        if (targetCell) {\n            DomHandler.invokeElementMethod(targetCell, 'click');\n            event.preventDefault();\n        }\n    }\n\n    moveToNextCell(event: KeyboardEvent) {\n        let currentCell = this.findCell(event.target);\n        let row = currentCell.parentElement;\n        let targetCell = this.findNextEditableColumn(currentCell);\n\n        if (targetCell) {\n            DomHandler.invokeElementMethod(targetCell, 'click');\n            event.preventDefault();\n        }\n    }\n\n    findPreviousEditableColumn(cell: Element) {\n        let prevCell = cell.previousElementSibling;\n\n        if (!prevCell) {\n            let previousRow = cell.parentElement ? cell.parentElement.previousElementSibling : null;\n            if (previousRow) {\n                prevCell = previousRow.lastElementChild;\n            }\n        }\n\n        if (prevCell) {\n            if (DomHandler.hasClass(prevCell, 'ui-editable-column'))\n                return prevCell;\n            else\n                return this.findPreviousEditableColumn(prevCell);\n        }\n        else {\n            return null;\n        }\n    }\n\n    findNextEditableColumn(cell: Element) {\n        let nextCell = cell.nextElementSibling;\n\n        if (!nextCell) {\n            let nextRow = cell.parentElement ? cell.parentElement.nextElementSibling : null;\n            if (nextRow) {\n                nextCell = nextRow.firstElementChild;\n            }\n        }\n\n        if (nextCell) {\n            if (DomHandler.hasClass(nextCell, 'ui-editable-column'))\n                return nextCell;\n            else\n                return this.findNextEditableColumn(nextCell);\n        }\n        else {\n            return null;\n        }\n    }\n\n    isEnabled() {\n        return this.ttEditableColumnDisabled !== true;\n    }\n\n}\n\n@Component({\n    selector: 'p-treeTableCellEditor',\n    template: `\n        <ng-container *ngIf=\"tt.editingCell === editableColumn.el.nativeElement\">\n            <ng-container *ngTemplateOutlet=\"inputTemplate\"></ng-container>\n        </ng-container>\n        <ng-container *ngIf=\"!tt.editingCell || tt.editingCell !== editableColumn.el.nativeElement\">\n            <ng-container *ngTemplateOutlet=\"outputTemplate\"></ng-container>\n        </ng-container>\n    `\n})\nexport class TreeTableCellEditor implements AfterContentInit {\n\n    @ContentChildren(PrimeTemplate) templates: QueryList<PrimeTemplate>;\n\n    inputTemplate: TemplateRef<any>;\n\n    outputTemplate: TemplateRef<any>;\n\n    constructor(public tt: TreeTable, public editableColumn: TTEditableColumn) { }\n\n    ngAfterContentInit() {\n        this.templates.forEach((item) => {\n            switch (item.getType()) {\n                case 'input':\n                    this.inputTemplate = item.template;\n                    break;\n\n                case 'output':\n                    this.outputTemplate = item.template;\n                    break;\n            }\n        });\n    }\n}\n\n@Directive({\n    selector: '[ttRow]',\n    host: {\n        '[attr.tabindex]': '\"0\"'\n    }\n})\nexport class TTRow {\n\n    @Input('ttRow') rowNode: any;\n\n    constructor(public tt: TreeTable, public el: ElementRef, public zone: NgZone) {}\n\n    @HostListener('keydown', ['$event'])\n    onKeyDown(event: KeyboardEvent) {\n        switch (event.which) {\n            //down arrow\n            case 40:\n                let nextRow = this.el.nativeElement.nextElementSibling;\n                if (nextRow) {\n                    nextRow.focus();\n                }\n\n                event.preventDefault();\n            break;\n\n            //down arrow\n            case 38:\n                let prevRow = this.el.nativeElement.previousElementSibling;\n                if (prevRow) {\n                    prevRow.focus();\n                }\n\n                event.preventDefault();\n            break;\n\n            //left arrow\n            case 37:\n                if (this.rowNode.node.expanded) {\n                    this.tt.toggleRowIndex = DomHandler.index(this.el.nativeElement);\n                    this.rowNode.node.expanded = false;\n\n                    this.tt.onNodeCollapse.emit({\n                        originalEvent: event,\n                        node: this.rowNode.node\n                    });\n\n                    this.tt.updateSerializedValue();\n                    this.tt.tableService.onUIUpdate(this.tt.value);\n                    this.restoreFocus();\n                }\n            break;\n\n            //right arrow\n            case 39:\n                if (!this.rowNode.node.expanded) {\n                    this.tt.toggleRowIndex = DomHandler.index(this.el.nativeElement);\n                    this.rowNode.node.expanded = true;\n\n                    this.tt.onNodeExpand.emit({\n                        originalEvent: event,\n                        node: this.rowNode.node\n                    });\n\n                    this.tt.updateSerializedValue();\n                    this.tt.tableService.onUIUpdate(this.tt.value);\n                    this.restoreFocus();\n                }\n            break;\n        }\n    }\n\n    restoreFocus() {\n        this.zone.runOutsideAngular(() => {\n            setTimeout(() => {\n                let row = DomHandler.findSingle(this.tt.containerViewChild.nativeElement, '.ui-treetable-tbody').children[this.tt.toggleRowIndex];\n                if (row) {\n                    row.focus();\n                }\n            }, 25);\n        });\n    }\n}\n\n@Component({\n    selector: 'p-treeTableToggler',\n    template: `\n        <a class=\"ui-treetable-toggler ui-unselectable-text\" (click)=\"onClick($event)\"\n            [style.visibility]=\"rowNode.node.leaf === false || (rowNode.node.children && rowNode.node.children.length) ? 'visible' : 'hidden'\" [style.marginLeft]=\"rowNode.level * 16 + 'px'\">\n            <i [ngClass]=\"rowNode.node.expanded ? 'pi pi-fw pi-chevron-down' : 'pi pi-fw pi-chevron-right'\"></i>\n        </a>\n    `\n})\nexport class TreeTableToggler {\n\n    @Input() rowNode: any;\n\n    constructor(public tt: TreeTable) {}\n\n    onClick(event: Event) {\n        this.rowNode.node.expanded = !this.rowNode.node.expanded;\n\n        if (this.rowNode.node.expanded) {\n            this.tt.onNodeExpand.emit({\n                originalEvent: event,\n                node: this.rowNode.node\n            });\n        }\n        else {\n            this.tt.onNodeCollapse.emit({\n                originalEvent: event,\n                node: this.rowNode.node\n            });\n        }\n\n        this.tt.updateSerializedValue();\n        this.tt.tableService.onUIUpdate(this.tt.value);\n\n        event.preventDefault();\n    }\n}\n\n@NgModule({\n    imports: [CommonModule,PaginatorModule,ScrollingModule],\n    exports: [TreeTable,SharedModule,TreeTableToggler,TTSortableColumn,TTSortIcon,TTResizableColumn,TTRow,TTReorderableColumn,TTSelectableRow,TTSelectableRowDblClick,TTContextMenuRow,TTCheckbox,TTHeaderCheckbox,TTEditableColumn,TreeTableCellEditor,ScrollingModule],\n    declarations: [TreeTable,TreeTableToggler,TTScrollableView,TTBody,TTSortableColumn,TTSortIcon,TTResizableColumn,TTRow,TTReorderableColumn,TTSelectableRow,TTSelectableRowDblClick,TTContextMenuRow,TTCheckbox,TTHeaderCheckbox,TTEditableColumn,TreeTableCellEditor]\n})\nexport class TreeTableModule { }\n"]}