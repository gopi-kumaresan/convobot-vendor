!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("@angular/core"),require("@angular/common"),require("@angular/forms")):"function"==typeof define&&define.amd?define("primeng-lts/radiobutton",["exports","@angular/core","@angular/common","@angular/forms"],e):e(((t=t||self)["primeng-lts"]=t["primeng-lts"]||{},t["primeng-lts"].radiobutton={}),t.ng.core,t.ng.common,t.ng.forms)}(this,(function(t,e,o,n){"use strict";var i=this&&this.__decorate||function(t,e,o,n){var i,r=arguments.length,a=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,o):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,o,n);else for(var s=t.length-1;s>=0;s--)(i=t[s])&&(a=(r<3?i(a):r>3?i(e,o,a):i(e,o))||a);return r>3&&a&&Object.defineProperty(e,o,a),a},r={provide:n.NG_VALUE_ACCESSOR,useExisting:e.forwardRef((function(){return s})),multi:!0},a=function(){function t(){this.accessors=[]}return t.prototype.add=function(t,e){this.accessors.push([t,e])},t.prototype.remove=function(t){this.accessors=this.accessors.filter((function(e){return e[1]!==t}))},t.prototype.select=function(t){var e=this;this.accessors.forEach((function(o){e.isSameGroup(o,t)&&o[1]!==t&&o[1].writeValue(t.value)}))},t.prototype.isSameGroup=function(t,e){return!!t[0].control&&(t[0].control.root===e.control.control.root&&t[1].name===e.name)},t.ɵprov=e.ɵɵdefineInjectable({factory:function(){return new t},token:t,providedIn:"root"}),t=i([e.Injectable({providedIn:"root"})],t)}(),s=function(){function t(t,o,n){this.cd=t,this.injector=o,this.registry=n,this.onClick=new e.EventEmitter,this.onFocus=new e.EventEmitter,this.onBlur=new e.EventEmitter,this.onModelChange=function(){},this.onModelTouched=function(){}}return t.prototype.ngOnInit=function(){this.control=this.injector.get(n.NgControl),this.checkName(),this.registry.add(this.control,this)},t.prototype.ngOnDestroy=function(){this.registry.remove(this)},t.prototype.handleClick=function(t,e,o){t.preventDefault(),this.disabled||(this.select(t),o&&e.focus())},t.prototype.select=function(t){this.disabled||(this.inputViewChild.nativeElement.checked=!0,this.checked=!0,this.onModelChange(this.value),this.registry.select(this),this.onClick.emit(t))},t.prototype.writeValue=function(t){this.checked=t==this.value,this.inputViewChild&&this.inputViewChild.nativeElement&&(this.inputViewChild.nativeElement.checked=this.checked),this.cd.markForCheck()},t.prototype.registerOnChange=function(t){this.onModelChange=t},t.prototype.registerOnTouched=function(t){this.onModelTouched=t},t.prototype.setDisabledState=function(t){this.disabled=t},t.prototype.onInputFocus=function(t){this.focused=!0,this.onFocus.emit(t)},t.prototype.onInputBlur=function(t){this.focused=!1,this.onModelTouched(),this.onBlur.emit(t)},t.prototype.onChange=function(t){this.select(t)},t.prototype.focus=function(){this.inputViewChild.nativeElement.focus()},t.prototype.checkName=function(){this.name&&this.formControlName&&this.name!==this.formControlName&&this.throwNameError(),!this.name&&this.formControlName&&(this.name=this.formControlName)},t.prototype.throwNameError=function(){throw new Error('\n          If you define both a name and a formControlName attribute on your radio button, their values\n          must match. Ex: <p-radioButton formControlName="food" name="food"></p-radioButton>\n        ')},t.ctorParameters=function(){return[{type:e.ChangeDetectorRef},{type:e.Injector},{type:a}]},i([e.Input()],t.prototype,"value",void 0),i([e.Input()],t.prototype,"formControlName",void 0),i([e.Input()],t.prototype,"name",void 0),i([e.Input()],t.prototype,"disabled",void 0),i([e.Input()],t.prototype,"label",void 0),i([e.Input()],t.prototype,"tabindex",void 0),i([e.Input()],t.prototype,"inputId",void 0),i([e.Input()],t.prototype,"ariaLabelledBy",void 0),i([e.Input()],t.prototype,"ariaLabel",void 0),i([e.Input()],t.prototype,"style",void 0),i([e.Input()],t.prototype,"styleClass",void 0),i([e.Input()],t.prototype,"labelStyleClass",void 0),i([e.Output()],t.prototype,"onClick",void 0),i([e.Output()],t.prototype,"onFocus",void 0),i([e.Output()],t.prototype,"onBlur",void 0),i([e.ViewChild("rb")],t.prototype,"inputViewChild",void 0),t=i([e.Component({selector:"p-radioButton",template:'\n        <div [ngStyle]="style" [ngClass]="\'ui-radiobutton ui-widget\'" [class]="styleClass">\n            <div class="ui-helper-hidden-accessible">\n                <input #rb type="radio" [attr.id]="inputId" [attr.name]="name" [attr.value]="value" [attr.tabindex]="tabindex" [attr.aria-checked]="checked" [attr.aria-label]="ariaLabel"\n                [attr.aria-labelledby]="ariaLabelledBy" [checked]="checked" (change)="onChange($event)" (focus)="onInputFocus($event)" (blur)="onInputBlur($event)" [disabled]="disabled">\n            </div>\n            <div (click)="handleClick($event, rb, true)" [attr.aria-checked]="checked"\n                [ngClass]="{\'ui-radiobutton-box ui-widget ui-state-default\':true,\n                \'ui-state-active\':rb.checked,\'ui-state-disabled\':disabled,\'ui-state-focus\':focused}">\n                <span class="ui-radiobutton-icon ui-clickable" [ngClass]="{\'pi pi-circle-on\':rb.checked}"></span>\n            </div>\n        </div>\n        <label (click)="select($event)" [class]="labelStyleClass"\n            [ngClass]="{\'ui-radiobutton-label\':true, \'ui-label-active\':rb.checked, \'ui-label-disabled\':disabled, \'ui-label-focus\':focused}"\n            *ngIf="label" [attr.for]="inputId">{{label}}</label>\n    ',providers:[r],changeDetection:e.ChangeDetectionStrategy.Default})],t)}(),u=function(){function t(){}return t=i([e.NgModule({imports:[o.CommonModule],exports:[s],declarations:[s]})],t)}();t.RADIO_VALUE_ACCESSOR=r,t.RadioButton=s,t.RadioButtonModule=u,t.RadioControlRegistry=a,Object.defineProperty(t,"__esModule",{value:!0})}));
//# sourceMappingURL=primeng-lts-radiobutton.umd.min.js.map