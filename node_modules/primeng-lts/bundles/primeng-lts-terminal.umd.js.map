{"version":3,"file":"primeng-lts-terminal.umd.js","sources":["primeng-lts/terminal/terminalservice.ts","primeng-lts/terminal/terminal.ts"],"names":["Subject","Injectable","DomHandler","ElementRef","__decorate","Input","Component","ChangeDetectionStrategy","NgModule","CommonModule","FormsModule"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n@Injectable()\nexport class TerminalService {\n    \n    private commandSource = new Subject<string>();\n    private responseSource = new Subject<string>();\n    \n    commandHandler = this.commandSource.asObservable();\n    responseHandler = this.responseSource.asObservable();\n    \n    sendCommand(command: string) {\n        if (command) {\n            this.commandSource.next(command);\n        }\n    }\n    \n    sendResponse(response: string) {\n        if (response) {\n            this.responseSource.next(response);\n        }\n    }\n}","import {NgModule,Component,AfterViewInit,AfterViewChecked,OnDestroy,Input,ElementRef,ChangeDetectionStrategy} from '@angular/core';\nimport {FormsModule} from '@angular/forms';\nimport {CommonModule} from '@angular/common';\nimport {DomHandler} from 'primeng-lts/dom';\nimport {TerminalService} from './terminalservice';\nimport {Subscription}   from 'rxjs';\n\n@Component({\n    selector: 'p-terminal',\n    template: `\n        <div [ngClass]=\"'ui-terminal ui-widget ui-widget-content ui-corner-all'\" [ngStyle]=\"style\" [class]=\"styleClass\" (click)=\"focus(in)\">\n            <div *ngIf=\"welcomeMessage\">{{welcomeMessage}}</div>\n            <div class=\"ui-terminal-content\">\n                <div *ngFor=\"let command of commands\">\n                    <span>{{prompt}}</span>\n                    <span class=\"ui-terminal-command\">{{command.text}}</span>\n                    <div>{{command.response}}</div>\n                </div>\n            </div>\n            <div>\n                <span class=\"ui-terminal-content-prompt\">{{prompt}}</span>\n                <input #in type=\"text\" [(ngModel)]=\"command\" class=\"ui-terminal-input\" autocomplete=\"off\" (keydown)=\"handleCommand($event)\" autofocus>\n            </div>\n        </div>\n    `,\n    changeDetection: ChangeDetectionStrategy.Default\n})\nexport class Terminal implements AfterViewInit,AfterViewChecked,OnDestroy {\n\n    @Input() welcomeMessage: string;\n\n    @Input() prompt: string;\n        \n    @Input() style: any;\n        \n    @Input() styleClass: string;\n            \n    commands: any[] = [];\n    \n    command: string;\n    \n    container: Element;\n    \n    commandProcessed: boolean;\n    \n    subscription: Subscription;\n    \n    constructor(public el: ElementRef, public terminalService: TerminalService) {\n        this.subscription = terminalService.responseHandler.subscribe(response => {\n            this.commands[this.commands.length - 1].response = response;\n            this.commandProcessed = true;\n        });\n    }\n    \n    ngAfterViewInit() {\n        this.container = DomHandler.find(this.el.nativeElement, '.ui-terminal')[0];\n    }\n    \n    ngAfterViewChecked() {\n        if (this.commandProcessed) {\n            this.container.scrollTop = this.container.scrollHeight;\n            this.commandProcessed = false;\n        }\n    }\n                \n    @Input()\n    set response(value: string) {\n        if (value) {\n            this.commands[this.commands.length - 1].response = value;\n            this.commandProcessed = true;\n        }\n    }\n    \n    handleCommand(event: KeyboardEvent) {\n        if (event.keyCode == 13) {\n            this.commands.push({text: this.command});\n            this.terminalService.sendCommand(this.command);\n            this.command = '';\n        }\n    }\n    \n    focus(element: HTMLElement) {\n        element.focus();\n    }\n    \n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n    \n}\n\n@NgModule({\n    imports: [CommonModule,FormsModule],\n    exports: [Terminal],\n    declarations: [Terminal]\n})\nexport class TerminalModule { }"]}