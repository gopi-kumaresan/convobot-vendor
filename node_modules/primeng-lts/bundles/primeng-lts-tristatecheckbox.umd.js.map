{"version":3,"file":"primeng-lts-tristatecheckbox.umd.js","sources":["primeng-lts/tristatecheckbox/tristatecheckbox.ts"],"names":["NG_VALUE_ACCESSOR","forwardRef","EventEmitter","ChangeDetectorRef","Input","Output","Component","ChangeDetectionStrategy","NgModule","CommonModule"],"mappings":"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","sourcesContent":["import {NgModule,Component,Input,Output,EventEmitter,forwardRef,ChangeDetectorRef,ChangeDetectionStrategy} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\n\nexport const TRISTATECHECKBOX_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => TriStateCheckbox),\n  multi: true\n};\n\n@Component({\n    selector: 'p-triStateCheckbox',\n    template: `\n        <div [ngStyle]=\"style\" [ngClass]=\"{'ui-chkbox ui-tristatechkbox ui-widget': true,'ui-chkbox-readonly': readonly}\" [class]=\"styleClass\">\n            <div class=\"ui-helper-hidden-accessible\">\n                <input #input type=\"text\" [attr.id]=\"inputId\" [name]=\"name\" [attr.tabindex]=\"tabindex\" [readonly]=\"readonly\" [disabled]=\"disabled\" (keyup)=\"onKeyup($event)\" (keydown)=\"onKeydown($event)\" (focus)=\"onFocus()\" (blur)=\"onBlur()\" [attr.aria-labelledby]=\"ariaLabelledBy\">\n            </div>\n            <div class=\"ui-chkbox-box ui-widget ui-corner-all ui-state-default\" (click)=\"onClick($event,input)\"  role=\"checkbox\" [attr.aria-checked]=\"value === true\"\n                [ngClass]=\"{'ui-state-active':value!=null,'ui-state-disabled':disabled,'ui-state-focus':focus}\">\n                <span class=\"ui-chkbox-icon pi ui-clickable\" [ngClass]=\"{'pi-check':value==true,'pi-times':value==false}\"></span>\n            </div>\n        </div>\n        <label class=\"ui-chkbox-label\" (click)=\"onClick($event,input)\"\n               [ngClass]=\"{'ui-label-active':value!=null, 'ui-label-disabled':disabled, 'ui-label-focus':focus}\"\n               *ngIf=\"label\" [attr.for]=\"inputId\">{{label}}</label>\n    `,\n    providers: [TRISTATECHECKBOX_VALUE_ACCESSOR],\n    changeDetection: ChangeDetectionStrategy.Default\n})\nexport class TriStateCheckbox implements ControlValueAccessor  {\n\n    constructor(private cd: ChangeDetectorRef) {}\n\n    @Input() disabled: boolean;\n\n    @Input() name: string;\n\n    @Input() ariaLabelledBy: string;\n\n    @Input() tabindex: number;\n\n    @Input() inputId: string;\n\n    @Input() style: any;\n\n    @Input() styleClass: string;\n\n    @Input() label: string;\n\n    @Input() readonly: boolean;\n\n    @Output() onChange: EventEmitter<any> = new EventEmitter();\n\n    focus: boolean;\n\n    value: any;\n\n    onModelChange: Function = () => {};\n\n    onModelTouched: Function = () => {};\n\n    onClick(event: Event, input: HTMLInputElement) {\n        if (!this.disabled && !this.readonly) {\n            this.toggle(event);\n            this.focus = true;\n            input.focus();\n        }\n    }\n\n    onKeydown(event: KeyboardEvent) {\n        if (event.keyCode == 32) {\n            event.preventDefault();\n        }\n    }\n\n    onKeyup(event: KeyboardEvent) {\n        if (event.keyCode == 32 && !this.readonly) {\n            this.toggle(event);\n            event.preventDefault();\n        }\n    }\n\n    toggle(event: Event) {\n        if (this.value == null || this.value == undefined)\n            this.value = true;\n        else if (this.value == true)\n            this.value = false;\n        else if (this.value == false)\n            this.value = null;\n\n        this.onModelChange(this.value);\n        this.onChange.emit({\n            originalEvent: event,\n            value: this.value\n        })\n    }\n\n    onFocus() {\n        this.focus = true;\n    }\n\n    onBlur() {\n        this.focus = false;\n        this.onModelTouched();\n    }\n\n    registerOnChange(fn: Function): void {\n        this.onModelChange = fn;\n    }\n\n    registerOnTouched(fn: Function): void {\n        this.onModelTouched = fn;\n    }\n\n    writeValue(value: any) : void {\n        this.value = value;\n        this.cd.markForCheck();\n    }\n\n    setDisabledState(disabled: boolean): void {\n        this.disabled = disabled;\n    }\n}\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [TriStateCheckbox],\n    declarations: [TriStateCheckbox]\n})\nexport class TriStateCheckboxModule { }\n"]}