{"version":3,"sources":["ng://primeng-lts/paginator/paginator.ts"],"names":["Paginator","cd","this","pageLinkSize","onPageChange","EventEmitter","alwaysShow","dropdownScrollHeight","currentPageReportTemplate","totalRecords","rows","showFirstLastIcon","_first","prototype","ngOnInit","updatePaginatorState","ngOnChanges","simpleChange","updatePageLinks","updateFirst","updateRowsPerPageOptions","first","currentValue","rowsPerPageOptions","Object","defineProperty","val","rowsPerPageItems","_b","__values","_c","next","done","opt","value","unshift","label","push","String","isFirstPage","getPage","isLastPage","getPageCount","Math","ceil","calculatePageLinkBoundaries","numberOfPages","visiblePages","min","start","max","end","delta","pageLinks","boundaries","i","changePage","p","pc","state","page","pageCount","emit","_this","Promise","resolve","then","floor","changePageToFirst","event","preventDefault","changePageToPrev","changePageToNext","changePageToLast","onPageLinkClick","onRppChange","paginatorState","replace","ChangeDetectorRef","__decorate","Input","Output","Component","selector","template","changeDetection","ChangeDetectionStrategy","Default","PaginatorModule","NgModule","imports","CommonModule","DropdownModule","FormsModule","SharedModule","exports","declarations"],"mappings":"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","sourcesContent":["import {NgModule,Component,OnInit,Input,Output,ChangeDetectorRef,EventEmitter,TemplateRef,OnChanges,SimpleChanges,ChangeDetectionStrategy} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule} from '@angular/forms';\nimport {DropdownModule} from 'primeng-lts/dropdown';\nimport {SelectItem} from 'primeng-lts/api';\nimport {SharedModule} from 'primeng-lts/api';\n\n@Component({\n    selector: 'p-paginator',\n    template: `\n        <div [class]=\"styleClass\" [ngStyle]=\"style\" [ngClass]=\"'ui-paginator ui-widget ui-widget-header ui-unselectable-text ui-helper-clearfix'\"\n            *ngIf=\"alwaysShow ? true : (pageLinks && pageLinks.length > 1)\">\n            <div class=\"ui-paginator-left-content\" *ngIf=\"templateLeft\">\n                <ng-container *ngTemplateOutlet=\"templateLeft; context: {$implicit: paginatorState}\"></ng-container>\n            </div>\n            <span class=\"ui-paginator-current\" *ngIf=\"showCurrentPageReport\">{{currentPageReport}}</span>\n            <a [attr.tabindex]=\"isFirstPage() ? null : '0'\" class=\"ui-paginator-first ui-paginator-element ui-state-default ui-corner-all\"\n                    (click)=\"changePageToFirst($event)\" (keydown.enter)=\"changePageToFirst($event)\" [ngClass]=\"{'ui-state-disabled':isFirstPage()}\" [tabindex]=\"isFirstPage() ? -1 : null\">\n                <span class=\"ui-paginator-icon pi pi-step-backward\"></span>\n            </a>\n            <a tabindex=\"0\" *ngIf=\"showFirstLastIcon\" [attr.tabindex]=\"isFirstPage() ? null : '0'\" class=\"ui-paginator-prev ui-paginator-element ui-state-default ui-corner-all\"\n                    (click)=\"changePageToPrev($event)\" (keydown.enter)=\"changePageToPrev($event)\" [ngClass]=\"{'ui-state-disabled':isFirstPage()}\" [tabindex]=\"isFirstPage() ? -1 : null\">\n                <span class=\"ui-paginator-icon pi pi-caret-left\"></span>\n            </a>\n            <span class=\"ui-paginator-pages\">\n                <a tabindex=\"0\" *ngFor=\"let pageLink of pageLinks\" class=\"ui-paginator-page ui-paginator-element ui-state-default ui-corner-all\"\n                    (click)=\"onPageLinkClick($event, pageLink - 1)\" (keydown.enter)=\"onPageLinkClick($event, pageLink - 1)\" [ngClass]=\"{'ui-state-active': (pageLink-1 == getPage())}\">{{pageLink}}</a>\n            </span>\n            <a [attr.tabindex]=\"isLastPage() ? null : '0'\" *ngIf=\"showFirstLastIcon\" class=\"ui-paginator-next ui-paginator-element ui-state-default ui-corner-all\"\n                    (click)=\"changePageToNext($event)\" (keydown.enter)=\"changePageToNext($event)\" [ngClass]=\"{'ui-state-disabled':isLastPage()}\" [tabindex]=\"isLastPage() ? -1 : null\">\n                <span class=\"ui-paginator-icon pi pi-caret-right\"></span>\n            </a>\n            <a [attr.tabindex]=\"isLastPage() ? null : '0'\" class=\"ui-paginator-last ui-paginator-element ui-state-default ui-corner-all\"\n                    (click)=\"changePageToLast($event)\" (keydown.enter)=\"changePageToLast($event)\" [ngClass]=\"{'ui-state-disabled':isLastPage()}\" [tabindex]=\"isLastPage() ? -1 : null\">\n                <span class=\"ui-paginator-icon pi pi-step-forward\"></span>\n            </a>\n            <p-dropdown [options]=\"rowsPerPageItems\" [(ngModel)]=\"rows\" *ngIf=\"rowsPerPageOptions\" \n                (onChange)=\"onRppChange($event)\" [appendTo]=\"dropdownAppendTo\" [scrollHeight]=\"dropdownScrollHeight\">\n                <ng-container *ngIf=\"dropdownItemTemplate\">\n                    <ng-template let-item pTemplate=\"item\">\n                        <ng-container *ngTemplateOutlet=\"dropdownItemTemplate; context: {$implicit: item}\">\n                        </ng-container>\n                    </ng-template>\n                </ng-container>\n            </p-dropdown>\n            <div class=\"ui-paginator-right-content\" *ngIf=\"templateRight\">\n                <ng-container *ngTemplateOutlet=\"templateRight; context: {$implicit: paginatorState}\"></ng-container>\n            </div>\n        </div>\n    `,\n    changeDetection: ChangeDetectionStrategy.Default\n})\nexport class Paginator implements OnInit, OnChanges {\n\n    @Input() pageLinkSize: number = 5;\n\n    @Output() onPageChange: EventEmitter<any> = new EventEmitter();\n\n    @Input() style: any;\n\n    @Input() styleClass: string;\n\n    @Input() alwaysShow: boolean = true;\n    \n    @Input() templateLeft: TemplateRef<any>;\n    \n    @Input() templateRight: TemplateRef<any>;\n\n    @Input() dropdownAppendTo: any;\n\n    @Input() dropdownScrollHeight: string = '200px';\n\n    @Input() currentPageReportTemplate: string = '{currentPage} of {totalPages}';\n\n    @Input() showCurrentPageReport: boolean;\n\n    @Input() totalRecords: number = 0;\n\n    @Input() rows: number = 0;\n    \n    @Input() rowsPerPageOptions: any[];\n\n    @Input() showFirstLastIcon: boolean = true;\n\n    @Input() dropdownItemTemplate: TemplateRef<any>;\n\n    pageLinks: number[];\n\n    rowsPerPageItems: SelectItem[];\n    \n    paginatorState: any;\n\n    _first: number = 0;\n\n    constructor(private cd: ChangeDetectorRef) {}\n    \n    ngOnInit() {\n        this.updatePaginatorState();\n    }\n\n    ngOnChanges(simpleChange: SimpleChanges) {\n        if (simpleChange.totalRecords) {\n            this.updatePageLinks();\n            this.updatePaginatorState();\n            this.updateFirst();\n            this.updateRowsPerPageOptions();\n        }\n\n        if (simpleChange.first) {\n            this._first = simpleChange.first.currentValue;\n            this.updatePageLinks();\n            this.updatePaginatorState();\n        }\n\n        if (simpleChange.rows) {\n            this.updatePageLinks();\n            this.updatePaginatorState();\n        }\n\n        if (simpleChange.rowsPerPageOptions) {\n            this.updateRowsPerPageOptions();\n        }\n    }\n\n    @Input() get first(): number {\n        return this._first;\n    }\n    set first(val:number) {\n        this._first = val;\n    }\n\n    updateRowsPerPageOptions() {\n        if (this.rowsPerPageOptions) {\n            this.rowsPerPageItems = [];\n            for (let opt of this.rowsPerPageOptions) {\n                if (typeof opt == 'object' && opt['showAll']) {\n                    this.rowsPerPageItems.unshift({label: opt['showAll'], value: this.totalRecords});\n                }\n                else {\n                    this.rowsPerPageItems.push({label: String(opt), value: opt});\n                }\n            }\n        }\n    }\n\n    isFirstPage() {\n        return this.getPage() === 0;\n    }\n\n    isLastPage() {\n        return this.getPage() === this.getPageCount() - 1;\n    }\n\n    getPageCount() {\n        return Math.ceil(this.totalRecords/this.rows)||1;\n    }\n\n    calculatePageLinkBoundaries() {\n        let numberOfPages = this.getPageCount(),\n        visiblePages = Math.min(this.pageLinkSize, numberOfPages);\n\n        //calculate range, keep current in middle if necessary\n        let start = Math.max(0, Math.ceil(this.getPage() - ((visiblePages) / 2))),\n        end = Math.min(numberOfPages - 1, start + visiblePages - 1);\n\n        //check when approaching to last page\n        var delta = this.pageLinkSize - (end - start + 1);\n        start = Math.max(0, start - delta);\n\n        return [start, end];\n    }\n\n    updatePageLinks() {\n        this.pageLinks = [];\n        let boundaries = this.calculatePageLinkBoundaries(),\n        start = boundaries[0],\n        end = boundaries[1];\n\n        for(let i = start; i <= end; i++) {\n            this.pageLinks.push(i + 1);\n        }\n    }\n\n    changePage(p :number) {\n        var pc = this.getPageCount();\n\n        if (p >= 0 && p < pc) {\n            this._first = this.rows * p;\n            var state = {\n                page: p,\n                first: this.first,\n                rows: this.rows,\n                pageCount: pc\n            };\n            this.updatePageLinks();\n\n            this.onPageChange.emit(state);\n            this.updatePaginatorState();\n        }\n    }\n\n    updateFirst() {\n        const page = this.getPage();\n        if (page > 0 && this.totalRecords && (this.first >= this.totalRecords)) {\n            Promise.resolve(null).then(() => this.changePage(page - 1));\n        }\n    }\n\n    getPage(): number {\n        return Math.floor(this.first / this.rows);\n    }\n\n    changePageToFirst(event) {\n      if (!this.isFirstPage()){\n          this.changePage(0);\n      }\n\n      event.preventDefault();\n    }\n\n    changePageToPrev(event) {\n        this.changePage(this.getPage() - 1);\n        event.preventDefault();\n    }\n\n    changePageToNext(event) {\n        this.changePage(this.getPage()  + 1);\n        event.preventDefault();\n    }\n\n    changePageToLast(event) {\n      if (!this.isLastPage()){\n          this.changePage(this.getPageCount() - 1);\n      }\n\n      event.preventDefault();\n    }\n\n    onPageLinkClick(event, page) {\n        this.changePage(page);\n        event.preventDefault();\n    }\n\n    onRppChange(event) {\n        this.changePage(this.getPage());\n    }\n    \n    updatePaginatorState() {\n        this.paginatorState = {\n            page: this.getPage(),\n            pageCount: this.getPageCount(),\n            rows: this.rows,\n            first: this.first,\n            totalRecords: this.totalRecords\n        }\n    }\n\n    get currentPageReport() {\n        return this.currentPageReportTemplate\n                .replace(\"{currentPage}\", String(this.getPage() + 1))\n                .replace(\"{totalPages}\", String(this.getPageCount()))\n                .replace(\"{first}\", String(this._first + 1))\n                .replace(\"{last}\", String(Math.min(this._first + this.rows, this.totalRecords)))\n                .replace(\"{rows}\", String(this.rows))\n                .replace(\"{totalRecords}\", String(this.totalRecords));\n    }\n}\n\n@NgModule({\n    imports: [CommonModule,DropdownModule,FormsModule,SharedModule],\n    exports: [Paginator,DropdownModule,FormsModule,SharedModule],\n    declarations: [Paginator]\n})\nexport class PaginatorModule { }\n"]}