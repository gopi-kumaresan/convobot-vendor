{"version":3,"sources":["ng://primeng-lts/button/button.ts"],"names":["ButtonDirective","el","this","iconPos","cornerStyleClass","prototype","ngAfterViewInit","_initialStyleClass","nativeElement","className","DomHandler","addMultipleClasses","getStyleClass","icon","iconElement","document","createElement","setAttribute","iconPosClass","appendChild","labelElement","label","createTextNode","initialized","styleClass","undefined","setStyleClass","Object","defineProperty","_label","val","findSingle","textContent","removeClass","addClass","_icon","ngOnDestroy","hasChildNodes","removeChild","lastChild","ElementRef","__decorate","Input","Directive","selector","Button","onClick","EventEmitter","onFocus","onBlur","Output","Component","template","changeDetection","ChangeDetectionStrategy","Default","ButtonModule","NgModule","imports","CommonModule","exports","declarations"],"mappings":"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","sourcesContent":["import {NgModule,Directive,Component,ElementRef,EventEmitter,AfterViewInit,Output,OnDestroy,Input,ChangeDetectionStrategy} from '@angular/core';\nimport {DomHandler} from 'primeng-lts/dom';\nimport {CommonModule} from '@angular/common';\n\n@Directive({\n    selector: '[pButton]'\n})\nexport class ButtonDirective implements AfterViewInit, OnDestroy {\n\n    @Input() iconPos: 'left' | 'right' = 'left';\n    \n    @Input() cornerStyleClass: string = 'ui-corner-all';\n        \n    public _label: string;\n    \n    public _icon: string;\n            \n    public initialized: boolean;\n\n    public _initialStyleClass: string;\n\n    constructor(public el: ElementRef) {}\n    \n    ngAfterViewInit() {\n        this._initialStyleClass = this.el.nativeElement.className;\n        DomHandler.addMultipleClasses(this.el.nativeElement, this.getStyleClass());\n        if (this.icon) {\n            let iconElement = document.createElement(\"span\");\n            iconElement.setAttribute(\"aria-hidden\", \"true\");\n            let iconPosClass = (this.iconPos == 'right') ? 'ui-button-icon-right': 'ui-button-icon-left';\n            iconElement.className = iconPosClass  + ' ui-clickable ' + this.icon;\n            this.el.nativeElement.appendChild(iconElement);\n        }\n        \n        let labelElement = document.createElement(\"span\");\n        if (this.icon && !this.label) {\n            labelElement.setAttribute('aria-hidden', 'true');\n        }\n        labelElement.className = 'ui-button-text ui-clickable';\n        labelElement.appendChild(document.createTextNode(this.label||'ui-btn'));\n        this.el.nativeElement.appendChild(labelElement);\n        this.initialized = true;\n    }\n        \n    getStyleClass(): string {\n        let styleClass = 'ui-button ui-widget ui-state-default ' + this.cornerStyleClass;\n        if (this.icon) {\n            if (this.label != null && this.label != undefined && this.label != \"\") {\n                if (this.iconPos == 'left')\n                    styleClass = styleClass + ' ui-button-text-icon-left';\n                else\n                    styleClass = styleClass + ' ui-button-text-icon-right';\n            }\n            else {\n                styleClass = styleClass + ' ui-button-icon-only';\n            }\n        }\n        else {\n            if (this.label) {\n                styleClass = styleClass + ' ui-button-text-only';\n            }\n            else {\n                styleClass = styleClass + ' ui-button-text-empty';\n            }\n        }\n        \n        return styleClass;\n    }\n\n    setStyleClass() {\n        let styleClass = this.getStyleClass();\n        this.el.nativeElement.className = styleClass + ' ' + this._initialStyleClass;\n    }\n    \n    @Input() get label(): string {\n        return this._label;\n    }\n\n    set label(val: string) {\n        this._label = val;\n        \n        if (this.initialized) {\n            DomHandler.findSingle(this.el.nativeElement, '.ui-button-text').textContent = this._label || 'ui-btn';\n\n            if (!this.icon) {\n                if (this._label) {\n                    DomHandler.removeClass(this.el.nativeElement, 'ui-button-text-empty');\n                    DomHandler.addClass(this.el.nativeElement, 'ui-button-text-only');\n                }\n                else {\n                    DomHandler.addClass(this.el.nativeElement, 'ui-button-text-empty');\n                    DomHandler.removeClass(this.el.nativeElement, 'ui-button-text-only');\n                }\n            }\n\n            this.setStyleClass();\n        }\n    }\n    \n    @Input() get icon(): string {\n        return this._icon;\n    }\n\n    set icon(val: string) {\n        this._icon = val;\n        \n        if (this.initialized) {\n            let iconPosClass = (this.iconPos == 'right') ? 'ui-button-icon-right': 'ui-button-icon-left';\n            DomHandler.findSingle(this.el.nativeElement, '.ui-clickable').className =\n                iconPosClass + ' ui-clickable ' + this.icon;\n            this.setStyleClass();\n        }\n    }\n        \n    ngOnDestroy() {\n        while(this.el.nativeElement.hasChildNodes()) {\n            this.el.nativeElement.removeChild(this.el.nativeElement.lastChild);\n        }\n        \n        this.initialized = false;\n    }\n}\n\n@Component({\n    selector: 'p-button',\n    template: `\n        <button [attr.type]=\"type\" [class]=\"styleClass\" [ngStyle]=\"style\" [disabled]=\"disabled\"\n            [ngClass]=\"{'ui-button ui-widget ui-state-default ui-corner-all':true,\n                        'ui-button-icon-only': (icon && !label),\n                        'ui-button-text-icon-left': (icon && label && iconPos === 'left'),\n                        'ui-button-text-icon-right': (icon && label && iconPos === 'right'),\n                        'ui-button-text-only': (!icon && label),\n                        'ui-button-text-empty': (!icon && !label),\n                        'ui-state-disabled': disabled}\"\n                        (click)=\"onClick.emit($event)\" (focus)=\"onFocus.emit($event)\" (blur)=\"onBlur.emit($event)\">\n            <ng-content></ng-content>\n            <span [ngClass]=\"{'ui-clickable': true,\n                        'ui-button-icon-left': (iconPos === 'left'), \n                        'ui-button-icon-right': (iconPos === 'right')}\"\n                        [class]=\"icon\" *ngIf=\"icon\" [attr.aria-hidden]=\"true\"></span>\n            <span class=\"ui-button-text ui-clickable\" [attr.aria-hidden]=\"icon && !label\">{{label||'ui-btn'}}</span>\n        </button>\n    `,\n    changeDetection: ChangeDetectionStrategy.Default\n})\nexport class Button {\n\n    @Input() type: string;\n\n    @Input() iconPos: string = 'left';\n\n    @Input() icon: string;\n\n    @Input() label: string;\n\n    @Input() disabled: boolean;\n\n    @Input() style: any;\n\n    @Input() styleClass: string;\n\n    @Output() onClick: EventEmitter<any> = new EventEmitter();\n\n    @Output() onFocus: EventEmitter<any> = new EventEmitter();\n\n    @Output() onBlur: EventEmitter<any> = new EventEmitter();\n}\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [ButtonDirective,Button],\n    declarations: [ButtonDirective,Button]\n})\nexport class ButtonModule { }\n"]}