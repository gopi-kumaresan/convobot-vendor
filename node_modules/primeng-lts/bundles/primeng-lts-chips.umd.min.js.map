{"version":3,"sources":["ng://primeng-lts/chips/chips.ts"],"names":["CHIPS_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","Chips","multi","el","this","allowDuplicate","onAdd","EventEmitter","onRemove","onFocus","onBlur","onChipClick","onModelChange","onModelTouched","prototype","ngAfterContentInit","_this","templates","forEach","item","getType","itemTemplate","template","onClick","inputViewChild","nativeElement","focus","onInput","updateFilledState","onPaste","event","disabled","separator","clipboardData","window","getData","split","val","addItem","value","length","filled","onItemClick","emit","originalEvent","writeValue","updateMaxedOut","registerOnChange","fn","registerOnTouched","setDisabledState","resolveFieldData","data","field","indexOf","fields","i","len","onInputFocus","onInputBlur","addOnBlur","removeItem","index","removedItem","filter","preventDefault","trim","__spread","onKeydown","which","pop","addOnTab","max","ElementRef","__decorate","Input","Output","ViewChild","ContentChildren","PrimeTemplate","Component","selector","host","[class.ui-inputwrapper-filled]","[class.ui-inputwrapper-focus]","providers","changeDetection","ChangeDetectionStrategy","Default","ChipsModule","NgModule","imports","CommonModule","InputTextModule","SharedModule","exports","declarations"],"mappings":"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","sourcesContent":["import {NgModule,Component,ElementRef,Input,Output,EventEmitter,AfterContentInit,ContentChildren,QueryList,TemplateRef,forwardRef,ViewChild,ChangeDetectionStrategy} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {SharedModule,PrimeTemplate} from 'primeng-lts/api';\nimport {InputTextModule} from 'primeng-lts/inputtext';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\n\nexport const CHIPS_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => Chips),\n  multi: true\n};\n\n@Component({\n    selector: 'p-chips',\n    template: `\n        <div [ngClass]=\"'ui-chips ui-widget'\" [ngStyle]=\"style\" [class]=\"styleClass\" (click)=\"onClick()\">\n            <ul [ngClass]=\"{'ui-inputtext ui-state-default ui-corner-all':true,'ui-state-focus':focus,'ui-state-disabled':disabled}\">\n                <li #token *ngFor=\"let item of value; let i = index;\" class=\"ui-chips-token ui-state-highlight ui-corner-all\" (click)=\"onItemClick($event, item)\">\n                    <span *ngIf=\"!disabled\" class=\"ui-chips-token-icon pi pi-fw pi-times\" (click)=\"removeItem($event,i)\"></span>\n                    <span *ngIf=\"!itemTemplate\" class=\"ui-chips-token-label\">{{field ? resolveFieldData(item,field) : item}}</span>\n                    <ng-container *ngTemplateOutlet=\"itemTemplate; context: {$implicit: item}\"></ng-container>\n                </li>\n                <li class=\"ui-chips-input-token\">\n                    <input #inputtext type=\"text\" [attr.id]=\"inputId\" [attr.placeholder]=\"(value && value.length ? null : placeholder)\" [attr.tabindex]=\"tabindex\" (keydown)=\"onKeydown($event)\"\n                    (input)=\"onInput()\" (paste)=\"onPaste($event)\" [attr.aria-labelledby]=\"ariaLabelledBy\" (focus)=\"onInputFocus($event)\" (blur)=\"onInputBlur($event)\" [disabled]=\"disabled\" [ngStyle]=\"inputStyle\" [class]=\"inputStyleClass\">\n                </li>\n            </ul>\n        </div>\n    `,\n    host: {\n        '[class.ui-inputwrapper-filled]': 'filled',\n        '[class.ui-inputwrapper-focus]': 'focus'\n    },\n    providers: [CHIPS_VALUE_ACCESSOR],\n    changeDetection: ChangeDetectionStrategy.Default\n})\nexport class Chips implements AfterContentInit,ControlValueAccessor {\n\n    @Input() style: any;\n\n    @Input() styleClass: string;\n\n    @Input() disabled: boolean;\n\n    @Input() field: string;\n\n    @Input() placeholder: string;\n\n    @Input() max: number;\n\n    @Input() ariaLabelledBy: string;\n\n    @Input() tabindex: number;\n\n    @Input() inputId: string;\n\n    @Input() allowDuplicate: boolean = true;\n\n    @Input() inputStyle: any;\n\n    @Input() inputStyleClass: any;\n\n    @Input() addOnTab: boolean;\n\n    @Input() addOnBlur: boolean;\n\n    @Input() separator: string;\n\n    @Output() onAdd: EventEmitter<any> = new EventEmitter();\n\n    @Output() onRemove: EventEmitter<any> = new EventEmitter();\n\n    @Output() onFocus: EventEmitter<any> = new EventEmitter();\n\n    @Output() onBlur: EventEmitter<any> = new EventEmitter();\n\n    @Output() onChipClick: EventEmitter<any> = new EventEmitter();\n\n    @ViewChild('inputtext') inputViewChild: ElementRef;\n\n    @ContentChildren(PrimeTemplate) templates: QueryList<any>;\n\n    public itemTemplate: TemplateRef<any>;\n\n    value: any;\n\n    onModelChange: Function = () => {};\n\n    onModelTouched: Function = () => {};\n\n    valueChanged: boolean;\n\n    focus: boolean;\n\n    filled: boolean;\n\n    constructor(public el: ElementRef) {}\n\n    ngAfterContentInit() {\n        this.templates.forEach((item) => {\n            switch(item.getType()) {\n                case 'item':\n                    this.itemTemplate = item.template;\n                break;\n\n                default:\n                    this.itemTemplate = item.template;\n                break;\n            }\n        });\n    }\n\n    onClick() {\n        this.inputViewChild.nativeElement.focus();\n    }\n\n    onInput() {\n        this.updateFilledState();\n    }\n\n    onPaste(event) {\n        if (!this.disabled) {\n            if (this.separator) {\n                let pastedData = (event.clipboardData || window['clipboardData']).getData('Text');\n                pastedData.split(this.separator).forEach(val => {\n                    this.addItem(event, val, true);\n                });\n                this.inputViewChild.nativeElement.value = '';\n            }\n            \n            this.updateFilledState();\n        }\n    }\n\n    updateFilledState() {\n        if (!this.value || this.value.length === 0) {\n            this.filled = (this.inputViewChild.nativeElement && this.inputViewChild.nativeElement.value != '');\n        }\n        else {\n            this.filled = true;\n        }\n    }\n\n    onItemClick(event: Event, item: any) {\n        this.onChipClick.emit({\n            originalEvent: event,\n            value: item\n        });\n    }\n\n    writeValue(value: any) : void {\n        this.value = value;\n        this.updateMaxedOut();\n    }\n\n    registerOnChange(fn: Function): void {\n        this.onModelChange = fn;\n    }\n\n    registerOnTouched(fn: Function): void {\n        this.onModelTouched = fn;\n    }\n\n    setDisabledState(val: boolean): void {\n        this.disabled = val;\n    }\n\n    resolveFieldData(data: any, field: string): any {\n        if (data && field) {\n            if (field.indexOf('.') == -1) {\n                return data[field];\n            }\n            else {\n                let fields: string[] = field.split('.');\n                let value = data;\n                for(var i = 0, len = fields.length; i < len; ++i) {\n                    value = value[fields[i]];\n                }\n                return value;\n            }\n        }\n        else {\n            return null;\n        }\n    }\n\n    onInputFocus(event: FocusEvent) {\n        this.focus = true;\n        this.onFocus.emit(event);\n    }\n\n    onInputBlur(event: FocusEvent) {\n        this.focus = false;\n        if (this.addOnBlur && this.inputViewChild.nativeElement.value) {\n            this.addItem(event, this.inputViewChild.nativeElement.value, false);\n        }\n        this.onModelTouched();\n        this.onBlur.emit(event);\n    }\n\n    removeItem(event: Event, index: number): void {\n        if (this.disabled) {\n            return;\n        }\n\n        let removedItem = this.value[index];\n        this.value = this.value.filter((val, i) => i!=index);\n        this.onModelChange(this.value);\n        this.onRemove.emit({\n            originalEvent: event,\n            value: removedItem\n        });\n        this.updateFilledState();\n        this.updateMaxedOut();\n    }\n\n    addItem(event: Event, item: string, preventDefault: boolean): void {\n        this.value = this.value||[];\n        if (item && item.trim().length) {\n            if (this.allowDuplicate || this.value.indexOf(item) === -1) {\n                this.value = [...this.value, item];\n                this.onModelChange(this.value);\n                this.onAdd.emit({\n                    originalEvent: event,\n                    value: item\n                });\n            }\n        }\n        this.updateFilledState();\n        this.updateMaxedOut();\n        this.inputViewChild.nativeElement.value = '';\n\n        if (preventDefault) {\n            event.preventDefault();\n        }\n    }\n\n    onKeydown(event: KeyboardEvent): void {\n        switch(event.which) {\n            //backspace\n            case 8:\n                if (this.inputViewChild.nativeElement.value.length === 0 && this.value && this.value.length > 0) {\n                    this.value = [...this.value];\n                    let removedItem = this.value.pop();\n                    this.onModelChange(this.value);\n                    this.onRemove.emit({\n                        originalEvent: event,\n                        value: removedItem\n                    });\n                    this.updateFilledState();\n                }\n            break;\n\n            //enter\n            case 13:\n                this.addItem(event, this.inputViewChild.nativeElement.value, true);\n            break;\n\n            case 9:\n                if (this.addOnTab && this.inputViewChild.nativeElement.value !== '') {\n                    this.addItem(event, this.inputViewChild.nativeElement.value, true);\n                }\n            break;\n\n            default:\n                if (this.max && this.value && this.max === this.value.length) {\n                    event.preventDefault();\n                }\n                else if (this.separator) {\n                    if (this.separator === ',' && event.which === 188) {\n                        this.addItem(event, this.inputViewChild.nativeElement.value, true);\n                    }\n                }\n            break;\n        }\n    }\n\n    updateMaxedOut() {\n        if (this.inputViewChild && this.inputViewChild.nativeElement) {\n            if (this.max && this.value && this.max === this.value.length)\n                this.inputViewChild.nativeElement.disabled = true;\n            else\n                this.inputViewChild.nativeElement.disabled = this.disabled || false;\n        }\n    }\n}\n\n@NgModule({\n    imports: [CommonModule,InputTextModule,SharedModule],\n    exports: [Chips,InputTextModule,SharedModule],\n    declarations: [Chips]\n})\nexport class ChipsModule { }\n"]}