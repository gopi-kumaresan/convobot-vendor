{"version":3,"sources":["ng://primeng-lts/defer/defer.ts"],"names":["DeferredLoader","el","renderer","viewContainer","cd","this","onLoad","EventEmitter","prototype","ngAfterViewInit","_this","shouldLoad","load","isLoaded","documentScrollListener","listen","rect","nativeElement","getBoundingClientRect","document","documentElement","clientHeight","top","view","createEmbeddedView","template","emit","detectChanges","ngOnDestroy","ElementRef","Renderer2","ViewContainerRef","ChangeDetectorRef","__decorate","Output","ContentChild","TemplateRef","Directive","selector","DeferModule","NgModule","imports","CommonModule","exports","declarations"],"mappings":"+tBAAAA,EAAA,WAiBI,SAAAA,EAAmBC,EAAuBC,EAA4BC,EAAyCC,GAA5FC,KAAAJ,GAAAA,EAAuBI,KAAAH,SAAAA,EAA4BG,KAAAF,cAAAA,EAAyCE,KAAAD,GAAAA,EARrGC,KAAAC,OAA4B,IAAIC,EAAAA,aAwD9C,OA9CIP,EAAAQ,UAAAC,gBAAA,WAAA,IAAAC,EAAAL,KACQA,KAAKM,cACLN,KAAKO,OAGJP,KAAKQ,aACNR,KAAKS,uBAAyBT,KAAKH,SAASa,OAAO,SAAU,UAAU,WAC/DL,EAAKC,eACLD,EAAKE,OACLF,EAAKI,yBACLJ,EAAKI,uBAAyB,WAM9Cd,EAAAQ,UAAAG,WAAA,WACI,GAAIN,KAAKQ,WACL,OAAO,EAGP,IAAIG,EAAOX,KAAKJ,GAAGgB,cAAcC,wBAIjC,OAHiBC,SAASC,gBACCC,cAENL,EAAKM,KAIlCtB,EAAAQ,UAAAI,KAAA,WACIP,KAAKkB,KAAOlB,KAAKF,cAAcqB,mBAAmBnB,KAAKoB,UACvDpB,KAAKC,OAAOoB,OACZrB,KAAKD,GAAGuB,iBAGZ3B,EAAAQ,UAAAK,SAAA,WACI,OAAoB,MAAbR,KAAKkB,MAGhBvB,EAAAQ,UAAAoB,YAAA,WACIvB,KAAKkB,KAAO,KAERlB,KAAKS,wBACLT,KAAKS,mEA7CUe,EAAAA,kBAA6BC,EAAAA,iBAAiCC,EAAAA,wBAA8BC,EAAAA,qBARzGC,EAAA,CAATC,EAAAA,uCAE0BD,EAAA,CAA1BE,EAAAA,aAAaC,EAAAA,6CAJLpC,EAAciC,EAAA,CAH1BI,EAAAA,UAAU,CACPC,SAAU,cAEDtC,GAPb,gBAwEA,SAAAuC,KAA2B,OAAdA,EAAWN,EAAA,CALvBO,EAAAA,SAAS,CACNC,QAAS,CAACC,EAAAA,cACVC,QAAS,CAAC3C,GACV4C,aAAc,CAAC5C,MAENuC","sourcesContent":["import {NgModule,Directive,ElementRef,AfterViewInit,OnDestroy,TemplateRef,EmbeddedViewRef,\n        ViewContainerRef,Renderer2,EventEmitter,Output,ContentChild, ChangeDetectorRef} from '@angular/core';\nimport {CommonModule} from '@angular/common';\n\n@Directive({\n    selector: '[pDefer]'\n})\nexport class DeferredLoader implements AfterViewInit,OnDestroy {\n        \n    @Output() onLoad: EventEmitter<any> = new EventEmitter();\n    \n    @ContentChild(TemplateRef) template: TemplateRef<any>;\n        \n    documentScrollListener: Function;\n    \n    view: EmbeddedViewRef<any>;\n            \n    constructor(public el: ElementRef, public renderer: Renderer2, public viewContainer: ViewContainerRef, private cd: ChangeDetectorRef) {}\n    \n    ngAfterViewInit() {\n        if (this.shouldLoad()) {\n            this.load();\n        }\n        \n        if (!this.isLoaded()) {\n            this.documentScrollListener = this.renderer.listen('window', 'scroll', () => {\n                if (this.shouldLoad()) {\n                    this.load();\n                    this.documentScrollListener();\n                    this.documentScrollListener = null;\n                }\n            });\n        }\n    }\n    \n    shouldLoad(): boolean {\n        if (this.isLoaded()) {\n            return false;\n        }\n        else {\n            let rect = this.el.nativeElement.getBoundingClientRect();\n            let docElement = document.documentElement;\n            let winHeight = docElement.clientHeight;\n            \n            return (winHeight >= rect.top);\n        }\n    }\n    \n    load(): void { \n        this.view = this.viewContainer.createEmbeddedView(this.template);\n        this.onLoad.emit();\n        this.cd.detectChanges();\n    }\n    \n    isLoaded() {\n        return this.view != null;\n    }\n            \n    ngOnDestroy() {\n        this.view = null;\n        \n        if (this.documentScrollListener) {\n            this.documentScrollListener();\n        }\n    }\n}\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [DeferredLoader],\n    declarations: [DeferredLoader]\n})\nexport class DeferModule { }"]}