{"version":3,"sources":["ng://primeng-lts/captcha/captcha.ts"],"names":["Captcha","el","_zone","this","siteKey","theme","type","size","tabindex","initCallback","onResponse","EventEmitter","onExpire","_instance","_language","Object","defineProperty","prototype","language","init","ngAfterViewInit","_this","window","grecaptcha","render","setTimeout","nativeElement","children","sitekey","hl","callback","response","run","recaptchaCallback","expired-callback","recaptchaExpiredCallback","reset","getResponse","emit","ngOnDestroy","ElementRef","NgZone","__decorate","Input","Output","Component","selector","template","changeDetection","ChangeDetectionStrategy","Default","CaptchaModule","NgModule","imports","CommonModule","exports","declarations"],"mappings":"muBAAAA,EAAA,WAuCI,SAAAA,EAAmBC,EAAuBC,GAAvBC,KAAAF,GAAAA,EAAuBE,KAAAD,MAAAA,EA7BjCC,KAAAC,QAAkB,KAElBD,KAAAE,MAAQ,QAERF,KAAAG,KAAO,QAEPH,KAAAI,KAAO,SAEPJ,KAAAK,SAAW,EAEXL,KAAAM,aAAe,gBAEdN,KAAAO,WAAgC,IAAIC,EAAAA,aAEpCR,KAAAS,SAA8B,IAAID,EAAAA,aAEpCR,KAAAU,UAAiB,KAEjBV,KAAAW,UAAiB,KAyE7B,OAvEaC,OAAAC,eAAIhB,EAAAiB,UAAA,WAAQ,KAAZ,WACL,OAAOd,KAAKW,eAGhB,SAAaI,GACTf,KAAKW,UAAYI,EACjBf,KAAKgB,wCAKTnB,EAAAiB,UAAAG,gBAAA,WAAA,IAAAC,EAAAlB,KACcmB,OAAQC,WACHD,OAAQC,WAAWC,OAM1BrB,KAAKgB,OALLM,YAAW,WACPJ,EAAKF,SACP,KAOAG,OAAQnB,KAAKM,cAAgB,WACjCY,EAAKF,SAKfnB,EAAAiB,UAAAE,KAAA,WAAA,IAAAE,EAAAlB,KACIA,KAAKU,UAAkBS,OAAQC,WAAWC,OAAOrB,KAAKF,GAAGyB,cAAcC,SAAS,GAAI,CAChFC,QAAWzB,KAAKC,QAChBC,MAASF,KAAKE,MACdC,KAAQH,KAAKG,KACbC,KAAQJ,KAAKI,KACbC,SAAYL,KAAKK,SACjBqB,GAAM1B,KAAKe,SACXY,SAAY,SAACC,GAAsBV,EAAKnB,MAAM8B,KAAI,WAAM,OAAAX,EAAKY,kBAAkBF,OAC/EG,mBAAoB,WAAOb,EAAKnB,MAAM8B,KAAI,WAAM,OAAAX,EAAKc,kCAI7DnC,EAAAiB,UAAAmB,MAAA,WAC2B,OAAnBjC,KAAKU,WAGHS,OAAQC,WAAWa,MAAMjC,KAAKU,YAGxCb,EAAAiB,UAAAoB,YAAA,WACI,OAAuB,OAAnBlC,KAAKU,UACE,KAEES,OAAQC,WAAWc,YAAYlC,KAAKU,YAGrDb,EAAAiB,UAAAgB,kBAAA,SAAkBF,GACd5B,KAAKO,WAAW4B,KAAK,CACjBP,SAAUA,KAIlB/B,EAAAiB,UAAAkB,yBAAA,WACIhC,KAAKS,SAAS0B,QAGlBtC,EAAAiB,UAAAsB,YAAA,WAC0B,MAAlBpC,KAAKU,WACDS,OAAQC,WAAWa,MAAMjC,KAAKU,qDA3DnB2B,EAAAA,kBAA0BC,EAAAA,UA7BxCC,EAAA,CAARC,EAAAA,uCAEQD,EAAA,CAARC,EAAAA,qCAEQD,EAAA,CAARC,EAAAA,oCAEQD,EAAA,CAARC,EAAAA,oCAEQD,EAAA,CAARC,EAAAA,wCAEQD,EAAA,CAARC,EAAAA,4CAESD,EAAA,CAATE,EAAAA,2CAESF,EAAA,CAATE,EAAAA,yCAMQF,EAAA,CAARC,EAAAA,sCAtBQ3C,EAAO0C,EAAA,CALnBG,EAAAA,UAAU,CACPC,SAAU,YACVC,SAAU,cACVC,gBAAiBC,EAAAA,wBAAwBC,WAEhClD,GARb,gBA4GA,SAAAmD,KAA6B,OAAhBA,EAAaT,EAAA,CALzBU,EAAAA,SAAS,CACNC,QAAS,CAACC,EAAAA,cACVC,QAAS,CAACvD,GACVwD,aAAc,CAACxD,MAENmD","sourcesContent":["import {NgModule,AfterViewInit,Component,EventEmitter,Input,NgZone,OnDestroy,Output,ElementRef,ChangeDetectionStrategy} from '@angular/core';\nimport {CommonModule} from '@angular/common';\n\n@Component({\n    selector: 'p-captcha',\n    template: `<div></div>`,\n    changeDetection: ChangeDetectionStrategy.Default\n})\nexport class Captcha implements AfterViewInit,OnDestroy {\n\n    @Input() siteKey: string = null;\n        \n    @Input() theme = 'light';\n    \n    @Input() type = 'image';\n    \n    @Input() size = 'normal';\n    \n    @Input() tabindex = 0;\n     \n    @Input() initCallback = \"initRecaptcha\";\n    \n    @Output() onResponse: EventEmitter<any> = new EventEmitter();\n    \n    @Output() onExpire: EventEmitter<any> = new EventEmitter();\n    \n    private _instance: any = null;\n\n    private _language: any = null;\n\n    @Input() get language(): string {\n        return this._language;\n    }\n\n    set language(language: string) {\n        this._language = language;\n        this.init();\n    }\n\n    constructor(public el: ElementRef, public _zone: NgZone) {}\n    \n    ngAfterViewInit() {\n        if ((<any>window).grecaptcha) {\n            if (!(<any>window).grecaptcha.render){\n                setTimeout(() =>{\n                    this.init();\n                },100)\n            }\n            else {\n                this.init();\n            }\n        }\n        else {\n            (<any>window)[this.initCallback] = () => {\n              this.init();\n            }\n        } \n    }\n    \n    init()Â {\n        this._instance = (<any>window).grecaptcha.render(this.el.nativeElement.children[0], {\n            'sitekey': this.siteKey,\n            'theme': this.theme,\n            'type': this.type,\n            'size': this.size,\n            'tabindex': this.tabindex,\n            'hl': this.language,\n            'callback': (response: string) => {this._zone.run(() => this.recaptchaCallback(response))},\n            'expired-callback': () => {this._zone.run(() => this.recaptchaExpiredCallback())}\n        });\n    }\n    \n    reset() {\n        if (this._instance === null)\n            return;\n        \n        (<any>window).grecaptcha.reset(this._instance);\n    }\n    \n    getResponse(): String {\n        if (this._instance === null)\n            return null;\n        \n        return (<any>window).grecaptcha.getResponse(this._instance);\n    }\n    \n    recaptchaCallback(response: string) {\n        this.onResponse.emit({\n            response: response\n        });\n    }\n\n    recaptchaExpiredCallback() {\n        this.onExpire.emit();\n    }\n    \n    ngOnDestroy() {\n        if (this._instance != null) {\n          (<any>window).grecaptcha.reset(this._instance);\n        }\n    }\n}\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [Captcha],\n    declarations: [Captcha]\n})\nexport class CaptchaModule { }\n"]}