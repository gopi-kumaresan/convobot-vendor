import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from '@angular/router';
import * as ɵngcc3 from 'primeng-lts/api';

var _c0 = ["sublist"];
var _c1 = ["menuitem"];
var _c2 = function (a0) { return { "ui-helper-hidden": a0 }; };
function ContextMenuSub_ng_template_2_li_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "li", 5, 6);
} if (rf & 2) {
    var child_r2 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(1, _c2, child_r2.visible === false));
} }
function ContextMenuSub_ng_template_2_li_1_a_2_span_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "span", 15);
} }
function ContextMenuSub_ng_template_2_li_1_a_2_span_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "span", 16);
} if (rf & 2) {
    var child_r2 = ɵngcc0.ɵɵnextContext(3).$implicit;
    ɵngcc0.ɵɵproperty("ngClass", child_r2.icon);
} }
var _c3 = function (a1) { return { "ui-menuitem-link ui-corner-all": true, "ui-state-disabled": a1 }; };
function ContextMenuSub_ng_template_2_li_1_a_2_Template(rf, ctx) { if (rf & 1) {
    var _r17 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "a", 11);
    ɵngcc0.ɵɵlistener("click", function ContextMenuSub_ng_template_2_li_1_a_2_Template_a_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r17); ɵngcc0.ɵɵnextContext(); var _r8 = ɵngcc0.ɵɵreference(1); var ctx_r16 = ɵngcc0.ɵɵnextContext(); var child_r2 = ctx_r16.$implicit; var index_r3 = ctx_r16.index; var ctx_r15 = ɵngcc0.ɵɵnextContext(); return ctx_r15.onItemClick($event, child_r2, _r8, ctx_r15.getKey(index_r3)); });
    ɵngcc0.ɵɵtemplate(1, ContextMenuSub_ng_template_2_li_1_a_2_span_1_Template, 1, 0, "span", 12);
    ɵngcc0.ɵɵtemplate(2, ContextMenuSub_ng_template_2_li_1_a_2_span_2_Template, 1, 1, "span", 13);
    ɵngcc0.ɵɵelementStart(3, "span", 14);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var child_r2 = ɵngcc0.ɵɵnextContext(2).$implicit;
    var ctx_r9 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(11, _c3, child_r2.disabled));
    ɵngcc0.ɵɵattribute("href", child_r2.url ? child_r2.url : null, ɵngcc0.ɵɵsanitizeUrl)("target", child_r2.target)("title", child_r2.title)("id", child_r2.id)("tabindex", child_r2.disabled ? null : "0")("aria-haspopup", ctx_r9.item.items != null)("aria-expanded", ctx_r9.item === ctx_r9.activeItem);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", child_r2.items);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", child_r2.icon);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(child_r2.label);
} }
function ContextMenuSub_ng_template_2_li_1_a_3_span_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "span", 15);
} }
function ContextMenuSub_ng_template_2_li_1_a_3_span_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "span", 16);
} if (rf & 2) {
    var child_r2 = ɵngcc0.ɵɵnextContext(3).$implicit;
    ɵngcc0.ɵɵproperty("ngClass", child_r2.icon);
} }
var _c4 = function () { return { exact: false }; };
function ContextMenuSub_ng_template_2_li_1_a_3_Template(rf, ctx) { if (rf & 1) {
    var _r24 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "a", 17);
    ɵngcc0.ɵɵlistener("click", function ContextMenuSub_ng_template_2_li_1_a_3_Template_a_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r24); ɵngcc0.ɵɵnextContext(); var _r8 = ɵngcc0.ɵɵreference(1); var ctx_r23 = ɵngcc0.ɵɵnextContext(); var child_r2 = ctx_r23.$implicit; var index_r3 = ctx_r23.index; var ctx_r22 = ɵngcc0.ɵɵnextContext(); return ctx_r22.onItemClick($event, child_r2, _r8, ctx_r22.getKey(index_r3)); });
    ɵngcc0.ɵɵtemplate(1, ContextMenuSub_ng_template_2_li_1_a_3_span_1_Template, 1, 0, "span", 12);
    ɵngcc0.ɵɵtemplate(2, ContextMenuSub_ng_template_2_li_1_a_3_span_2_Template, 1, 1, "span", 13);
    ɵngcc0.ɵɵelementStart(3, "span", 14);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var child_r2 = ɵngcc0.ɵɵnextContext(2).$implicit;
    ɵngcc0.ɵɵproperty("routerLink", child_r2.routerLink)("queryParams", child_r2.queryParams)("routerLinkActive", "ui-menuitem-link-active")("routerLinkActiveOptions", child_r2.routerLinkActiveOptions || ɵngcc0.ɵɵpureFunction0(18, _c4))("ngClass", ɵngcc0.ɵɵpureFunction1(19, _c3, child_r2.disabled))("fragment", child_r2.fragment)("queryParamsHandling", child_r2.queryParamsHandling)("preserveFragment", child_r2.preserveFragment)("skipLocationChange", child_r2.skipLocationChange)("replaceUrl", child_r2.replaceUrl)("state", child_r2.state);
    ɵngcc0.ɵɵattribute("target", child_r2.target)("title", child_r2.title)("id", child_r2.id)("tabindex", child_r2.disabled ? null : "0");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", child_r2.items);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", child_r2.icon);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(child_r2.label);
} }
function ContextMenuSub_ng_template_2_li_1_p_contextMenuSub_4_Template(rf, ctx) { if (rf & 1) {
    var _r27 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "p-contextMenuSub", 18);
    ɵngcc0.ɵɵlistener("leafClick", function ContextMenuSub_ng_template_2_li_1_p_contextMenuSub_4_Template_p_contextMenuSub_leafClick_0_listener() { ɵngcc0.ɵɵrestoreView(_r27); var ctx_r26 = ɵngcc0.ɵɵnextContext(3); return ctx_r26.onLeafClick(); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r28 = ɵngcc0.ɵɵnextContext(2);
    var index_r3 = ctx_r28.index;
    var child_r2 = ctx_r28.$implicit;
    var ctx_r11 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("parentItemKey", ctx_r11.getKey(index_r3))("item", child_r2);
} }
var _c5 = function (a1, a2) { return { "ui-menuitem ui-corner-all": true, "ui-menuitem-active": a1, "ui-helper-hidden": a2 }; };
function ContextMenuSub_ng_template_2_li_1_Template(rf, ctx) { if (rf & 1) {
    var _r31 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "li", 7, 6);
    ɵngcc0.ɵɵlistener("mouseenter", function ContextMenuSub_ng_template_2_li_1_Template_li_mouseenter_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r31); var ctx_r30 = ɵngcc0.ɵɵnextContext(); var child_r2 = ctx_r30.$implicit; var index_r3 = ctx_r30.index; var ctx_r29 = ɵngcc0.ɵɵnextContext(); return ctx_r29.onItemMouseEnter($event, child_r2, ctx_r29.getKey(index_r3)); })("mouseleave", function ContextMenuSub_ng_template_2_li_1_Template_li_mouseleave_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r31); var child_r2 = ɵngcc0.ɵɵnextContext().$implicit; var ctx_r32 = ɵngcc0.ɵɵnextContext(); return ctx_r32.onItemMouseLeave($event, child_r2); });
    ɵngcc0.ɵɵtemplate(2, ContextMenuSub_ng_template_2_li_1_a_2_Template, 5, 13, "a", 8);
    ɵngcc0.ɵɵtemplate(3, ContextMenuSub_ng_template_2_li_1_a_3_Template, 5, 21, "a", 9);
    ɵngcc0.ɵɵtemplate(4, ContextMenuSub_ng_template_2_li_1_p_contextMenuSub_4_Template, 1, 2, "p-contextMenuSub", 10);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r34 = ɵngcc0.ɵɵnextContext();
    var child_r2 = ctx_r34.$implicit;
    var index_r3 = ctx_r34.index;
    var ctx_r5 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassMap(child_r2.styleClass);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction2(8, _c5, ctx_r5.isActive(ctx_r5.getKey(index_r3)), child_r2.visible === false))("ngStyle", child_r2.style);
    ɵngcc0.ɵɵattribute("data-ik", ctx_r5.getKey(index_r3));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", !child_r2.routerLink);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", child_r2.routerLink);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", child_r2.items);
} }
function ContextMenuSub_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, ContextMenuSub_ng_template_2_li_0_Template, 2, 3, "li", 3);
    ɵngcc0.ɵɵtemplate(1, ContextMenuSub_ng_template_2_li_1_Template, 5, 11, "li", 4);
} if (rf & 2) {
    var child_r2 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("ngIf", child_r2.separator);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !child_r2.separator);
} }
var _c6 = function (a0) { return { "ui-widget-content ui-corner-all ui-submenu-list ui-shadow": a0 }; };
var _c7 = ["container"];
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
import { NgModule, Component, ElementRef, AfterViewInit, OnDestroy, Input, Output, Renderer2, Inject, forwardRef, ViewChild, NgZone, EventEmitter, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';
import { CommonModule } from '@angular/common';
import { DomHandler } from 'primeng-lts/dom';
import { ContextMenuService, MenuItem } from 'primeng-lts/api';
import { RouterModule } from '@angular/router';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
var ContextMenuSub = /** @class */ (function () {
    function ContextMenuSub(contextMenu) {
        this.leafClick = new EventEmitter();
        this.contextMenu = contextMenu;
    }
    ContextMenuSub.prototype.ngOnInit = function () {
        var _this = this;
        this.activeItemKeyChangeSubscription = this.contextMenu.contextMenuService.activeItemKeyChange$.pipe(takeUntil(this.contextMenu.ngDestroy$)).subscribe(function (activeItemKey) {
            _this.activeItemKey = activeItemKey;
            if (_this.isActive(_this.parentItemKey) && DomHandler.hasClass(_this.sublistViewChild.nativeElement, 'ui-submenu-list-active')) {
                _this.contextMenu.positionSubmenu(_this.sublistViewChild.nativeElement);
            }
            _this.contextMenu.cd.markForCheck();
        });
    };
    ContextMenuSub.prototype.onItemMouseEnter = function (event, item, key) {
        if (this.hideTimeout) {
            clearTimeout(this.hideTimeout);
            this.hideTimeout = null;
        }
        if (item.disabled) {
            return;
        }
        if (item.items) {
            var childSublist = DomHandler.findSingle(event.currentTarget, '.ui-submenu-list');
            DomHandler.addClass(childSublist, 'ui-submenu-list-active');
        }
        this.contextMenu.contextMenuService.changeKey(key);
    };
    ContextMenuSub.prototype.onItemMouseLeave = function (event, item) {
        if (item.disabled) {
            return;
        }
        if (this.contextMenu.el.nativeElement.contains(event.toElement)) {
            if (item.items) {
                this.contextMenu.removeActiveFromSubLists(event.currentTarget);
            }
            if (!this.root) {
                this.contextMenu.contextMenuService.changeKey(this.parentItemKey);
            }
        }
    };
    ContextMenuSub.prototype.onItemClick = function (event, item, menuitem, key) {
        if (item.disabled) {
            event.preventDefault();
            return;
        }
        if (!item.url && !item.routerLink) {
            event.preventDefault();
        }
        if (item.command) {
            item.command({
                originalEvent: event,
                item: item
            });
        }
        if (item.items) {
            var childSublist = DomHandler.findSingle(menuitem, '.ui-submenu-list');
            if (childSublist) {
                if (this.isActive(key) && DomHandler.hasClass(childSublist, 'ui-submenu-list-active')) {
                    this.contextMenu.removeActiveFromSubLists(menuitem);
                }
                else {
                    DomHandler.addClass(childSublist, 'ui-submenu-list-active');
                }
                this.contextMenu.contextMenuService.changeKey(key);
            }
        }
        if (!item.items) {
            this.onLeafClick();
        }
    };
    ContextMenuSub.prototype.onLeafClick = function () {
        if (this.root) {
            this.contextMenu.hide();
        }
        this.leafClick.emit();
    };
    ContextMenuSub.prototype.getKey = function (index) {
        return this.root ? String(index) : this.parentItemKey + '_' + index;
    };
    ContextMenuSub.prototype.isActive = function (key) {
        return (this.activeItemKey && this.activeItemKey.startsWith(key));
    };
    ContextMenuSub.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [forwardRef(function () { return ContextMenu; }),] }] }
    ]; };
    __decorate([
        Input()
    ], ContextMenuSub.prototype, "item", void 0);
    __decorate([
        Input()
    ], ContextMenuSub.prototype, "root", void 0);
    __decorate([
        Input()
    ], ContextMenuSub.prototype, "parentItemKey", void 0);
    __decorate([
        Output()
    ], ContextMenuSub.prototype, "leafClick", void 0);
    __decorate([
        ViewChild('sublist')
    ], ContextMenuSub.prototype, "sublistViewChild", void 0);
    __decorate([
        ViewChild('menuitem')
    ], ContextMenuSub.prototype, "menuitemViewChild", void 0);
    ContextMenuSub = __decorate([ __param(0, Inject(forwardRef(function () { return ContextMenu; })))
    ], ContextMenuSub);
ContextMenuSub.ɵfac = function ContextMenuSub_Factory(t) { return new (t || ContextMenuSub)(ɵngcc0.ɵɵdirectiveInject(forwardRef(function () { return ContextMenu; }))); };
ContextMenuSub.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ContextMenuSub, selectors: [["p-contextMenuSub"]], viewQuery: function ContextMenuSub_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, true);
        ɵngcc0.ɵɵviewQuery(_c1, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.sublistViewChild = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.menuitemViewChild = _t.first);
    } }, inputs: { item: "item", root: "root", parentItemKey: "parentItemKey" }, outputs: { leafClick: "leafClick" }, decls: 3, vars: 4, consts: [[1, "ui-menu-list", 3, "ngClass"], ["sublist", ""], ["ngFor", "", 3, "ngForOf"], ["class", "ui-menu-separator ui-widget-content", "role", "separator", 3, "ngClass", 4, "ngIf"], ["role", "none", 3, "ngClass", "ngStyle", "class", "mouseenter", "mouseleave", 4, "ngIf"], ["role", "separator", 1, "ui-menu-separator", "ui-widget-content", 3, "ngClass"], ["menuitem", ""], ["role", "none", 3, "ngClass", "ngStyle", "mouseenter", "mouseleave"], [3, "ngClass", "click", 4, "ngIf"], ["role", "menuitem", 3, "routerLink", "queryParams", "routerLinkActive", "routerLinkActiveOptions", "ngClass", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "click", 4, "ngIf"], ["class", "ui-submenu", 3, "parentItemKey", "item", "leafClick", 4, "ngIf"], [3, "ngClass", "click"], ["class", "ui-submenu-icon pi pi-fw pi-caret-right", 4, "ngIf"], ["class", "ui-menuitem-icon", 3, "ngClass", 4, "ngIf"], [1, "ui-menuitem-text"], [1, "ui-submenu-icon", "pi", "pi-fw", "pi-caret-right"], [1, "ui-menuitem-icon", 3, "ngClass"], ["role", "menuitem", 3, "routerLink", "queryParams", "routerLinkActive", "routerLinkActiveOptions", "ngClass", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "click"], [1, "ui-submenu", 3, "parentItemKey", "item", "leafClick"]], template: function ContextMenuSub_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "ul", 0, 1);
        ɵngcc0.ɵɵtemplate(2, ContextMenuSub_ng_template_2_Template, 2, 2, "ng-template", 2);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(2, _c6, !ctx.root));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.root ? ctx.item : ctx.item.items);
    } }, directives: [ɵngcc1.NgClass, ɵngcc1.NgForOf, ɵngcc1.NgIf, ɵngcc1.NgStyle, ɵngcc2.RouterLinkWithHref, ɵngcc2.RouterLinkActive, ContextMenuSub], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ContextMenuSub, [{
        type: Component,
        args: [{
                selector: 'p-contextMenuSub',
                template: "\n        <ul #sublist [ngClass]=\"{'ui-widget-content ui-corner-all ui-submenu-list ui-shadow':!root}\" class=\"ui-menu-list\">\n            <ng-template ngFor let-child let-index=\"index\" [ngForOf]=\"(root ? item : item.items)\">\n                <li *ngIf=\"child.separator\" #menuitem class=\"ui-menu-separator ui-widget-content\" [ngClass]=\"{'ui-helper-hidden': child.visible === false}\" role=\"separator\">\n                <li *ngIf=\"!child.separator\" #menuitem [ngClass]=\"{'ui-menuitem ui-corner-all':true,'ui-menuitem-active': isActive(getKey(index)),'ui-helper-hidden': child.visible === false}\" [ngStyle]=\"child.style\" [class]=\"child.styleClass\"\n                    (mouseenter)=\"onItemMouseEnter($event,child,getKey(index))\" (mouseleave)=\"onItemMouseLeave($event,child)\" role=\"none\" [attr.data-ik]=\"getKey(index)\">\n                    <a *ngIf=\"!child.routerLink\" [attr.href]=\"child.url ? child.url : null\" [attr.target]=\"child.target\" [attr.title]=\"child.title\" [attr.id]=\"child.id\" [attr.tabindex]=\"child.disabled ? null : '0'\" (click)=\"onItemClick($event, child, menuitem, getKey(index))\"\n                        [ngClass]=\"{'ui-menuitem-link ui-corner-all':true,'ui-state-disabled':child.disabled}\" [attr.aria-haspopup]=\"item.items != null\" [attr.aria-expanded]=\"item === activeItem\">\n                        <span class=\"ui-submenu-icon pi pi-fw pi-caret-right\" *ngIf=\"child.items\"></span>\n                        <span class=\"ui-menuitem-icon\" *ngIf=\"child.icon\" [ngClass]=\"child.icon\"></span>\n                        <span class=\"ui-menuitem-text\">{{child.label}}</span>\n                    </a>\n                    <a *ngIf=\"child.routerLink\" [routerLink]=\"child.routerLink\" [queryParams]=\"child.queryParams\" [routerLinkActive]=\"'ui-menuitem-link-active'\" role=\"menuitem\"\n                        [routerLinkActiveOptions]=\"child.routerLinkActiveOptions||{exact:false}\" [attr.target]=\"child.target\" [attr.title]=\"child.title\" [attr.id]=\"child.id\" [attr.tabindex]=\"child.disabled ? null : '0'\"\n                        (click)=\"onItemClick($event, child, menuitem, getKey(index))\" [ngClass]=\"{'ui-menuitem-link ui-corner-all':true,'ui-state-disabled':child.disabled}\" [fragment]=\"child.fragment\" [queryParamsHandling]=\"child.queryParamsHandling\" [preserveFragment]=\"child.preserveFragment\" [skipLocationChange]=\"child.skipLocationChange\" [replaceUrl]=\"child.replaceUrl\" [state]=\"child.state\">\n                        <span class=\"ui-submenu-icon pi pi-fw pi-caret-right\" *ngIf=\"child.items\"></span>\n                        <span class=\"ui-menuitem-icon\" *ngIf=\"child.icon\" [ngClass]=\"child.icon\"></span>\n                        <span class=\"ui-menuitem-text\">{{child.label}}</span>\n                    </a>\n                    <p-contextMenuSub class=\"ui-submenu\" [parentItemKey]=\"getKey(index)\" [item]=\"child\" *ngIf=\"child.items\" (leafClick)=\"onLeafClick()\"></p-contextMenuSub>\n                </li>\n            </ng-template>\n        </ul>\n    "
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [forwardRef(function () { return ContextMenu; })]
            }] }]; }, { leafClick: [{
            type: Output
        }], item: [{
            type: Input
        }], root: [{
            type: Input
        }], parentItemKey: [{
            type: Input
        }], sublistViewChild: [{
            type: ViewChild,
            args: ['sublist']
        }], menuitemViewChild: [{
            type: ViewChild,
            args: ['menuitem']
        }] }); })();
    return ContextMenuSub;
}());
export { ContextMenuSub };
var ContextMenu = /** @class */ (function () {
    function ContextMenu(el, renderer, cd, zone, contextMenuService) {
        this.el = el;
        this.renderer = renderer;
        this.cd = cd;
        this.zone = zone;
        this.contextMenuService = contextMenuService;
        this.autoZIndex = true;
        this.baseZIndex = 0;
        this.triggerEvent = 'contextmenu';
        this.onShow = new EventEmitter();
        this.onHide = new EventEmitter();
        this.ngDestroy$ = new Subject();
    }
    ContextMenu.prototype.ngAfterViewInit = function () {
        var _this = this;
        if (this.global) {
            var documentTarget = this.el ? this.el.nativeElement.ownerDocument : 'document';
            this.triggerEventListener = this.renderer.listen(documentTarget, this.triggerEvent, function (event) {
                _this.show(event);
                event.preventDefault();
            });
        }
        else if (this.target) {
            this.triggerEventListener = this.renderer.listen(this.target, this.triggerEvent, function (event) {
                _this.show(event);
                event.preventDefault();
                event.stopPropagation();
            });
        }
        if (this.appendTo) {
            if (this.appendTo === 'body')
                document.body.appendChild(this.containerViewChild.nativeElement);
            else
                DomHandler.appendChild(this.containerViewChild.nativeElement, this.appendTo);
        }
    };
    ContextMenu.prototype.show = function (event) {
        this.clearActiveItem();
        this.position(event);
        this.moveOnTop();
        this.containerViewChild.nativeElement.style.display = 'block';
        DomHandler.fadeIn(this.containerViewChild.nativeElement, 250);
        this.bindGlobalListeners();
        if (event) {
            event.preventDefault();
        }
        this.onShow.emit();
    };
    ContextMenu.prototype.hide = function () {
        this.containerViewChild.nativeElement.style.display = 'none';
        this.unbindGlobalListeners();
        this.onHide.emit();
    };
    ContextMenu.prototype.moveOnTop = function () {
        if (this.autoZIndex) {
            this.containerViewChild.nativeElement.style.zIndex = String(this.baseZIndex + (++DomHandler.zindex));
        }
    };
    ContextMenu.prototype.toggle = function (event) {
        if (this.containerViewChild.nativeElement.offsetParent)
            this.hide();
        else
            this.show(event);
    };
    ContextMenu.prototype.position = function (event) {
        if (event) {
            var left = event.pageX + 1;
            var top_1 = event.pageY + 1;
            var width = this.containerViewChild.nativeElement.offsetParent ? this.containerViewChild.nativeElement.offsetWidth : DomHandler.getHiddenElementOuterWidth(this.containerViewChild.nativeElement);
            var height = this.containerViewChild.nativeElement.offsetParent ? this.containerViewChild.nativeElement.offsetHeight : DomHandler.getHiddenElementOuterHeight(this.containerViewChild.nativeElement);
            var viewport = DomHandler.getViewport();
            //flip
            if (left + width - document.body.scrollLeft > viewport.width) {
                left -= width;
            }
            //flip
            if (top_1 + height - document.body.scrollTop > viewport.height) {
                top_1 -= height;
            }
            //fit
            if (left < document.body.scrollLeft) {
                left = document.body.scrollLeft;
            }
            //fit
            if (top_1 < document.body.scrollTop) {
                top_1 = document.body.scrollTop;
            }
            this.containerViewChild.nativeElement.style.left = left + 'px';
            this.containerViewChild.nativeElement.style.top = top_1 + 'px';
        }
    };
    ContextMenu.prototype.positionSubmenu = function (sublist) {
        var parentMenuItem = sublist.parentElement.parentElement;
        var viewport = DomHandler.getViewport();
        var sublistWidth = sublist.offsetParent ? sublist.offsetWidth : DomHandler.getHiddenElementOuterWidth(sublist);
        var sublistHeight = sublist.offsetHeight ? sublist.offsetHeight : DomHandler.getHiddenElementOuterHeight(sublist);
        var itemOuterWidth = DomHandler.getOuterWidth(parentMenuItem.children[0]);
        var itemOuterHeight = DomHandler.getOuterHeight(parentMenuItem.children[0]);
        var containerOffset = DomHandler.getOffset(parentMenuItem.parentElement);
        sublist.style.zIndex = ++DomHandler.zindex;
        if ((parseInt(containerOffset.top) + itemOuterHeight + sublistHeight) > (viewport.height - DomHandler.calculateScrollbarHeight())) {
            sublist.style.removeProperty('top');
            sublist.style.bottom = '0px';
        }
        else {
            sublist.style.removeProperty('bottom');
            sublist.style.top = '0px';
        }
        if ((parseInt(containerOffset.left) + itemOuterWidth + sublistWidth) > (viewport.width - DomHandler.calculateScrollbarWidth())) {
            sublist.style.left = -sublistWidth + 'px';
        }
        else {
            sublist.style.left = itemOuterWidth + 'px';
        }
    };
    ContextMenu.prototype.isItemMatched = function (menuitem) {
        return DomHandler.hasClass(menuitem, 'ui-menuitem') && !DomHandler.hasClass(menuitem.children[0], 'ui-state-disabled');
    };
    ContextMenu.prototype.findNextItem = function (menuitem, isRepeated) {
        var nextMenuitem = menuitem.nextElementSibling;
        if (nextMenuitem) {
            return this.isItemMatched(nextMenuitem) ? nextMenuitem : this.findNextItem(nextMenuitem, isRepeated);
        }
        else {
            var firstItem = menuitem.parentElement.children[0];
            return this.isItemMatched(firstItem) ? firstItem : (!isRepeated ? this.findNextItem(firstItem, true) : null);
        }
    };
    ContextMenu.prototype.findPrevItem = function (menuitem, isRepeated) {
        var prevMenuitem = menuitem.previousElementSibling;
        if (prevMenuitem) {
            return this.isItemMatched(prevMenuitem) ? prevMenuitem : this.findPrevItem(prevMenuitem, isRepeated);
        }
        else {
            var lastItem = menuitem.parentElement.children[menuitem.parentElement.children.length - 1];
            return this.isItemMatched(lastItem) ? lastItem : (!isRepeated ? this.findPrevItem(lastItem, true) : null);
        }
    };
    ContextMenu.prototype.getActiveItem = function () {
        var activeItemKey = this.contextMenuService.activeItemKey;
        return activeItemKey == null ? null : DomHandler.findSingle(this.containerViewChild.nativeElement, '.ui-menuitem[data-ik="' + activeItemKey + '"]');
    };
    ContextMenu.prototype.clearActiveItem = function () {
        if (this.contextMenuService.activeItemKey) {
            this.removeActiveFromSubLists(this.containerViewChild.nativeElement);
            this.contextMenuService.reset();
        }
    };
    ContextMenu.prototype.removeActiveFromSubLists = function (el) {
        var e_1, _a;
        var sublists = DomHandler.find(el, '.ui-submenu-list-active');
        try {
            for (var sublists_1 = __values(sublists), sublists_1_1 = sublists_1.next(); !sublists_1_1.done; sublists_1_1 = sublists_1.next()) {
                var sublist = sublists_1_1.value;
                DomHandler.removeClass(sublist, 'ui-submenu-list-active');
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (sublists_1_1 && !sublists_1_1.done && (_a = sublists_1.return)) _a.call(sublists_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    ContextMenu.prototype.removeActiveFromSublist = function (menuitem) {
        if (menuitem) {
            var sublist = DomHandler.findSingle(menuitem, '.ui-submenu-list');
            if (sublist && DomHandler.hasClass(menuitem, 'ui-submenu-list-active')) {
                DomHandler.removeClass(menuitem, 'ui-submenu-list-active');
            }
        }
    };
    ContextMenu.prototype.bindGlobalListeners = function () {
        var _this = this;
        if (!this.documentClickListener) {
            var documentTarget = this.el ? this.el.nativeElement.ownerDocument : 'document';
            this.documentClickListener = this.renderer.listen(documentTarget, 'click', function (event) {
                if (_this.containerViewChild.nativeElement.offsetParent && _this.isOutsideClicked(event) && !event.ctrlKey && event.button !== 2) {
                    _this.hide();
                }
            });
        }
        this.zone.runOutsideAngular(function () {
            if (!_this.windowResizeListener) {
                _this.windowResizeListener = _this.onWindowResize.bind(_this);
                window.addEventListener('resize', _this.windowResizeListener);
            }
        });
        if (!this.documentKeydownListener) {
            var documentTarget = this.el ? this.el.nativeElement.ownerDocument : 'document';
            this.documentKeydownListener = this.renderer.listen(documentTarget, 'keydown', function (event) {
                var activeItem = _this.getActiveItem();
                switch (event.key) {
                    case 'ArrowDown':
                        if (activeItem) {
                            _this.removeActiveFromSublist(activeItem);
                            activeItem = _this.findNextItem(activeItem);
                        }
                        else {
                            var firstItem = DomHandler.findSingle(_this.containerViewChild.nativeElement, '.ui-menuitem-link').parentElement;
                            activeItem = _this.isItemMatched(firstItem) ? firstItem : _this.findNextItem(firstItem);
                        }
                        if (activeItem) {
                            _this.contextMenuService.changeKey(activeItem.getAttribute('data-ik'));
                        }
                        event.preventDefault();
                        break;
                    case 'ArrowUp':
                        if (activeItem) {
                            _this.removeActiveFromSublist(activeItem);
                            activeItem = _this.findPrevItem(activeItem);
                        }
                        else {
                            var sublist = DomHandler.findSingle(_this.containerViewChild.nativeElement, 'ul');
                            var lastItem = sublist.children[sublist.children.length - 1];
                            activeItem = _this.isItemMatched(lastItem) ? lastItem : _this.findPrevItem(lastItem);
                        }
                        if (activeItem) {
                            _this.contextMenuService.changeKey(activeItem.getAttribute('data-ik'));
                        }
                        event.preventDefault();
                        break;
                    case 'ArrowRight':
                        if (activeItem) {
                            var sublist = DomHandler.findSingle(activeItem, '.ui-submenu-list');
                            if (sublist) {
                                DomHandler.addClass(sublist, 'ui-submenu-list-active');
                                activeItem = DomHandler.findSingle(sublist, '.ui-menuitem-link:not(.ui-state-disabled)').parentElement;
                                if (activeItem) {
                                    _this.contextMenuService.changeKey(activeItem.getAttribute('data-ik'));
                                }
                            }
                        }
                        event.preventDefault();
                        break;
                    case 'ArrowLeft':
                        if (activeItem) {
                            var sublist = activeItem.parentElement;
                            if (sublist && DomHandler.hasClass(sublist, 'ui-submenu-list-active')) {
                                DomHandler.removeClass(sublist, 'ui-submenu-list-active');
                                activeItem = sublist.parentElement.parentElement;
                                if (activeItem) {
                                    _this.contextMenuService.changeKey(activeItem.getAttribute('data-ik'));
                                }
                            }
                        }
                        event.preventDefault();
                        break;
                    case 'Escape':
                        _this.hide();
                        event.preventDefault();
                        break;
                    case 'Enter':
                        if (activeItem) {
                            _this.handleItemClick(event, _this.findModelItemFromKey(_this.contextMenuService.activeItemKey), activeItem);
                        }
                        event.preventDefault();
                        break;
                    default:
                        break;
                }
            });
        }
    };
    ContextMenu.prototype.findModelItemFromKey = function (key) {
        var _this = this;
        if (key == null || !this.model) {
            return null;
        }
        var indexes = key.split('_');
        return indexes.reduce(function (item, currentIndex) {
            return item ? item.items[currentIndex] : _this.model[currentIndex];
        }, null);
    };
    ContextMenu.prototype.handleItemClick = function (event, item, menuitem) {
        if (!item || item.disabled) {
            return;
        }
        if (item.command) {
            item.command({
                originalEvent: event,
                item: item
            });
        }
        if (item.items) {
            var childSublist = DomHandler.findSingle(menuitem, '.ui-submenu-list');
            if (childSublist) {
                if (DomHandler.hasClass(childSublist, 'ui-submenu-list-active')) {
                    this.removeActiveFromSubLists(menuitem);
                }
                else {
                    DomHandler.addClass(childSublist, 'ui-submenu-list-active');
                    this.positionSubmenu(childSublist);
                }
            }
        }
        if (!item.items) {
            this.hide();
        }
    };
    ContextMenu.prototype.unbindGlobalListeners = function () {
        if (this.documentClickListener) {
            this.documentClickListener();
            this.documentClickListener = null;
        }
        if (this.windowResizeListener) {
            window.removeEventListener('resize', this.windowResizeListener);
            this.windowResizeListener = null;
        }
        if (this.documentKeydownListener) {
            this.documentKeydownListener();
            this.documentKeydownListener = null;
        }
    };
    ContextMenu.prototype.onWindowResize = function (event) {
        if (this.containerViewChild.nativeElement.offsetParent) {
            this.hide();
        }
    };
    ContextMenu.prototype.isOutsideClicked = function (event) {
        return !(this.containerViewChild.nativeElement.isSameNode(event.target) || this.containerViewChild.nativeElement.contains(event.target));
    };
    ContextMenu.prototype.ngOnDestroy = function () {
        this.unbindGlobalListeners();
        if (this.triggerEventListener) {
            this.triggerEventListener();
        }
        if (this.appendTo) {
            this.el.nativeElement.appendChild(this.containerViewChild.nativeElement);
        }
        this.ngDestroy$.next(true);
        this.ngDestroy$.complete();
    };
    ContextMenu.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: ChangeDetectorRef },
        { type: NgZone },
        { type: ContextMenuService }
    ]; };
    __decorate([
        Input()
    ], ContextMenu.prototype, "model", void 0);
    __decorate([
        Input()
    ], ContextMenu.prototype, "global", void 0);
    __decorate([
        Input()
    ], ContextMenu.prototype, "target", void 0);
    __decorate([
        Input()
    ], ContextMenu.prototype, "style", void 0);
    __decorate([
        Input()
    ], ContextMenu.prototype, "styleClass", void 0);
    __decorate([
        Input()
    ], ContextMenu.prototype, "appendTo", void 0);
    __decorate([
        Input()
    ], ContextMenu.prototype, "autoZIndex", void 0);
    __decorate([
        Input()
    ], ContextMenu.prototype, "baseZIndex", void 0);
    __decorate([
        Input()
    ], ContextMenu.prototype, "triggerEvent", void 0);
    __decorate([
        Output()
    ], ContextMenu.prototype, "onShow", void 0);
    __decorate([
        Output()
    ], ContextMenu.prototype, "onHide", void 0);
    __decorate([
        ViewChild('container')
    ], ContextMenu.prototype, "containerViewChild", void 0);
ContextMenu.ɵfac = function ContextMenu_Factory(t) { return new (t || ContextMenu)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.ContextMenuService)); };
ContextMenu.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ContextMenu, selectors: [["p-contextMenu"]], viewQuery: function ContextMenu_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c7, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.containerViewChild = _t.first);
    } }, inputs: { autoZIndex: "autoZIndex", baseZIndex: "baseZIndex", triggerEvent: "triggerEvent", model: "model", global: "global", target: "target", style: "style", styleClass: "styleClass", appendTo: "appendTo" }, outputs: { onShow: "onShow", onHide: "onHide" }, decls: 3, vars: 5, consts: [[3, "ngClass", "ngStyle"], ["container", ""], ["root", "root", 3, "item"]], template: function ContextMenu_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0, 1);
        ɵngcc0.ɵɵelement(2, "p-contextMenuSub", 2);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassMap(ctx.styleClass);
        ɵngcc0.ɵɵproperty("ngClass", "ui-contextmenu ui-widget ui-widget-content ui-corner-all ui-shadow")("ngStyle", ctx.style);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("item", ctx.model);
    } }, directives: [ɵngcc1.NgClass, ɵngcc1.NgStyle, ContextMenuSub], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ContextMenu, [{
        type: Component,
        args: [{
                selector: 'p-contextMenu',
                template: "\n        <div #container [ngClass]=\"'ui-contextmenu ui-widget ui-widget-content ui-corner-all ui-shadow'\"\n            [class]=\"styleClass\" [ngStyle]=\"style\">\n            <p-contextMenuSub [item]=\"model\" root=\"root\"></p-contextMenuSub>\n        </div>\n    ",
                changeDetection: ChangeDetectionStrategy.Default
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc3.ContextMenuService }]; }, { autoZIndex: [{
            type: Input
        }], baseZIndex: [{
            type: Input
        }], triggerEvent: [{
            type: Input
        }], onShow: [{
            type: Output
        }], onHide: [{
            type: Output
        }], model: [{
            type: Input
        }], global: [{
            type: Input
        }], target: [{
            type: Input
        }], style: [{
            type: Input
        }], styleClass: [{
            type: Input
        }], appendTo: [{
            type: Input
        }], containerViewChild: [{
            type: ViewChild,
            args: ['container']
        }] }); })();
    return ContextMenu;
}());
export { ContextMenu };
var ContextMenuModule = /** @class */ (function () {
    function ContextMenuModule() {
    }
ContextMenuModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ContextMenuModule });
ContextMenuModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ContextMenuModule_Factory(t) { return new (t || ContextMenuModule)(); }, providers: [ContextMenuService], imports: [[CommonModule, RouterModule], RouterModule] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ContextMenuModule, { declarations: function () { return [ContextMenu, ContextMenuSub]; }, imports: function () { return [CommonModule, RouterModule]; }, exports: function () { return [ContextMenu, RouterModule]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ContextMenuModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, RouterModule],
                exports: [ContextMenu, RouterModule],
                declarations: [ContextMenu, ContextMenuSub],
                providers: [ContextMenuService]
            }]
    }], function () { return []; }, null); })();
    return ContextMenuModule;
}());
export { ContextMenuModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,