{"version":3,"file":"primeng-lts-fieldset.js","sources":["primeng-lts/fieldset/fieldset.ts","primeng-lts/fieldset/primeng-lts-fieldset.ts"],"names":[],"mappings":"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","sourcesContent":["import {NgModule,Component,Input,Output,EventEmitter,ElementRef,ChangeDetectionStrategy} from '@angular/core';\nimport {trigger,state,style,transition,animate} from '@angular/animations';\nimport {CommonModule} from '@angular/common';\nimport {SharedModule} from 'primeng-lts/api';\nimport {BlockableUI} from 'primeng-lts/api';\n\nlet idx: number = 0;\n\n@Component({\n    selector: 'p-fieldset',\n    template: `\n        <fieldset [attr.id]=\"id\" [ngClass]=\"{'ui-fieldset ui-widget ui-widget-content ui-corner-all': true, 'ui-fieldset-toggleable': toggleable}\" [ngStyle]=\"style\" [class]=\"styleClass\">\n            <legend class=\"ui-fieldset-legend ui-corner-all ui-state-default ui-unselectable-text\">\n                <ng-container *ngIf=\"toggleable; else legendContent\">\n                    <a tabindex=\"0\" (click)=\"toggle($event)\" (keydown.enter)=\"toggle($event)\" [attr.aria-controls]=\"id + '-content'\" [attr.aria-expanded]=\"!collapsed\">\n                        <ng-container *ngTemplateOutlet=\"legendContent\"></ng-container>\n                    </a>\n                </ng-container>\n                <ng-template #legendContent>\n                    <span class=\"ui-fieldset-toggler pi\" *ngIf=\"toggleable\" [ngClass]=\"{'pi-minus': !collapsed,'pi-plus':collapsed}\"></span>\n                    <span class=\"ui-fieldset-legend-text\">{{legend}}</span>\n                    <ng-content select=\"p-header\"></ng-content>\n                </ng-template>\n            </legend>\n            <div [attr.id]=\"id + '-content'\" class=\"ui-fieldset-content-wrapper\" [@fieldsetContent]=\"collapsed ? {value: 'hidden', params: {transitionParams: transitionOptions, height: '0'}} : {value: 'visible', params: {transitionParams: animating ? transitionOptions : '0ms', height: '*'}}\" \n                        [attr.aria-labelledby]=\"id\" [ngClass]=\"{'ui-fieldset-content-wrapper-overflown': collapsed||animating}\" [attr.aria-hidden]=\"collapsed\"\n                         (@fieldsetContent.done)=\"onToggleDone($event)\" role=\"region\">\n                <div class=\"ui-fieldset-content\">\n                    <ng-content></ng-content>\n                </div>\n            </div>\n        </fieldset>\n    `,\n    animations: [\n        trigger('fieldsetContent', [\n            state('hidden', style({\n                height: '0'\n            })),\n            state('void', style({\n                height: '{{height}}'\n            }), {params: {height: '0'}}),\n            state('visible', style({\n                height: '*'\n            })),\n            transition('visible => hidden', animate('{{transitionParams}}')),\n            transition('hidden => visible', animate('{{transitionParams}}')),\n            transition('void => visible', animate('{{transitionParams}}'))\n        ])\n    ],\n    changeDetection: ChangeDetectionStrategy.Default\n})\nexport class Fieldset implements BlockableUI {\n\n    @Input() legend: string;\n\n    @Input() toggleable: boolean;\n\n    @Input() collapsed: boolean = false;\n\n    @Output() collapsedChange: EventEmitter<any> = new EventEmitter();\n    \n    @Output() onBeforeToggle: EventEmitter<any> = new EventEmitter();\n\n    @Output() onAfterToggle: EventEmitter<any> = new EventEmitter();\n    \n    @Input() style: any;\n        \n    @Input() styleClass: string;\n\n    @Input() transitionOptions: string = '400ms cubic-bezier(0.86, 0, 0.07, 1)';\n    \n    public animating: boolean;\n    \n    constructor(private el: ElementRef) {}\n    \n    id: string = `ui-fieldset-${idx++}`;\n        \n    toggle(event) {\n        if (this.animating) {\n            return false;\n        }\n        \n        this.animating = true;\n        this.onBeforeToggle.emit({originalEvent: event, collapsed: this.collapsed});\n        \n        if (this.collapsed)\n            this.expand(event);\n        else\n            this.collapse(event);\n            \n        this.onAfterToggle.emit({originalEvent: event, collapsed: this.collapsed});   \n        event.preventDefault();\n    }\n    \n    expand(event) {\n        this.collapsed = false;\n        this.collapsedChange.emit(this.collapsed);\n    }\n    \n    collapse(event) {\n        this.collapsed = true;\n        this.collapsedChange.emit(this.collapsed);\n    }\n    \n    getBlockableElement(): HTMLElementÂ {\n        return this.el.nativeElement.children[0];\n    }\n    \n    onToggleDone(event: Event) {\n        this.animating = false;\n    }\n\n}\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [Fieldset,SharedModule],\n    declarations: [Fieldset]\n})\nexport class FieldsetModule { }","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"]}