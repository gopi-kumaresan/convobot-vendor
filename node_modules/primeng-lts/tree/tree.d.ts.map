{"version":3,"file":"tree.d.ts","sources":["tree.d.ts"],"names":[],"mappingssourcesContent":["import { AfterContentInit, OnDestroy, EventEmitter, OnInit, OnChanges, QueryList, TemplateRef, ElementRef, SimpleChanges } from '@angular/core';\r\nimport { CdkVirtualScrollViewport } from '@angular/cdk/scrolling';\r\nimport { TreeNode } from 'primeng-lts/api';\r\nimport { TreeDragDropService } from 'primeng-lts/api';\r\nimport { Subscription } from 'rxjs';\r\nimport { BlockableUI } from 'primeng-lts/api';\r\nexport declare class UITreeNode implements OnInit {\r\n    static ICON_CLASS: string;\r\n    rowNode: any;\r\n    node: TreeNode;\r\n    parentNode: TreeNode;\r\n    root: boolean;\r\n    index: number;\r\n    firstChild: boolean;\r\n    lastChild: boolean;\r\n    level: number;\r\n    tree: Tree;\r\n    constructor(tree: any);\r\n    draghoverPrev: boolean;\r\n    draghoverNext: boolean;\r\n    draghoverNode: boolean;\r\n    ngOnInit(): void;\r\n    getIcon(): string;\r\n    isLeaf(): boolean;\r\n    toggle(event: Event): void;\r\n    expand(event: Event): void;\r\n    collapse(event: Event): void;\r\n    onNodeClick(event: MouseEvent): void;\r\n    onNodeKeydown(event: KeyboardEvent): void;\r\n    onNodeTouchEnd(): void;\r\n    onNodeRightClick(event: MouseEvent): void;\r\n    isSelected(): boolean;\r\n    onDropPoint(event: Event, position: number): void;\r\n    processPointDrop(event: any): void;\r\n    createDropPointEventMetadata(position: any): {\r\n        dragNode: TreeNode;\r\n        dragNodeIndex: number;\r\n        dragNodeSubNodes: TreeNode[];\r\n        dropNode: TreeNode;\r\n        index: number;\r\n        position: any;\r\n    };\r\n    onDropPointDragOver(event: any): void;\r\n    onDropPointDragEnter(event: Event, position: number): void;\r\n    onDropPointDragLeave(event: Event): void;\r\n    onDragStart(event: any): void;\r\n    onDragStop(event: any): void;\r\n    onDropNodeDragOver(event: any): void;\r\n    onDropNode(event: any): void;\r\n    createDropNodeEventMetadata(): {\r\n        dragNode: TreeNode;\r\n        dragNodeIndex: number;\r\n        dragNodeSubNodes: TreeNode[];\r\n        dropNode: TreeNode;\r\n    };\r\n    processNodeDrop(event: any): void;\r\n    onDropNodeDragEnter(event: any): void;\r\n    onDropNodeDragLeave(event: any): void;\r\n    onKeyDown(event: KeyboardEvent): void;\r\n    findNextSiblingOfAncestor(nodeElement: any): any;\r\n    findLastVisibleDescendant(nodeElement: any): any;\r\n    getParentNodeElement(nodeElement: any): any;\r\n    focusNode(element: any): void;\r\n}\r\nexport declare class Tree implements OnInit, AfterContentInit, OnChanges, OnDestroy, BlockableUI {\r\n    el: ElementRef;\r\n    dragDropService: TreeDragDropService;\r\n    value: TreeNode[];\r\n    selectionMode: string;\r\n    selection: any;\r\n    selectionChange: EventEmitter<any>;\r\n    onNodeSelect: EventEmitter<any>;\r\n    onNodeUnselect: EventEmitter<any>;\r\n    onNodeExpand: EventEmitter<any>;\r\n    onNodeCollapse: EventEmitter<any>;\r\n    onNodeContextMenuSelect: EventEmitter<any>;\r\n    onNodeDrop: EventEmitter<any>;\r\n    style: any;\r\n    styleClass: string;\r\n    contextMenu: any;\r\n    layout: string;\r\n    draggableScope: any;\r\n    droppableScope: any;\r\n    draggableNodes: boolean;\r\n    droppableNodes: boolean;\r\n    metaKeySelection: boolean;\r\n    propagateSelectionUp: boolean;\r\n    propagateSelectionDown: boolean;\r\n    loading: boolean;\r\n    loadingIcon: string;\r\n    emptyMessage: string;\r\n    ariaLabel: string;\r\n    ariaLabelledBy: string;\r\n    validateDrop: boolean;\r\n    filter: boolean;\r\n    filterBy: string;\r\n    filterMode: string;\r\n    filterPlaceholder: string;\r\n    filterLocale: string;\r\n    scrollHeight: string;\r\n    virtualScroll: boolean;\r\n    virtualNodeHeight: string;\r\n    minBufferPx: number;\r\n    maxBufferPx: number;\r\n    trackBy: Function;\r\n    onFilter: EventEmitter<any>;\r\n    templates: QueryList<any>;\r\n    virtualScrollBody: CdkVirtualScrollViewport;\r\n    serializedValue: any[];\r\n    templateMap: any;\r\n    nodeTouched: boolean;\r\n    dragNodeTree: Tree;\r\n    dragNode: TreeNode;\r\n    dragNodeSubNodes: TreeNode[];\r\n    dragNodeIndex: number;\r\n    dragNodeScope: any;\r\n    dragHover: boolean;\r\n    dragStartSubscription: Subscription;\r\n    dragStopSubscription: Subscription;\r\n    filteredNodes: TreeNode[];\r\n    constructor(el: ElementRef, dragDropService: TreeDragDropService);\r\n    ngOnInit(): void;\r\n    ngOnChanges(simpleChange: SimpleChanges): void;\r\n    readonly horizontal: boolean;\r\n    ngAfterContentInit(): void;\r\n    updateSerializedValue(): void;\r\n    serializeNodes(parent: any, nodes: any, level: any, visible: any): void;\r\n    onNodeClick(event: any, node: TreeNode): void;\r\n    onNodeTouchEnd(): void;\r\n    onNodeRightClick(event: MouseEvent, node: TreeNode): void;\r\n    findIndexInSelection(node: TreeNode): number;\r\n    syncNodeOption(node: any, parentNodes: any, option: any, value?: any): void;\r\n    hasFilteredNodes(): number;\r\n    getNodeWithKey(key: string, nodes: TreeNode[]): any;\r\n    propagateUp(node: TreeNode, select: boolean): void;\r\n    propagateDown(node: TreeNode, select: boolean): void;\r\n    isSelected(node: TreeNode): boolean;\r\n    isSingleSelectionMode(): boolean;\r\n    isMultipleSelectionMode(): boolean;\r\n    isCheckboxSelectionMode(): boolean;\r\n    isNodeLeaf(node: any): boolean;\r\n    getRootNode(): TreeNode[];\r\n    getTemplateForNode(node: TreeNode): TemplateRef<any>;\r\n    onDragOver(event: any): void;\r\n    onDrop(event: any): void;\r\n    processTreeDrop(dragNode: any, dragNodeIndex: any): void;\r\n    onDragEnter(): void;\r\n    onDragLeave(event: any): void;\r\n    allowDrop(dragNode: TreeNode, dropNode: TreeNode, dragNodeScope: any): boolean;\r\n    isValidDragScope(dragScope: any): boolean;\r\n    _filter(event: any): void;\r\n    findFilteredNodes(node: any, paramsWithoutNode: any): boolean;\r\n    isFilterMatched(node: any, { searchFields, filterText, isStrictMode }: {\r\n        searchFields: any;\r\n        filterText: any;\r\n        isStrictMode: any;\r\n    }): boolean;\r\n    getBlockableElement(): HTMLElement;\r\n    ngOnDestroy(): void;\r\n}\r\nexport declare class TreeModule {\r\n}\r\n"]}