{"version":3,"file":"drawing-manager.d.ts","sources":["drawing-manager.d.ts"],"names":[],"mappingssourcesContent":["import { Circle, CircleOptions, GoogleMap, Marker, MarkerOptions, MVCObject, Polygon, PolygonOptions, Polyline, PolylineOptions, Rectangle, RectangleOptions } from '@agm/core/services/google-maps-types';\nimport { EventEmitter, NgZone, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { DrawingControlOptions, OverlayCompleteEvent, OverlayType } from '../google-drawing-types';\nexport declare class AgmDrawingManager implements OnChanges, OnDestroy {\n    private _zone;\n    /**\n     * The enabled/disabled state of the drawing control. Defaults to `true`.\n     *\n     * @type {boolean}\n     */\n    drawingControl: boolean;\n    /**\n     * The DrawingManager's drawing mode, which defines the type of overlay to be\n     * added on the map. A drawing mode of null means that the user can interact\n     * with the map as normal, and clicks do not draw anything.\n     */\n    drawingMode: OverlayType | null;\n    /**\n     * The display options for the drawing control.\n     *\n     * @type {DrawingControlOptions}\n     */\n    drawingControlOptions: DrawingControlOptions;\n    /**\n     * Options to apply to any new circles created with this DrawingManager.\n     * The `center` and `radius` properties are ignored, and the `map` property of a\n     * new circle is always set to the DrawingManager's map.\n     *\n     * @type {CircleOptions}\n     */\n    circleOptions: CircleOptions;\n    /**\n     * Options to apply to any new markers created with this DrawingManager.\n     * The `position` property is ignored, and the `map` property of a new marker\n     * is always set to the DrawingManager's map.\n     *\n     * @type {MarkerOptions}\n     */\n    markerOptions: MarkerOptions;\n    /**\n     * Options to apply to any new polygons created with this DrawingManager.\n     * The `paths` property is ignored, and the map property of a new polygon is\n     * always set to the DrawingManager's map.\n     *\n     * @type {PolygonOptions}\n     */\n    polygonOptions: PolygonOptions;\n    /**\n     * Options to apply to any new polylines created with this DrawingManager.\n     * The `path` property is ignored, and the map property of a new polyline is\n     * always set to the DrawingManager's map.\n     *\n     * @type {PolylineOptions}\n     * @memberof AgmDrawingManager\n     */\n    polylineOptions: PolylineOptions;\n    /**\n     * Options to apply to any new rectangles created with this DrawingManager.\n     * The `bounds` property is ignored, and the map property of a new rectangle\n     * is always set to the DrawingManager's map.\n     *\n     * @type {RectangleOptions}\n     * @memberof AgmDrawingManager\n     */\n    rectangeOptions: RectangleOptions;\n    /**\n     * This event is fired when the user has finished drawing a circle.\n     */\n    circleComplete: EventEmitter<Circle>;\n    /**\n     * This event is fired when the user has finished drawing a marker.\n     */\n    markerComplete: EventEmitter<Marker>;\n    /**\n     * This event is fired when the user has finished drawing an overlay of any\n     * type.\n     */\n    overlayComplete: EventEmitter<OverlayCompleteEvent>;\n    /**\n     * This event is fired when the user has finished drawing a polygon.\n     */\n    polygonComplete: EventEmitter<Polygon>;\n    /**\n     * This event is fired when the user has finished drawing a polyline.\n     */\n    polylineComplete: EventEmitter<Polyline>;\n    /**\n     * This event is fired when the user has finished drawing a rectangle.\n     */\n    rectangleComplete: EventEmitter<Rectangle>;\n    private eventSubscriptions;\n    private drawingManager;\n    constructor(_zone: NgZone);\n    setMap(map: GoogleMap): void;\n    initEvents(drawingManager: any): void;\n    createMvcObservable<E>(eventName: string, mvcObject: MVCObject): Observable<E>;\n    ngOnChanges(changes: SimpleChanges): void;\n    ngOnDestroy(): void;\n}\n"]}