import * as tslib_1 from "tslib";
import { AgmMap } from '@agm/core';
import { Directive, Host, Input } from '@angular/core';
import { first } from 'rxjs/operators';
import { AgmDrawingManager } from './drawing-manager';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@agm/core';
let AgmDrawingManagerTrigger = class AgmDrawingManagerTrigger {
    constructor(_agmMap) {
        this._agmMap = _agmMap;
    }
    ngAfterViewInit() {
        this._agmMap.mapReady.pipe(first()).subscribe(map => this.drawingManager.setMap(map));
    }
    ngOnDestroy() {
        this._agmMap.mapReady.pipe(first()).subscribe(() => this.drawingManager.setMap(null));
    }
};
AgmDrawingManagerTrigger.ɵfac = function AgmDrawingManagerTrigger_Factory(t) { return new (t || AgmDrawingManagerTrigger)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AgmMap, 1)); };
AgmDrawingManagerTrigger.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AgmDrawingManagerTrigger, selectors: [["agm-map", "agmDrawingManager", ""]], inputs: { drawingManager: ["agmDrawingManager", "drawingManager"] }, exportAs: ["matDrawingManagerTrigger"] });
AgmDrawingManagerTrigger.ctorParameters = () => [
    { type: AgmMap, decorators: [{ type: Host }] }
];
tslib_1.__decorate([
    Input('agmDrawingManager'),
    tslib_1.__metadata("design:type", AgmDrawingManager)
], AgmDrawingManagerTrigger.prototype, "drawingManager", void 0);
AgmDrawingManagerTrigger = tslib_1.__decorate([ tslib_1.__param(0, Host()),
    tslib_1.__metadata("design:paramtypes", [AgmMap])
], AgmDrawingManagerTrigger);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AgmDrawingManagerTrigger, [{
        type: Directive,
        args: [{
                selector: 'agm-map[agmDrawingManager]',
                exportAs: 'matDrawingManagerTrigger'
            }]
    }], function () { return [{ type: ɵngcc1.AgmMap, decorators: [{
                type: Host
            }] }]; }, { drawingManager: [{
            type: Input,
            args: ['agmDrawingManager']
        }] }); })();
export { AgmDrawingManagerTrigger };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJhd2luZy1tYW5hZ2VyLXRyaWdnZXIuanMiLCJzb3VyY2VzIjpbIkBhZ20vZHJhd2luZy9kaXJlY3RpdmVzL2RyYXdpbmctbWFuYWdlci10cmlnZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ25DLE9BQU8sRUFBaUIsU0FBUyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQWEsTUFBTSxlQUFlLENBQUM7QUFDakYsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3ZDLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLG1CQUFtQixDQUFDOzs7QUFNdEQsSUFBYSx3QkFBd0IsR0FBckMsTUFBYSx3QkFBd0I7QUFBRyxJQU10QyxZQUE0QixPQUFlO0FBQzdDLFFBRDhCLFlBQU8sR0FBUCxPQUFPLENBQVE7QUFBQyxJQUM1QyxDQUFDO0FBQ0gsSUFDRSxlQUFlO0FBQUssUUFDbEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUMxRixJQUFFLENBQUM7QUFDSCxJQUNFLFdBQVc7QUFDYixRQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQzFGLElBQUUsQ0FBQztBQUNILENBQUM7OzZQQUFBO0FBQ0Q7QUFBa0QsWUFYWCxNQUFNLHVCQUE5QixJQUFJO0FBQU07QUFGSztBQUFxQixJQUFoRCxLQUFLLENBQUMsbUJBQW1CLENBQUM7QUFBRSxzQ0FBZSxpQkFBaUI7QUFDL0QsZ0VBRGdFO0FBSm5ELHdCQUF3Qiw0QkFKcEMsU0FBUyxDQUFDLFVBQ1QsekJBR0UsQ0FNVyxtQkFBQSxJQUFJLEVBQUUsQ0FBQTtJQVRYLEVBQUUsNEJBQTRCLFVBQ3RDLFFBQVEscERBUWEsNkNBQWdCLE1BQU07QUFSakMsMEJBQTBCLDFCQVFVLEdBTm5DLHdCQUF3QixDQWdCcEM7R0FqQkEsQ0FBQzs7Ozs7Ozs7Ozs7b0JBa0JGO0FBQUMsU0FqQlksd0JBQXdCO0FBQUkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZ21NYXAgfSBmcm9tICdAYWdtL2NvcmUnO1xuaW1wb3J0IHsgQWZ0ZXJWaWV3SW5pdCwgRGlyZWN0aXZlLCBIb3N0LCBJbnB1dCwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBmaXJzdCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IEFnbURyYXdpbmdNYW5hZ2VyIH0gZnJvbSAnLi9kcmF3aW5nLW1hbmFnZXInO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdhZ20tbWFwW2FnbURyYXdpbmdNYW5hZ2VyXScsXG4gIGV4cG9ydEFzOiAnbWF0RHJhd2luZ01hbmFnZXJUcmlnZ2VyJyxcbn0pXG5leHBvcnQgY2xhc3MgQWdtRHJhd2luZ01hbmFnZXJUcmlnZ2VyIGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95e1xuXG4gIC8qKiBUaGUgZHJhd2luZyBtYW5hZ2VyIHRvIGJlIGF0dGFjaGVkIHRvIHRoaXMgdHJpZ2dlci4gKi9cbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBuby1pbnB1dC1yZW5hbWVcbiAgQElucHV0KCdhZ21EcmF3aW5nTWFuYWdlcicpIGRyYXdpbmdNYW5hZ2VyOiBBZ21EcmF3aW5nTWFuYWdlcjtcblxuICBjb25zdHJ1Y3RvcihASG9zdCgpIHByaXZhdGUgX2FnbU1hcDogQWdtTWFwKSB7XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7XG4gICAgdGhpcy5fYWdtTWFwLm1hcFJlYWR5LnBpcGUoZmlyc3QoKSkuc3Vic2NyaWJlKG1hcCA9PiB0aGlzLmRyYXdpbmdNYW5hZ2VyLnNldE1hcChtYXApKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuX2FnbU1hcC5tYXBSZWFkeS5waXBlKGZpcnN0KCkpLnN1YnNjcmliZSgoKSA9PiB0aGlzLmRyYXdpbmdNYW5hZ2VyLnNldE1hcChudWxsKSk7XG4gIH1cbn1cbiJdfQ==