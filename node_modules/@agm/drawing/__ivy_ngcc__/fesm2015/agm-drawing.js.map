{"version":3,"file":"agm-drawing.js","sources":["@agm/drawing/google-drawing-types.ts","@agm/drawing/directives/drawing-manager.ts","@agm/drawing/directives/drawing-manager-trigger.ts","@agm/drawing/drawing.module.ts","@agm/drawing/agm-drawing.ts"],"names":["tslib_1.__decorate","tslib_1.__param"],"mappings":"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","sourcesContent":["import { Circle, ControlPosition, Marker, Polygon, Polyline, Rectangle } from '@agm/core/services/google-maps-types';\n\nexport enum OverlayType {\n  CIRCLE = 'circle',\n  MARKER = 'marker',\n  POLYGONE = 'polygon',\n  POLYLINE = 'polyline',\n  RECTANGE = 'rectangle',\n}\n\nexport interface DrawingControlOptions {\n  drawingModes?: OverlayType[];\n  position?: ControlPosition;\n}\n\nexport interface OverlayCompleteEvent {\n  overlay: Marker | Polygon | Polyline | Rectangle | Circle;\n  type: OverlayType;\n}\n","import { Circle, CircleOptions, GoogleMap, MapsEventListener, Marker, MarkerOptions, MVCObject, Polygon, PolygonOptions, Polyline, PolylineOptions, Rectangle, RectangleOptions } from '@agm/core/services/google-maps-types';\nimport { Directive, EventEmitter, Input, isDevMode, NgZone, OnChanges, OnDestroy, Output, SimpleChanges } from '@angular/core';\nimport { fromEventPattern, Observable, Subscription } from 'rxjs';\nimport { DrawingControlOptions, OverlayCompleteEvent, OverlayType } from '../google-drawing-types';\n\ndeclare var google: any;\n\n@Directive({\n  selector: 'agm-drawing-manager',\n  exportAs: 'agmDrawingManager',\n})\nexport class AgmDrawingManager implements OnChanges, OnDestroy{\n\n  /**\n   * The enabled/disabled state of the drawing control. Defaults to `true`.\n   *\n   * @type {boolean}\n   */\n  @Input() drawingControl: boolean;\n\n  /**\n   * The DrawingManager's drawing mode, which defines the type of overlay to be\n   * added on the map. A drawing mode of null means that the user can interact\n   * with the map as normal, and clicks do not draw anything.\n   */\n  @Input() drawingMode: OverlayType | null;\n\n  /**\n   * The display options for the drawing control.\n   *\n   * @type {DrawingControlOptions}\n   */\n  @Input() drawingControlOptions: DrawingControlOptions;\n\n  /**\n   * Options to apply to any new circles created with this DrawingManager.\n   * The `center` and `radius` properties are ignored, and the `map` property of a\n   * new circle is always set to the DrawingManager's map.\n   *\n   * @type {CircleOptions}\n   */\n  @Input() circleOptions: CircleOptions;\n\n  /**\n   * Options to apply to any new markers created with this DrawingManager.\n   * The `position` property is ignored, and the `map` property of a new marker\n   * is always set to the DrawingManager's map.\n   *\n   * @type {MarkerOptions}\n   */\n  @Input() markerOptions: MarkerOptions;\n\n  /**\n   * Options to apply to any new polygons created with this DrawingManager.\n   * The `paths` property is ignored, and the map property of a new polygon is\n   * always set to the DrawingManager's map.\n   *\n   * @type {PolygonOptions}\n   */\n  @Input() polygonOptions: PolygonOptions;\n\n  /**\n   * Options to apply to any new polylines created with this DrawingManager.\n   * The `path` property is ignored, and the map property of a new polyline is\n   * always set to the DrawingManager's map.\n   *\n   * @type {PolylineOptions}\n   * @memberof AgmDrawingManager\n   */\n  @Input() polylineOptions: PolylineOptions;\n\n  /**\n   * Options to apply to any new rectangles created with this DrawingManager.\n   * The `bounds` property is ignored, and the map property of a new rectangle\n   * is always set to the DrawingManager's map.\n   *\n   * @type {RectangleOptions}\n   * @memberof AgmDrawingManager\n   */\n  @Input() rectangeOptions: RectangleOptions;\n\n  /**\n   * This event is fired when the user has finished drawing a circle.\n   */\n  @Output() circleComplete = new EventEmitter<Circle>();\n\n  /**\n   * This event is fired when the user has finished drawing a marker.\n   */\n  @Output() markerComplete = new EventEmitter<Marker>();\n\n  /**\n   * This event is fired when the user has finished drawing an overlay of any\n   * type.\n   */\n  @Output() overlayComplete = new EventEmitter<OverlayCompleteEvent>();\n\n  /**\n   * This event is fired when the user has finished drawing a polygon.\n   */\n  @Output() polygonComplete = new EventEmitter<Polygon>();\n\n  /**\n   * This event is fired when the user has finished drawing a polyline.\n   */\n  @Output() polylineComplete = new EventEmitter<Polyline>();\n\n  /**\n   * This event is fired when the user has finished drawing a rectangle.\n   */\n  @Output() rectangleComplete = new EventEmitter<Rectangle>();\n\n  private eventSubscriptions: Subscription[] = [];\n\n  private drawingManager: any;\n\n  constructor(private _zone: NgZone) {\n  }\n\n  setMap(map: GoogleMap) {\n    if (!google.maps.drawing && isDevMode()) {\n      console.error('Cannot use drawing manager if drawing library is not ' +\n        'loaded. To fix, add libraries: [\\'drawing\\'] to the ' +\n        'lazyMapsAPILoaderConfig you passed to AgmCoreModule.forRoot');\n      return;\n    }\n    if (map && !this.drawingManager) {\n      this.drawingManager = new google.maps.drawing.DrawingManager({\n          map,\n          circleOptions: this.circleOptions,\n          markerOptions: this.markerOptions,\n          polygonOptions: this.polygonOptions,\n          polylineOptions: this.polylineOptions,\n          rectangeOptions: this.rectangeOptions,\n          drawingControl: this.drawingControl,\n          drawingControlOptions: this.drawingControlOptions,\n          drawingMode: this.drawingMode,\n      });\n      this.initEvents(this.drawingManager);\n    } else if (!map && this.drawingManager) {\n      this.drawingManager.setMap(null);\n    }\n    // else do nothing\n  }\n\n  initEvents(drawingManager: any) {\n    this.eventSubscriptions.push(\n      this.createMvcObservable<Circle>('circlecomplete', drawingManager)\n      .subscribe(circle => this._zone.run(() => this.circleComplete.next(circle)))\n    );\n    this.eventSubscriptions.push(\n      this.createMvcObservable<Marker>('markercomplete', drawingManager)\n      .subscribe(marker => this._zone.run(() => this.markerComplete.next(marker)))\n    );\n    this.eventSubscriptions.push(\n      this.createMvcObservable<Polygon>('polygoncomplete', drawingManager)\n      .subscribe(polygon => this._zone.run(() => this.polygonComplete.next(polygon)))\n    );\n    this.eventSubscriptions.push(\n      this.createMvcObservable<Polyline>('polylinecomplete', drawingManager)\n      .subscribe(polyline => this._zone.run(() => this.polylineComplete.next(polyline)))\n    );\n    this.eventSubscriptions.push(\n      this.createMvcObservable<OverlayCompleteEvent>('overlaycomplete', drawingManager)\n      .subscribe(overlayevent => this._zone.run(() => this.overlayComplete.next(overlayevent)))\n    );\n    this.eventSubscriptions.push(\n      this.createMvcObservable<Rectangle>('rectanglecomplete', drawingManager)\n      .subscribe(rectangle => this._zone.run(() => this.rectangleComplete.next(rectangle)))\n    );\n  }\n\n  createMvcObservable<E>(eventName: string, mvcObject: MVCObject): Observable<E> {\n    return fromEventPattern(\n      handler => mvcObject.addListener(eventName,\n        (event?: E) => handler.apply(null, [event])),\n      (_handler: Function, evListener: MapsEventListener) => evListener.remove()\n    );\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (!this.drawingManager) {\n      return;\n    }\n\n    const options = Object.entries(changes)\n    .map(([prop, change]) => [prop, change.currentValue])\n    .reduce((obj: any, [propName, propValue]) => {\n      obj[propName] = propValue;\n      return obj;\n    }, {});\n    this.drawingManager.setOptions(options);\n  }\n\n  ngOnDestroy(): void {\n    this.eventSubscriptions.forEach(subscription => subscription.unsubscribe());\n  }\n\n}\n","import { AgmMap } from '@agm/core';\nimport { AfterViewInit, Directive, Host, Input, OnDestroy } from '@angular/core';\nimport { first } from 'rxjs/operators';\nimport { AgmDrawingManager } from './drawing-manager';\n\n@Directive({\n  selector: 'agm-map[agmDrawingManager]',\n  exportAs: 'matDrawingManagerTrigger',\n})\nexport class AgmDrawingManagerTrigger implements AfterViewInit, OnDestroy{\n\n  /** The drawing manager to be attached to this trigger. */\n  // tslint:disable-next-line: no-input-rename\n  @Input('agmDrawingManager') drawingManager: AgmDrawingManager;\n\n  constructor(@Host() private _agmMap: AgmMap) {\n  }\n\n  ngAfterViewInit(): void {\n    this._agmMap.mapReady.pipe(first()).subscribe(map => this.drawingManager.setMap(map));\n  }\n\n  ngOnDestroy() {\n    this._agmMap.mapReady.pipe(first()).subscribe(() => this.drawingManager.setMap(null));\n  }\n}\n","import { AgmCoreModule } from '@agm/core';\nimport { NgModule } from '@angular/core';\nimport { AgmDrawingManager } from './directives/drawing-manager';\nimport { AgmDrawingManagerTrigger } from './directives/drawing-manager-trigger';\n\n@NgModule({\n  imports: [AgmCoreModule],\n  declarations: [AgmDrawingManager, AgmDrawingManagerTrigger],\n  exports: [AgmDrawingManager, AgmDrawingManagerTrigger],\n})\nexport class AgmDrawingModule {\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"]}