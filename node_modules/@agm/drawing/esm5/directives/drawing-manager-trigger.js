import * as tslib_1 from "tslib";
import { AgmMap } from '@agm/core';
import { Directive, Host, Input } from '@angular/core';
import { first } from 'rxjs/operators';
import { AgmDrawingManager } from './drawing-manager';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@agm/core';
var AgmDrawingManagerTrigger = /** @class */ (function () {
    function AgmDrawingManagerTrigger(_agmMap) {
        this._agmMap = _agmMap;
    }
    AgmDrawingManagerTrigger.prototype.ngAfterViewInit = function () {
        var _this = this;
        this._agmMap.mapReady.pipe(first()).subscribe(function (map) { return _this.drawingManager.setMap(map); });
    };
    AgmDrawingManagerTrigger.prototype.ngOnDestroy = function () {
        var _this = this;
        this._agmMap.mapReady.pipe(first()).subscribe(function () { return _this.drawingManager.setMap(null); });
    };
    AgmDrawingManagerTrigger.ctorParameters = function () { return [
        { type: AgmMap, decorators: [{ type: Host }] }
    ]; };
    tslib_1.__decorate([
        Input('agmDrawingManager'),
        tslib_1.__metadata("design:type", AgmDrawingManager)
    ], AgmDrawingManagerTrigger.prototype, "drawingManager", void 0);
    AgmDrawingManagerTrigger = tslib_1.__decorate([ tslib_1.__param(0, Host()),
        tslib_1.__metadata("design:paramtypes", [AgmMap])
    ], AgmDrawingManagerTrigger);
AgmDrawingManagerTrigger.ɵfac = function AgmDrawingManagerTrigger_Factory(t) { return new (t || AgmDrawingManagerTrigger)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AgmMap, 1)); };
AgmDrawingManagerTrigger.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AgmDrawingManagerTrigger, selectors: [["agm-map", "agmDrawingManager", ""]], inputs: { drawingManager: ["agmDrawingManager", "drawingManager"] }, exportAs: ["matDrawingManagerTrigger"] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AgmDrawingManagerTrigger, [{
        type: Directive,
        args: [{
                selector: 'agm-map[agmDrawingManager]',
                exportAs: 'matDrawingManagerTrigger'
            }]
    }], function () { return [{ type: ɵngcc1.AgmMap, decorators: [{
                type: Host
            }] }]; }, { drawingManager: [{
            type: Input,
            args: ['agmDrawingManager']
        }] }); })();
    return AgmDrawingManagerTrigger;
}());
export { AgmDrawingManagerTrigger };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJhd2luZy1tYW5hZ2VyLXRyaWdnZXIuanMiLCJzb3VyY2VzIjpbIkBhZ20vZHJhd2luZy9kaXJlY3RpdmVzL2RyYXdpbmctbWFuYWdlci10cmlnZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ25DLE9BQU8sRUFBaUIsU0FBUyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQWEsTUFBTSxlQUFlLENBQUM7QUFDakYsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3ZDLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLG1CQUFtQixDQUFDOzs7QUFNdEQ7QUFBNEQsSUFNMUQsa0NBQTRCLE9BQWU7QUFDN0MsUUFEOEIsWUFBTyxHQUFQLE9BQU8sQ0FBUTtBQUFDLElBQzVDLENBQUM7QUFDSCxJQUNFLGtEQUFlLEdBQWY7QUFBYyxRQUFkLGlCQUVDO0FBQ0gsUUFGSSxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsVUFBQSxHQUFHLElBQUksT0FBQSxLQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBL0IsQ0FBK0IsQ0FBQyxDQUFDO0FBQzFGLElBQUUsQ0FBQztBQUVILElBQUUsOENBQVcsR0FBWDtBQUFjLFFBQWQsaUJBRUM7QUFDSCxRQUZJLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxjQUFNLE9BQUEsS0FBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQWhDLENBQWdDLENBQUMsQ0FBQztBQUMxRixJQUFFLENBQUM7QUFDRjtBQUNtRSxnQkFYN0IsTUFBTSx1QkFBOUIsSUFBSTtBQUFNO0FBQVUsSUFGTDtBQUFxQixRQUFoRCxLQUFLLENBQUMsbUJBQW1CLENBQUM7QUFBRSwwQ0FBZSxpQkFBaUI7QUFDL0Qsb0VBRGdFO0FBRWhFLElBTmEsd0JBQXdCLGdDQUpwQyxTQUFTLENBQUMsbkJBSUgsQ0FNTyxtQkFBQSxJQUFJLEVBQUUsQ0FBQTtJQVRuQixRQUFRLEVBQUUsNEJBQTRCLGNBQ3RDLHhEQVFxQixpREFBZ0IsTUFBTTtNQVJuQyxFQUFFLFJBUW9DLE9BTm5DLHdCQUF3QixDQWdCcEM7QUFsQnFDLFdBQ3JDLENBQUM7Ozs7Ozs7Ozs7Ozs7b0JBa0JGO0FBQUMsSUFERCwrQkFBQztBQUNBLENBREEsQUFoQkQsSUFnQkM7QUFDRCxTQWpCYSx3QkFBd0I7QUFBSSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFnbU1hcCB9IGZyb20gJ0BhZ20vY29yZSc7XG5pbXBvcnQgeyBBZnRlclZpZXdJbml0LCBEaXJlY3RpdmUsIEhvc3QsIElucHV0LCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGZpcnN0IH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgQWdtRHJhd2luZ01hbmFnZXIgfSBmcm9tICcuL2RyYXdpbmctbWFuYWdlcic7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ2FnbS1tYXBbYWdtRHJhd2luZ01hbmFnZXJdJyxcbiAgZXhwb3J0QXM6ICdtYXREcmF3aW5nTWFuYWdlclRyaWdnZXInLFxufSlcbmV4cG9ydCBjbGFzcyBBZ21EcmF3aW5nTWFuYWdlclRyaWdnZXIgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3l7XG5cbiAgLyoqIFRoZSBkcmF3aW5nIG1hbmFnZXIgdG8gYmUgYXR0YWNoZWQgdG8gdGhpcyB0cmlnZ2VyLiAqL1xuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IG5vLWlucHV0LXJlbmFtZVxuICBASW5wdXQoJ2FnbURyYXdpbmdNYW5hZ2VyJykgZHJhd2luZ01hbmFnZXI6IEFnbURyYXdpbmdNYW5hZ2VyO1xuXG4gIGNvbnN0cnVjdG9yKEBIb3N0KCkgcHJpdmF0ZSBfYWdtTWFwOiBBZ21NYXApIHtcbiAgfVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLl9hZ21NYXAubWFwUmVhZHkucGlwZShmaXJzdCgpKS5zdWJzY3JpYmUobWFwID0+IHRoaXMuZHJhd2luZ01hbmFnZXIuc2V0TWFwKG1hcCkpO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5fYWdtTWFwLm1hcFJlYWR5LnBpcGUoZmlyc3QoKSkuc3Vic2NyaWJlKCgpID0+IHRoaXMuZHJhd2luZ01hbmFnZXIuc2V0TWFwKG51bGwpKTtcbiAgfVxufVxuIl19